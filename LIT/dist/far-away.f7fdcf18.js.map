{"mappings":"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C,IAAiB;IACrD,OAAOlE,gBAAgB6B,cAAc,CAACC,IAAI,CAACmC,QAAQC;AACvD;AAEA,mBAAA;AACO,IAAMC,4BACTvE,OAAOuE,yBAAyB,IAChC,SAASA,0BAA0BF,MAAW;I,uF;IAE1C,IAAMG,MAAW,CAAA;I,iE;IAEjBT,QAAQM,QAAQI,OAAO,CAAC,SAAA7G,GAAG;QACvB4G,GAAG,CAAC5G,IAAI,GAAGqC,cAAcoE,QAAQzG;IACpC;IACD,OAAO4G;AACX;AAEJ,SAAgBE,QAAQC,KAAa,EAAEC,IAAY;IAC/C,OAAO,CAAC,CAAED,CAAAA,QAAQC,IAAAA;AACtB;AAEA,SAAgBC,QAAQF,KAAa,EAAEC,IAAY,EAAEE,QAAiB;IAClE,IAAIA,UACAH,SAASC;SAETD,SAAS,CAACC;IAEd,OAAOD;AACX;A,S,kB,C,E,C;I,C,Q,K,I,E,M,A,K,C,I,E,M,A;I,I,I,I,G,I,M,I,I,G,I,C,C,E,G,C,C,E;I,O;A;A,S,kB,C,E,C;I,I,I,I,G,I,E,M,E,I;Q,I,I,C,C,E;Q,E,U,G,E,U,I,C,G,E,Y,G,C,G,W,K,C,E,Q,G,C,C,G,O,c,C,G,e,E,G,G;I;A;A,S,a,C,E,C,E,C;I,O,K,kB,E,S,E,I,K,kB,G,I,O,c,C,G,a;Q,U,C;I,I;A;A,S,gC,C,E,C;I,I,I,e,O,U,C,C,O,Q,C,I,C,C,a;I,I,G,O,A,C,I,E,I,C,E,E,I,C,I,C;I,I,M,O,C,M,C,I,4B,E,K,K,K,Y,O,E,M,E;Q,K,C,I,C;Q,I,I;Q,O;Y,O,K,E,M,G;gB,M,C;Y,I;gB,M,C;gB,O,C,C,I;Y;Q;I;I,M,I,U;A;A,S;I,O,W,O,M,G,O,M,C,I,K,S,C;Q,I,I,I,G,I,U,M,E,I;Y,I,I,S,C,E;Y,I,I,K,E,A,C,C,C,E,c,C,I,C,G,M,C,C,C,E,G,C,C,E,A;Q;Q,O;I,G,S,K,C,M;A;A,S,e,C,E,C;I,E,S,G,O,M,C,E,S,G,E,S,C,W,G,G,gB,G;A;A,S,gB,C,E,C;I,O,kB,O,c,G,O,c,C,I,K,S,C,E,C;Q,O,E,S,G,G;I,G,gB,G;A;A,S,a,C,E,C;I,I,Y,O,K,C,G,O;I,I,I,C,C,O,W,C;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AA,SAAA,EAAA,iBAAA;AAGD,WAAA;IADC,CAAA,GAAA,YAAM,AAAN;I,W,e;I,W,qB;Q;K;I,W,qB,K;CAGA,EAAA,SAAA,SAAA,EAAA,0BAAA;AAGD,WAAA;IADC,CAAA,GAAA,YAAM,AAAN;I,W,e;I,W,qB;Q;K;I,W,qB,K;CAGA,EAAA,SAAA,SAAA,EAAA,6BAAA;AAGD,WAAA;IADC,CAAA,GAAA,YAAM,AAAN;I,W,e;I,W,qB;Q;K;I,W,qB,K;CAGA,EAAA,SAAA,SAAA,EAAA,8BAAA;AAED,WAAA;IAAC,CAAA,GAAA,cAAQ,AAAR;I,W,e;I,W,qB,E;CAGA,EAAA,SAAA,SAAA,EAAA,oBAAA;AAED,WAAA;IAAC,CAAA,GAAA,cAAQ,AAAR;I,W,e;I,W,qB,E;CAIA,EAAA,SAAA,SAAA,EAAA,iBAAA;AAED,WAAA;IAAC,CAAA,GAAA,cAAQ,AAAR;I,W,e;I,W,qB,E;CAIA,EAAA,SAAA,SAAA,EAAA,sBAAA;AAED,WAAA;IAAC,CAAA,GAAA,cAAQ,AAAR;I,W,e;I,W,qB,E;CAIA,EAAA,SAAA,SAAA,EAAA,uBAAA;AAGD,WAAA;IAAC,CAAA,GAAA,cAAQ,AAAR;I,W,e;I,W,qB,E;CAGA,EAAA,SAAA,SAAA,EAAA,mBAAA;AAYE,MAAM,WAAW,IAAI;;;AE5E5B;AAEA,MAAM,WAAW;AAEjB,IAAI,CAAC,eAAe,GAAG,CAAC,WACpB,eAAe,MAAM,CAAC,UAAU,CAAA,GAAA,4BAAS,AAAT;;;;;AECpC,6DAA6D;AAE7D,mDAAa;AARb;AACA;AACA;AACA;AACA;AACA;A,I,a,a,U,U,I,S,U,E,M,E,G,E,I;I,I,I,U,M,E,I,I,I,S,S,O,O,O,wB,C,Q,O,M;I,I,O,Y,Y,O,Q,Q,K,Y,I,Q,Q,C,Y,Q,K;S,I,I,I,W,M,G,G,K,G,I,I,I,U,C,E,E,I,A,C,I,I,E,K,I,I,E,Q,K,K,E,Q,I,K;I,O,I,K,K,O,c,C,Q,K,I;A;A,I,a,a,U,U,I,S,C,E,C;I,I,O,Y,Y,O,Q,Q,K,Y,O,Q,Q,C,G;A;AAGM,MAAO,sBAAsB,CAAA,GAAA,uBAAc,AAAd;IAc/B,aAAA;QACI,KAAK;QAbT,6BAA6B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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-bf7cd98bb6af40f0.js","dist/tip-calculator/index.js","src/tip-calculator/index.ts","dist/tip-calculator/registry/tip-calculator.js","src/tip-calculator/registry/tip-calculator.ts","dist/tip-calculator/TipCalculator.js","src/tip-calculator/TipCalculator.ts","node_modules/@adobe/lit-mobx/lit-mobx.js","node_modules/@adobe/lit-mobx/src/lit-mobx.ts","node_modules/@adobe/lit-mobx/lib/mixin.js","node_modules/@adobe/lit-mobx/src/lib/mixin.ts","node_modules/@adobe/lit-mobx/lib/mixin-custom.js","node_modules/@adobe/lit-mobx/src/lib/mixin-custom.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/mobx/dist/mobx.esm.js","node_modules/mobx/src/errors.ts","node_modules/mobx/src/utils/global.ts","node_modules/mobx/src/utils/utils.ts","node_modules/mobx/src/api/decorators.ts","node_modules/mobx/src/core/atom.ts","node_modules/mobx/src/utils/comparer.ts","node_modules/mobx/src/types/modifiers.ts","node_modules/mobx/src/types/overrideannotation.ts","node_modules/mobx/src/types/actionannotation.ts","node_modules/mobx/src/types/flowannotation.ts","node_modules/mobx/src/types/computedannotation.ts","node_modules/mobx/src/types/observableannotation.ts","node_modules/mobx/src/types/autoannotation.ts","node_modules/mobx/src/api/observable.ts","node_modules/mobx/src/api/computed.ts","node_modules/mobx/src/core/action.ts","node_modules/mobx/src/types/observablevalue.ts","node_modules/mobx/src/core/computedvalue.ts","node_modules/mobx/src/core/derivation.ts","node_modules/mobx/src/core/globalstate.ts","node_modules/mobx/src/core/observable.ts","node_modules/mobx/src/core/reaction.ts","node_modules/mobx/src/core/spy.ts","node_modules/mobx/src/api/action.ts","node_modules/mobx/src/api/autorun.ts","node_modules/mobx/src/api/become-observed.ts","node_modules/mobx/src/api/configure.ts","node_modules/mobx/src/api/extendobservable.ts","node_modules/mobx/src/api/extras.ts","node_modules/mobx/src/api/flow.ts","node_modules/mobx/src/api/intercept-read.ts","node_modules/mobx/src/api/intercept.ts","node_modules/mobx/src/api/iscomputed.ts","node_modules/mobx/src/api/isobservable.ts","node_modules/mobx/src/api/object-api.ts","node_modules/mobx/src/api/observe.ts","node_modules/mobx/src/api/tojs.ts","node_modules/mobx/src/api/trace.ts","node_modules/mobx/src/api/transaction.ts","node_modules/mobx/src/api/when.ts","node_modules/mobx/src/types/dynamicobject.ts","node_modules/mobx/src/types/intercept-utils.ts","node_modules/mobx/src/types/listen-utils.ts","node_modules/mobx/src/api/makeObservable.ts","node_modules/mobx/src/types/observablearray.ts","node_modules/mobx/src/types/observablemap.ts","node_modules/mobx/src/types/observableset.ts","node_modules/mobx/src/types/observableobject.ts","node_modules/mobx/src/types/legacyobservablearray.ts","node_modules/mobx/src/types/type-utils.ts","node_modules/mobx/src/utils/eq.ts","node_modules/mobx/src/utils/iterable.ts","node_modules/mobx/src/api/annotation.ts","node_modules/mobx/src/mobx.ts","node_modules/lit/index.js","node_modules/@lit/reactive-element/reactive-element.js","node_modules/@lit/reactive-element/src/reactive-element.ts","node_modules/@lit/reactive-element/css-tag.js","node_modules/@lit/reactive-element/src/css-tag.ts","node_modules/lit-html/lit-html.js","node_modules/lit-html/src/lit-html.ts","node_modules/lit-element/lit-element.js","node_modules/lit-element/src/lit-element.ts","node_modules/lit-html/is-server.js","node_modules/lit-html/src/is-server.ts","node_modules/lit/decorators.js","node_modules/@lit/reactive-element/decorators/custom-element.js","node_modules/@lit/reactive-element/src/decorators/custom-element.ts","node_modules/@lit/reactive-element/decorators/property.js","node_modules/@lit/reactive-element/src/decorators/property.ts","node_modules/@lit/reactive-element/decorators/state.js","node_modules/@lit/reactive-element/src/decorators/state.ts","node_modules/@lit/reactive-element/decorators/event-options.js","node_modules/@lit/reactive-element/src/decorators/event-options.ts","node_modules/@lit/reactive-element/decorators/query.js","node_modules/@lit/reactive-element/src/decorators/query.ts","node_modules/@lit/reactive-element/decorators/base.js","node_modules/@lit/reactive-element/src/decorators/base.ts","node_modules/@lit/reactive-element/decorators/query-all.js","node_modules/@lit/reactive-element/src/decorators/query-all.ts","node_modules/@lit/reactive-element/decorators/query-async.js","node_modules/@lit/reactive-element/src/decorators/query-async.ts","node_modules/@lit/reactive-element/decorators/query-assigned-elements.js","node_modules/@lit/reactive-element/src/decorators/query-assigned-elements.ts","node_modules/@lit/reactive-element/decorators/query-assigned-nodes.js","node_modules/@lit/reactive-element/src/decorators/query-assigned-nodes.ts","node_modules/lit/directives/when.js","node_modules/lit-html/directives/when.js","node_modules/lit-html/src/directives/when.ts","dist/tip-calculator/store/TipStore.js","src/tip-calculator/store/TipStore.ts","dist/tip-calculator/registry/bill-amount.js","src/tip-calculator/registry/bill-amount.ts","dist/tip-calculator/BillAmountBox.js","src/tip-calculator/BillAmountBox.ts","node_modules/lit/directives/guard.js","node_modules/lit-html/directives/guard.js","node_modules/lit-html/src/directives/guard.ts","node_modules/lit-html/directive.js","node_modules/lit-html/src/directive.ts","dist/tip-calculator/registry/final-amount.js","src/tip-calculator/registry/final-amount.ts","dist/tip-calculator/FinalAmountDisplay.js","src/tip-calculator/FinalAmountDisplay.ts","dist/tip-calculator/registry/select-rating.js","src/tip-calculator/registry/select-rating.ts","dist/tip-calculator/SelectOptionForRating.js","src/tip-calculator/SelectOptionForRating.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"e9c315adf7fdcf18\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n    } catch (err) {\n      if (err.message) {\n        console.error(err.message);\n      }\n      ws = {};\n    }\n  }\n\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  if (ws instanceof WebSocket) {\n    ws.onerror = function (e) {\n      if (e.message) {\n        console.error(e.message);\n      }\n    };\n    ws.onclose = function () {\n      console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}",null,"export * from \"./registry/tip-calculator\";\nexport * from \"./registry/bill-amount\";\nexport * from \"./registry/final-amount\";\nexport * from \"./registry/select-rating\";\nexport {tipStore} from \"./store/TipStore\";\n// export * from \"./store/TodoStore\"\n// export * from \"./store/PersonStore\";\n// export * from \"./store/PersonStoreConv\"",null,"\n\nimport { TipCalculator as Component } from \"../TipCalculator\";\n\nconst TAG_NAME = \"tip-calculator\";\n\nif (!customElements.get(TAG_NAME)) {\n    customElements.define(TAG_NAME, Component);\n}\n\ndeclare global {\n\n    interface HTMLElementTagNameMap {\n        [TAG_NAME]: Component;\n    }\n\n}\n\n\n\n",null,"import { MobxLitElement } from \"@adobe/lit-mobx\";\nimport { LitElement, TemplateResult, html } from \"lit\"\nimport { property, state } from \"lit/decorators\";\nimport { when } from \"lit/directives/when\";\nimport { tipStore } from \"./store/TipStore\";\n\nexport class TipCalculator extends MobxLitElement {\n\n    // @state()\n    billValue = 0;\n\n    // @property({ type: Number, })\n    @state()\n    percentage1 = 0;\n\n    @property({ type: Number })\n    percentage2 = 0;\n\n\n    render() {\n        const initialBillAmount = tipStore.actualBillAmount;\n        this.percentage1 = tipStore.currentFirstRating;\n        this.percentage2 = tipStore.currentSecondRating;\n\n        return html`\n            <div\n               \n            >\n               <h3>TIP CALC-V </h3>\n               <span slot=\"billAmount\">Enter your bill amount</span> \n               <bill-amount></bill-amount>\n               <div slot=\"question\">\n                    <span>How will you rate us today !</span>\n                    <select-rating id=\"my-rating\" is-first></select-rating>\n               </div>\n                <div slot=\"question\">\n                    <span>How much your friend rate us today!</span>\n                    <select-rating id=\"friend-rating\" is-second></select-rating>\n               </div>\n                 ${when(\n            initialBillAmount > 0,\n            () =>\n                html` <final-amount>\n                        <div slot=\"final\">\n                            <h3>Final bill amount:</h3>\n                            <p>Actual bill: ${initialBillAmount} </p>\n                            <p>Your rating:${tipStore.currentFirstRating} </p>\n                            <p>Your friend rating: ${tipStore.currentSecondRating}</p>\n                            ${this.renderCalculatedAmount()}\n                        </div>\n                    </final-amount>`\n        )}\n            </div>\n            `\n    }\n\n\n    onRatingChange = (e: CustomEvent) => {\n\n        console.log(`percentage 1 tip store:`)\n\n        console.log(`Got percentage change2: ${e.detail.optionValue} `)\n        const selEvent = e.target as HTMLElement\n        if (selEvent.id === \"my-rating\") {\n            console.log(`Got my rating as: ${e.detail.optionValue} `);\n            this.percentage1 = e.detail.optionValue;\n        } else if (selEvent.id = \"friend-rating\") {\n            console.log(`Got my rating as: ${e.detail.optionValue} `);\n            this.percentage2 = e.detail.optionValue;\n        }\n        this.requestUpdate()\n\n    }\n\n    renderCalculatedAmount(): TemplateResult {\n        // console.log(\"current 1: \", this.percentage1);\n        // console.log(\"current 2: \", this.percentage2);\n        // console.log(\"current bill amount:\", tipStore.actualBillAmount)\n        return html`\n                    <span>\n                             Total Amount to Pay:\n                     </span>\n                     ${tipStore.finalBillAmount}\n                `\n    }\n\n}",null,"/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { MobxReactionUpdate } from './lib/mixin.js';\nimport { LitElement } from 'lit';\n\nexport * from './lib/mixin.js';\n\n/**\n * A LitElement derived class which uses the MobxReactionUpdate mixin to create a mobx\n * reactive implementation of LitElement.\n *\n * Any observables used in the render template of the element will be tracked by a reaction\n * and cause an update of the element upon change.\n */\nexport class MobxLitElement extends MobxReactionUpdate(LitElement) {}\n",null,"/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    MobxReactionUpdateCustom,\n    ReactiveElementConstructor,\n} from './mixin-custom.js';\nimport { Reaction } from 'mobx';\n\nexport { ReactiveElementConstructor } from './mixin-custom';\n\n/**\n * A class mixin which can be applied to lit-element's\n * [ReactiveElement](https://lit.dev/docs/api/ReactiveElement/)\n * derived classes. This mixin adds a mobx reaction which tracks the update method of ReactiveElement.\n *\n * Any observables used in the render template of the element will be tracked by a reaction\n * and cause an update of the element upon change.\n *\n * @param constructor the constructor to extend from to add the mobx reaction, must be derived from ReactiveElement.\n */\nexport function MobxReactionUpdate<T extends ReactiveElementConstructor>(\n    constructor: T\n): T {\n    return MobxReactionUpdateCustom(constructor, Reaction);\n}\n",null,"/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { ReactiveElement, PropertyValues } from 'lit';\nimport type { Reaction } from 'mobx';\n\nconst reaction = Symbol('LitMobxRenderReaction');\nconst cachedRequestUpdate = Symbol('LitMobxRequestUpdate');\n\nexport type ReactiveElementConstructor = new (\n    ...args: any[]\n) => ReactiveElement;\n\nexport interface ReactionConstructor {\n    new (...args: any[]): Reaction;\n}\n\n/**\n * A class mixin which can be applied to lit-element's\n * [ReactiveElement](https://lit.dev/docs/api/ReactiveElement/)\n * derived classes. This mixin adds a mobx reaction which tracks the update method of ReactiveElement.\n *\n * Any observables used in the render template of the element will be tracked by a reaction\n * and cause an update of the element upon change.\n *\n * @param constructor the constructor to extend from to add the mobx reaction, must be derived from ReactiveElement.\n * @param reaction a constructor for the Reaction implementation from mobx, used to provide custom Reactions and\n * makes it easier to handle multiple versions of mobx within a single application.\n */\nexport function MobxReactionUpdateCustom<T extends ReactiveElementConstructor>(\n    constructor: T,\n    ReactionConstructor: ReactionConstructor\n): T {\n    return class MobxReactingElement extends constructor {\n        // NOTE: using a symbol here to avoid potential name collisions in derived classes\n        private [reaction]: Reaction | undefined;\n\n        private [cachedRequestUpdate] = () => {\n            this.requestUpdate();\n        };\n\n        public connectedCallback(): void {\n            super.connectedCallback();\n            const name =\n                this.constructor.name /* c8 ignore next */ || this.nodeName;\n            this[reaction] = new ReactionConstructor(\n                `${name}.update()`,\n                this[cachedRequestUpdate]\n            );\n            if (this.hasUpdated) this.requestUpdate();\n        }\n\n        public disconnectedCallback(): void {\n            super.disconnectedCallback();\n            if (this[reaction]) {\n                this[reaction]!.dispose();\n                this[reaction] = undefined;\n            }\n        }\n\n        protected update(changedProperties: PropertyValues): void {\n            if (this[reaction]) {\n                this[reaction]!.track(\n                    super.update.bind(this, changedProperties)\n                );\n                /* c8 ignore next 4 */\n            } else {\n                // this should never happen, but just in case\n                super.update(changedProperties);\n            }\n        }\n    };\n}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n",null,"const niceErrors = {\n    0: `Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'`,\n    1(annotationType, key: PropertyKey) {\n        return `Cannot apply '${annotationType}' to '${key.toString()}': Field not found.`\n    },\n    /*\n    2(prop) {\n        return `invalid decorator for '${prop.toString()}'`\n    },\n    3(prop) {\n        return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`\n    },\n    4(prop) {\n        return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`\n    },\n    */\n    5: \"'keys()' can only be used on observable objects, arrays, sets and maps\",\n    6: \"'values()' can only be used on observable objects, arrays, sets and maps\",\n    7: \"'entries()' can only be used on observable objects, arrays and maps\",\n    8: \"'set()' can only be used on observable objects, arrays and maps\",\n    9: \"'remove()' can only be used on observable objects, arrays and maps\",\n    10: \"'has()' can only be used on observable objects, arrays and maps\",\n    11: \"'get()' can only be used on observable objects, arrays and maps\",\n    12: `Invalid annotation`,\n    13: `Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)`,\n    14: \"Intercept handlers should return nothing or a change object\",\n    15: `Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)`,\n    16: `Modification exception: the internal structure of an observable array was changed.`,\n    17(index, length) {\n        return `[mobx.array] Index out of bounds, ${index} is larger than ${length}`\n    },\n    18: \"mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js\",\n    19(other) {\n        return \"Cannot initialize from classes that inherit from Map: \" + other.constructor.name\n    },\n    20(other) {\n        return \"Cannot initialize map from \" + other\n    },\n    21(dataStructure) {\n        return `Cannot convert to map from '${dataStructure}'`\n    },\n    22: \"mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js\",\n    23: \"It is not possible to get index atoms from arrays\",\n    24(thing) {\n        return \"Cannot obtain administration from \" + thing\n    },\n    25(property, name) {\n        return `the entry '${property}' does not exist in the observable map '${name}'`\n    },\n    26: \"please specify a property\",\n    27(property, name) {\n        return `no observable property '${property.toString()}' found on the observable object '${name}'`\n    },\n    28(thing) {\n        return \"Cannot obtain atom from \" + thing\n    },\n    29: \"Expecting some object\",\n    30: \"invalid action stack. did you forget to finish an action?\",\n    31: \"missing option for computed: get\",\n    32(name, derivation) {\n        return `Cycle detected in computation ${name}: ${derivation}`\n    },\n    33(name) {\n        return `The setter of computed value '${name}' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?`\n    },\n    34(name) {\n        return `[ComputedValue '${name}'] It is not possible to assign a new value to a computed value.`\n    },\n    35: \"There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`\",\n    36: \"isolateGlobalState should be called before MobX is running any reactions\",\n    37(method) {\n        return `[mobx] \\`observableArray.${method}()\\` mutates the array in-place, which is not allowed inside a derivation. Use \\`array.slice().${method}()\\` instead`\n    },\n    38: \"'ownKeys()' can only be used on observable objects\",\n    39: \"'defineProperty()' can only be used on observable objects\"\n} as const\n\nconst errors: typeof niceErrors = __DEV__ ? niceErrors : ({} as any)\n\nexport function die(error: string | keyof typeof errors, ...args: any[]): never {\n    if (__DEV__) {\n        let e: any = typeof error === \"string\" ? error : errors[error]\n        if (typeof e === \"function\") e = e.apply(null, args as any)\n        throw new Error(`[MobX] ${e}`)\n    }\n    throw new Error(\n        typeof error === \"number\"\n            ? `[MobX] minified error nr: ${error}${\n                  args.length ? \" \" + args.map(String).join(\",\") : \"\"\n              }. Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts`\n            : `[MobX] ${error}`\n    )\n}\n","declare const window: any\ndeclare const self: any\n\nconst mockGlobal = {}\n\nexport function getGlobal() {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis\n    }\n    if (typeof window !== \"undefined\") {\n        return window\n    }\n    if (typeof global !== \"undefined\") {\n        return global\n    }\n    if (typeof self !== \"undefined\") {\n        return self\n    }\n    return mockGlobal\n}\n","import { globalState, die } from \"../internal\"\n\n// We shorten anything used > 5 times\nexport const assign = Object.assign\nexport const getDescriptor = Object.getOwnPropertyDescriptor\nexport const defineProperty = Object.defineProperty\nexport const objectPrototype = Object.prototype\n\nexport const EMPTY_ARRAY = []\nObject.freeze(EMPTY_ARRAY)\n\nexport const EMPTY_OBJECT = {}\nObject.freeze(EMPTY_OBJECT)\n\nexport interface Lambda {\n    (): void\n    name?: string\n}\n\nconst hasProxy = typeof Proxy !== \"undefined\"\nconst plainObjectString = Object.toString()\n\nexport function assertProxies() {\n    if (!hasProxy) {\n        die(\n            __DEV__\n                ? \"`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`\"\n                : \"Proxy not available\"\n        )\n    }\n}\n\nexport function warnAboutProxyRequirement(msg: string) {\n    if (__DEV__ && globalState.verifyProxies) {\n        die(\n            \"MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to \" +\n                msg\n        )\n    }\n}\n\nexport function getNextId() {\n    return ++globalState.mobxGuid\n}\n\n/**\n * Makes sure that the provided function is invoked at most once.\n */\nexport function once(func: Lambda): Lambda {\n    let invoked = false\n    return function () {\n        if (invoked) {\n            return\n        }\n        invoked = true\n        return (func as any).apply(this, arguments)\n    }\n}\n\nexport const noop = () => {}\n\nexport function isFunction(fn: any): fn is Function {\n    return typeof fn === \"function\"\n}\n\nexport function isString(value: any): value is string {\n    return typeof value === \"string\"\n}\n\nexport function isStringish(value: any): value is string | number | symbol {\n    const t = typeof value\n    switch (t) {\n        case \"string\":\n        case \"symbol\":\n        case \"number\":\n            return true\n    }\n    return false\n}\n\nexport function isObject(value: any): value is Object {\n    return value !== null && typeof value === \"object\"\n}\n\nexport function isPlainObject(value: any) {\n    if (!isObject(value)) {\n        return false\n    }\n    const proto = Object.getPrototypeOf(value)\n    if (proto == null) {\n        return true\n    }\n    const protoConstructor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n    return (\n        typeof protoConstructor === \"function\" && protoConstructor.toString() === plainObjectString\n    )\n}\n\n// https://stackoverflow.com/a/37865170\nexport function isGenerator(obj: any): boolean {\n    const constructor = obj?.constructor\n    if (!constructor) {\n        return false\n    }\n    if (\n        \"GeneratorFunction\" === constructor.name ||\n        \"GeneratorFunction\" === constructor.displayName\n    ) {\n        return true\n    }\n    return false\n}\n\nexport function addHiddenProp(object: any, propName: PropertyKey, value: any) {\n    defineProperty(object, propName, {\n        enumerable: false,\n        writable: true,\n        configurable: true,\n        value\n    })\n}\n\nexport function addHiddenFinalProp(object: any, propName: PropertyKey, value: any) {\n    defineProperty(object, propName, {\n        enumerable: false,\n        writable: false,\n        configurable: true,\n        value\n    })\n}\n\nexport function createInstanceofPredicate<T>(\n    name: string,\n    theClass: new (...args: any[]) => T\n): (x: any) => x is T {\n    const propName = \"isMobX\" + name\n    theClass.prototype[propName] = true\n    return function (x) {\n        return isObject(x) && x[propName] === true\n    } as any\n}\n\n/**\n * Yields true for both native and observable Map, even across different windows.\n */\nexport function isES6Map(thing: unknown): thing is Map<any, any> {\n    return thing != null && Object.prototype.toString.call(thing) === \"[object Map]\"\n}\n\n/**\n * Makes sure a Map is an instance of non-inherited native or observable Map.\n */\nexport function isPlainES6Map(thing: Map<unknown, unknown>): boolean {\n    const mapProto = Object.getPrototypeOf(thing)\n    const objectProto = Object.getPrototypeOf(mapProto)\n    const nullProto = Object.getPrototypeOf(objectProto)\n    return nullProto === null\n}\n\n/**\n * Yields true for both native and observable Set, even across different windows.\n */\nexport function isES6Set(thing: unknown): thing is Set<any> {\n    return thing != null && Object.prototype.toString.call(thing) === \"[object Set]\"\n}\n\nconst hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== \"undefined\"\n\n/**\n * Returns the following: own enumerable keys and symbols.\n */\nexport function getPlainObjectKeys(object: any) {\n    const keys = Object.keys(object)\n    // Not supported in IE, so there are not going to be symbol props anyway...\n    if (!hasGetOwnPropertySymbols) {\n        return keys\n    }\n    const symbols = Object.getOwnPropertySymbols(object)\n    if (!symbols.length) {\n        return keys\n    }\n    return [...keys, ...symbols.filter(s => objectPrototype.propertyIsEnumerable.call(object, s))]\n}\n\n// From Immer utils\n// Returns all own keys, including non-enumerable and symbolic\nexport const ownKeys: (target: any) => Array<string | symbol> =\n    typeof Reflect !== \"undefined\" && Reflect.ownKeys\n        ? Reflect.ownKeys\n        : hasGetOwnPropertySymbols\n        ? obj => Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj) as any)\n        : /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport function stringifyKey(key: any): string {\n    if (typeof key === \"string\") {\n        return key\n    }\n    if (typeof key === \"symbol\") {\n        return key.toString()\n    }\n    return new String(key).toString()\n}\n\nexport function toPrimitive(value: any) {\n    return value === null ? null : typeof value === \"object\" ? \"\" + value : value\n}\n\nexport function hasProp(target: Object, prop: PropertyKey): boolean {\n    return objectPrototype.hasOwnProperty.call(target, prop)\n}\n\n// From Immer utils\nexport const getOwnPropertyDescriptors =\n    Object.getOwnPropertyDescriptors ||\n    function getOwnPropertyDescriptors(target: any) {\n        // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n        const res: any = {}\n        // Note: without polyfill for ownKeys, symbols won't be picked up\n        ownKeys(target).forEach(key => {\n            res[key] = getDescriptor(target, key)\n        })\n        return res\n    }\n\nexport function getFlag(flags: number, mask: number) {\n    return !!(flags & mask)\n}\n\nexport function setFlag(flags: number, mask: number, newValue: boolean): number {\n    if (newValue) {\n        flags |= mask\n    } else {\n        flags &= ~mask\n    }\n    return flags\n}\n","import { Annotation, addHiddenProp, AnnotationsMap, hasProp, die, isOverride } from \"../internal\"\n\nimport type { Decorator } from \"../types/decorator_fills\"\n\nexport const storedAnnotationsSymbol = Symbol(\"mobx-stored-annotations\")\n\n/**\n * Creates a function that acts as\n * - decorator\n * - annotation object\n */\nexport function createDecoratorAnnotation<D extends Decorator = Decorator>(\n    annotation: Annotation\n): PropertyDecorator & Annotation & D {\n    function decorator(target, property) {\n        if (is20223Decorator(property)) {\n            return annotation.decorate_20223_(target, property)\n        } else {\n            storeAnnotation(target, property, annotation)\n        }\n    }\n    return Object.assign(decorator, annotation) as any\n}\n\n/**\n * Stores annotation to prototype,\n * so it can be inspected later by `makeObservable` called from constructor\n */\nexport function storeAnnotation(prototype: any, key: PropertyKey, annotation: Annotation) {\n    if (!hasProp(prototype, storedAnnotationsSymbol)) {\n        addHiddenProp(prototype, storedAnnotationsSymbol, {\n            // Inherit annotations\n            ...prototype[storedAnnotationsSymbol]\n        })\n    }\n    // @override must override something\n    if (__DEV__ && isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {\n        const fieldName = `${prototype.constructor.name}.prototype.${key.toString()}`\n        die(\n            `'${fieldName}' is decorated with 'override', ` +\n                `but no such decorated member was found on prototype.`\n        )\n    }\n    // Cannot re-decorate\n    assertNotDecorated(prototype, annotation, key)\n\n    // Ignore override\n    if (!isOverride(annotation)) {\n        prototype[storedAnnotationsSymbol][key] = annotation\n    }\n}\n\nfunction assertNotDecorated(prototype: object, annotation: Annotation, key: PropertyKey) {\n    if (__DEV__ && !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {\n        const fieldName = `${prototype.constructor.name}.prototype.${key.toString()}`\n        const currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_\n        const requestedAnnotationType = annotation.annotationType_\n        die(\n            `Cannot apply '@${requestedAnnotationType}' to '${fieldName}':` +\n                `\\nThe field is already decorated with '@${currentAnnotationType}'.` +\n                `\\nRe-decorating fields is not allowed.` +\n                `\\nUse '@override' decorator for methods overridden by subclass.`\n        )\n    }\n}\n\n/**\n * Collects annotations from prototypes and stores them on target (instance)\n */\nexport function collectStoredAnnotations(target): AnnotationsMap<any, any> {\n    if (!hasProp(target, storedAnnotationsSymbol)) {\n        // if (__DEV__ && !target[storedAnnotationsSymbol]) {\n        //     die(\n        //         `No annotations were passed to makeObservable, but no decorated members have been found either`\n        //     )\n        // }\n        // We need a copy as we will remove annotation from the list once it's applied.\n        addHiddenProp(target, storedAnnotationsSymbol, { ...target[storedAnnotationsSymbol] })\n    }\n    return target[storedAnnotationsSymbol]\n}\n\nexport function is20223Decorator(context): context is DecoratorContext {\n    return typeof context == \"object\" && typeof context[\"kind\"] == \"string\"\n}\n\nexport function assert20223DecoratorType(\n    context: DecoratorContext,\n    types: DecoratorContext[\"kind\"][]\n) {\n    if (__DEV__ && !types.includes(context.kind)) {\n        die(\n            `The decorator applied to '${String(context.name)}' cannot be used on a ${\n                context.kind\n            } element`\n        )\n    }\n}\n","import {\n    IDerivationState_,\n    IObservable,\n    IDerivation,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    noop,\n    onBecomeObserved,\n    onBecomeUnobserved,\n    propagateChanged,\n    reportObserved,\n    startBatch,\n    Lambda\n} from \"../internal\"\n\nimport { getFlag, setFlag } from \"../utils/utils\"\n\nexport const $mobx = Symbol(\"mobx administration\")\n\nexport interface IAtom extends IObservable {\n    reportObserved(): boolean\n    reportChanged(): void\n}\n\nexport class Atom implements IAtom {\n    private static readonly isBeingObservedMask_ = 0b001\n    private static readonly isPendingUnobservationMask_ = 0b010\n    private static readonly diffValueMask_ = 0b100\n    private flags_ = 0b000\n\n    observers_ = new Set<IDerivation>()\n\n    lastAccessedBy_ = 0\n    lowestObserverState_ = IDerivationState_.NOT_TRACKING_\n    /**\n     * Create a new atom. For debugging purposes it is recommended to give it a name.\n     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\n     */\n    constructor(public name_ = __DEV__ ? \"Atom@\" + getNextId() : \"Atom\") {}\n\n    // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed\n    get isBeingObserved(): boolean {\n        return getFlag(this.flags_, Atom.isBeingObservedMask_)\n    }\n    set isBeingObserved(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Atom.isBeingObservedMask_, newValue)\n    }\n\n    get isPendingUnobservation(): boolean {\n        return getFlag(this.flags_, Atom.isPendingUnobservationMask_)\n    }\n    set isPendingUnobservation(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Atom.isPendingUnobservationMask_, newValue)\n    }\n\n    get diffValue(): 0 | 1 {\n        return getFlag(this.flags_, Atom.diffValueMask_) ? 1 : 0\n    }\n    set diffValue(newValue: 0 | 1) {\n        this.flags_ = setFlag(this.flags_, Atom.diffValueMask_, newValue === 1 ? true : false)\n    }\n\n    // onBecomeObservedListeners\n    public onBOL: Set<Lambda> | undefined\n    // onBecomeUnobservedListeners\n    public onBUOL: Set<Lambda> | undefined\n\n    public onBO() {\n        if (this.onBOL) {\n            this.onBOL.forEach(listener => listener())\n        }\n    }\n\n    public onBUO() {\n        if (this.onBUOL) {\n            this.onBUOL.forEach(listener => listener())\n        }\n    }\n\n    /**\n     * Invoke this method to notify mobx that your atom has been used somehow.\n     * Returns true if there is currently a reactive context.\n     */\n    public reportObserved(): boolean {\n        return reportObserved(this)\n    }\n\n    /**\n     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\n     */\n    public reportChanged() {\n        startBatch()\n        propagateChanged(this)\n        endBatch()\n    }\n\n    toString() {\n        return this.name_\n    }\n}\n\nexport const isAtom = createInstanceofPredicate(\"Atom\", Atom)\n\nexport function createAtom(\n    name: string,\n    onBecomeObservedHandler: () => void = noop,\n    onBecomeUnobservedHandler: () => void = noop\n): IAtom {\n    const atom = new Atom(name)\n    // default `noop` listener will not initialize the hook Set\n    if (onBecomeObservedHandler !== noop) {\n        onBecomeObserved(atom, onBecomeObservedHandler)\n    }\n\n    if (onBecomeUnobservedHandler !== noop) {\n        onBecomeUnobserved(atom, onBecomeUnobservedHandler)\n    }\n    return atom\n}\n","import { deepEqual } from \"../internal\"\n\nexport interface IEqualsComparer<T> {\n    (a: T, b: T): boolean\n}\n\nfunction identityComparer(a: any, b: any): boolean {\n    return a === b\n}\n\nfunction structuralComparer(a: any, b: any): boolean {\n    return deepEqual(a, b)\n}\n\nfunction shallowComparer(a: any, b: any): boolean {\n    return deepEqual(a, b, 1)\n}\n\nfunction defaultComparer(a: any, b: any): boolean {\n    if (Object.is) {\n        return Object.is(a, b)\n    }\n\n    return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b\n}\n\nexport const comparer = {\n    identity: identityComparer,\n    structural: structuralComparer,\n    default: defaultComparer,\n    shallow: shallowComparer\n}\n","import {\n    deepEqual,\n    isES6Map,\n    isES6Set,\n    isObservable,\n    isObservableArray,\n    isObservableMap,\n    isObservableSet,\n    isObservableObject,\n    isPlainObject,\n    observable,\n    die,\n    isAction,\n    autoAction,\n    flow,\n    isFlow,\n    isGenerator\n} from \"../internal\"\n\nexport interface IEnhancer<T> {\n    (newValue: T, oldValue: T | undefined, name: string): T\n}\n\nexport function deepEnhancer(v, _, name) {\n    // it is an observable already, done\n    if (isObservable(v)) {\n        return v\n    }\n\n    // something that can be converted and mutated?\n    if (Array.isArray(v)) {\n        return observable.array(v, { name })\n    }\n    if (isPlainObject(v)) {\n        return observable.object(v, undefined, { name })\n    }\n    if (isES6Map(v)) {\n        return observable.map(v, { name })\n    }\n    if (isES6Set(v)) {\n        return observable.set(v, { name })\n    }\n    if (typeof v === \"function\" && !isAction(v) && !isFlow(v)) {\n        if (isGenerator(v)) {\n            return flow(v)\n        } else {\n            return autoAction(name, v)\n        }\n    }\n    return v\n}\n\nexport function shallowEnhancer(v, _, name): any {\n    if (v === undefined || v === null) {\n        return v\n    }\n    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {\n        return v\n    }\n    if (Array.isArray(v)) {\n        return observable.array(v, { name, deep: false })\n    }\n    if (isPlainObject(v)) {\n        return observable.object(v, undefined, { name, deep: false })\n    }\n    if (isES6Map(v)) {\n        return observable.map(v, { name, deep: false })\n    }\n    if (isES6Set(v)) {\n        return observable.set(v, { name, deep: false })\n    }\n\n    if (__DEV__) {\n        die(\n            \"The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets\"\n        )\n    }\n}\n\nexport function referenceEnhancer(newValue?) {\n    // never turn into an observable\n    return newValue\n}\n\nexport function refStructEnhancer(v, oldValue): any {\n    if (__DEV__ && isObservable(v)) {\n        die(`observable.struct should not be used with observable values`)\n    }\n    if (deepEqual(v, oldValue)) {\n        return oldValue\n    }\n    return v\n}\n","import {\n    die,\n    Annotation,\n    hasProp,\n    createDecoratorAnnotation,\n    ObservableObjectAdministration,\n    MakeResult\n} from \"../internal\"\n\nimport type { ClassMethodDecorator } from \"./decorator_fills\"\n\nconst OVERRIDE = \"override\"\n\nexport const override: Annotation & PropertyDecorator & ClassMethodDecorator =\n    createDecoratorAnnotation({\n        annotationType_: OVERRIDE,\n        make_,\n        extend_,\n        decorate_20223_\n    })\n\nexport function isOverride(annotation: Annotation): boolean {\n    return annotation.annotationType_ === OVERRIDE\n}\n\nfunction make_(this: Annotation, adm: ObservableObjectAdministration, key): MakeResult {\n    // Must not be plain object\n    if (__DEV__ && adm.isPlainObject_) {\n        die(\n            `Cannot apply '${this.annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${this.annotationType_}' cannot be used on plain objects.`\n        )\n    }\n    // Must override something\n    if (__DEV__ && !hasProp(adm.appliedAnnotations_!, key)) {\n        die(\n            `'${adm.name_}.${key.toString()}' is annotated with '${this.annotationType_}', ` +\n                `but no such annotated member was found on prototype.`\n        )\n    }\n    return MakeResult.Cancel\n}\n\nfunction extend_(this: Annotation, adm, key, descriptor, proxyTrap): boolean {\n    die(`'${this.annotationType_}' can only be used with 'makeObservable'`)\n}\n\nfunction decorate_20223_(this: Annotation, desc, context: DecoratorContext) {\n    console.warn(`'${this.annotationType_}' cannot be used with decorators - this is a no-op`)\n}\n","import {\n    ObservableObjectAdministration,\n    createAction,\n    isAction,\n    defineProperty,\n    die,\n    isFunction,\n    Annotation,\n    globalState,\n    MakeResult,\n    assert20223DecoratorType\n} from \"../internal\"\n\nexport function createActionAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    source: object\n): MakeResult {\n    // bound\n    if (this.options_?.bound) {\n        return this.extend_(adm, key, descriptor, false) === null\n            ? MakeResult.Cancel\n            : MakeResult.Break\n    }\n    // own\n    if (source === adm.target_) {\n        return this.extend_(adm, key, descriptor, false) === null\n            ? MakeResult.Cancel\n            : MakeResult.Continue\n    }\n    // prototype\n    if (isAction(descriptor.value)) {\n        // A prototype could have been annotated already by other constructor,\n        // rest of the proto chain must be annotated already\n        return MakeResult.Break\n    }\n    const actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false)\n    defineProperty(source, key, actionDescriptor)\n    return MakeResult.Continue\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    const actionDescriptor = createActionDescriptor(adm, this, key, descriptor)\n    return adm.defineProperty_(key, actionDescriptor, proxyTrap)\n}\n\nfunction decorate_20223_(this: Annotation, mthd, context: DecoratorContext) {\n    if (__DEV__) {\n        assert20223DecoratorType(context, [\"method\", \"field\"])\n    }\n    const { kind, name, addInitializer } = context\n    const ann = this\n\n    const _createAction = m =>\n        createAction(ann.options_?.name ?? name!.toString(), m, ann.options_?.autoAction ?? false)\n\n    if (kind == \"field\") {\n        return function (initMthd) {\n            let mthd = initMthd\n            if (!isAction(mthd)) {\n                mthd = _createAction(mthd)\n            }\n            if (ann.options_?.bound) {\n                mthd = mthd.bind(this)\n                mthd.isMobxAction = true\n            }\n            return mthd\n        }\n    }\n\n    if (kind == \"method\") {\n        if (!isAction(mthd)) {\n            mthd = _createAction(mthd)\n        }\n\n        if (this.options_?.bound) {\n            addInitializer(function () {\n                const self = this as any\n                const bound = self[name].bind(self)\n                bound.isMobxAction = true\n                self[name] = bound\n            })\n        }\n\n        return mthd\n    }\n\n    die(\n        `Cannot apply '${ann.annotationType_}' to '${String(name)}' (kind: ${kind}):` +\n            `\\n'${ann.annotationType_}' can only be used on properties with a function value.`\n    )\n}\n\nfunction assertActionDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    { value }: PropertyDescriptor\n) {\n    if (__DEV__ && !isFunction(value)) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' can only be used on properties with a function value.`\n        )\n    }\n}\n\nexport function createActionDescriptor(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    // provides ability to disable safeDescriptors for prototypes\n    safeDescriptors: boolean = globalState.safeDescriptors\n) {\n    assertActionDescriptor(adm, annotation, key, descriptor)\n    let { value } = descriptor\n    if (annotation.options_?.bound) {\n        value = value.bind(adm.proxy_ ?? adm.target_)\n    }\n    return {\n        value: createAction(\n            annotation.options_?.name ?? key.toString(),\n            value,\n            annotation.options_?.autoAction ?? false,\n            // https://github.com/mobxjs/mobx/discussions/3140\n            annotation.options_?.bound ? adm.proxy_ ?? adm.target_ : undefined\n        ),\n        // Non-configurable for classes\n        // prevents accidental field redefinition in subclass\n        configurable: safeDescriptors ? adm.isPlainObject_ : true,\n        // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n        enumerable: false,\n        // Non-obsevable, therefore non-writable\n        // Also prevents rewriting in subclass constructor\n        writable: safeDescriptors ? false : true\n    }\n}\n","import {\n    ObservableObjectAdministration,\n    Annotation,\n    defineProperty,\n    die,\n    flow,\n    isFlow,\n    isFunction,\n    globalState,\n    MakeResult,\n    hasProp,\n    assert20223DecoratorType\n} from \"../internal\"\n\nexport function createFlowAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    source: object\n): MakeResult {\n    // own\n    if (source === adm.target_) {\n        return this.extend_(adm, key, descriptor, false) === null\n            ? MakeResult.Cancel\n            : MakeResult.Continue\n    }\n    // prototype\n    // bound - must annotate protos to support super.flow()\n    if (this.options_?.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {\n        if (this.extend_(adm, key, descriptor, false) === null) {\n            return MakeResult.Cancel\n        }\n    }\n    if (isFlow(descriptor.value)) {\n        // A prototype could have been annotated already by other constructor,\n        // rest of the proto chain must be annotated already\n        return MakeResult.Break\n    }\n    const flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false)\n    defineProperty(source, key, flowDescriptor)\n    return MakeResult.Continue\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    const flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, this.options_?.bound)\n    return adm.defineProperty_(key, flowDescriptor, proxyTrap)\n}\n\nfunction decorate_20223_(this: Annotation, mthd, context: ClassMethodDecoratorContext) {\n    if (__DEV__) {\n        assert20223DecoratorType(context, [\"method\"])\n    }\n    const { name, addInitializer } = context\n\n    if (!isFlow(mthd)) {\n        mthd = flow(mthd)\n    }\n\n    if (this.options_?.bound) {\n        addInitializer(function () {\n            const self = this as any\n            const bound = self[name].bind(self)\n            bound.isMobXFlow = true\n            self[name] = bound\n        })\n    }\n\n    return mthd\n}\n\nfunction assertFlowDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    { value }: PropertyDescriptor\n) {\n    if (__DEV__ && !isFunction(value)) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' can only be used on properties with a generator function value.`\n        )\n    }\n}\n\nfunction createFlowDescriptor(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    bound: boolean,\n    // provides ability to disable safeDescriptors for prototypes\n    safeDescriptors: boolean = globalState.safeDescriptors\n): PropertyDescriptor {\n    assertFlowDescriptor(adm, annotation, key, descriptor)\n    let { value } = descriptor\n    // In case of flow.bound, the descriptor can be from already annotated prototype\n    if (!isFlow(value)) {\n        value = flow(value)\n    }\n    if (bound) {\n        // We do not keep original function around, so we bind the existing flow\n        value = value.bind(adm.proxy_ ?? adm.target_)\n        // This is normally set by `flow`, but `bind` returns new function...\n        value.isMobXFlow = true\n    }\n    return {\n        value,\n        // Non-configurable for classes\n        // prevents accidental field redefinition in subclass\n        configurable: safeDescriptors ? adm.isPlainObject_ : true,\n        // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058\n        enumerable: false,\n        // Non-obsevable, therefore non-writable\n        // Also prevents rewriting in subclass constructor\n        writable: safeDescriptors ? false : true\n    }\n}\n","import {\n    ObservableObjectAdministration,\n    die,\n    Annotation,\n    MakeResult,\n    assert20223DecoratorType,\n    $mobx,\n    asObservableObject,\n    ComputedValue\n} from \"../internal\"\n\nexport function createComputedAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor\n): MakeResult {\n    return this.extend_(adm, key, descriptor, false) === null ? MakeResult.Cancel : MakeResult.Break\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    assertComputedDescriptor(adm, this, key, descriptor)\n    return adm.defineComputedProperty_(\n        key,\n        {\n            ...this.options_,\n            get: descriptor.get,\n            set: descriptor.set\n        },\n        proxyTrap\n    )\n}\n\nfunction decorate_20223_(this: Annotation, get, context: ClassGetterDecoratorContext) {\n    if (__DEV__) {\n        assert20223DecoratorType(context, [\"getter\"])\n    }\n    const ann = this\n    const { name: key, addInitializer } = context\n\n    addInitializer(function () {\n        const adm: ObservableObjectAdministration = asObservableObject(this)[$mobx]\n        const options = {\n            ...ann.options_,\n            get,\n            context: this\n        }\n        options.name ||= __DEV__\n            ? `${adm.name_}.${key.toString()}`\n            : `ObservableObject.${key.toString()}`\n        adm.values_.set(key, new ComputedValue(options))\n    })\n\n    return function () {\n        return this[$mobx].getObservablePropValue_(key)\n    }\n}\n\nfunction assertComputedDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    { get }: PropertyDescriptor\n) {\n    if (__DEV__ && !get) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' can only be used on getter(+setter) properties.`\n        )\n    }\n}\n","import {\n    ObservableObjectAdministration,\n    deepEnhancer,\n    die,\n    Annotation,\n    MakeResult,\n    assert20223DecoratorType,\n    ObservableValue,\n    asObservableObject,\n    $mobx\n} from \"../internal\"\n\nexport function createObservableAnnotation(name: string, options?: object): Annotation {\n    return {\n        annotationType_: name,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor\n): MakeResult {\n    return this.extend_(adm, key, descriptor, false) === null ? MakeResult.Cancel : MakeResult.Break\n}\n\nfunction extend_(\n    this: Annotation,\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    assertObservableDescriptor(adm, this, key, descriptor)\n    return adm.defineObservableProperty_(\n        key,\n        descriptor.value,\n        this.options_?.enhancer ?? deepEnhancer,\n        proxyTrap\n    )\n}\n\nfunction decorate_20223_(\n    this: Annotation,\n    desc,\n    context: ClassAccessorDecoratorContext | ClassFieldDecoratorContext\n) {\n    if (__DEV__) {\n        if (context.kind === \"field\") {\n            throw die(\n                `Please use \\`@observable accessor ${String(\n                    context.name\n                )}\\` instead of \\`@observable ${String(context.name)}\\``\n            )\n        }\n        assert20223DecoratorType(context, [\"accessor\"])\n    }\n\n    const ann = this\n    const { kind, name } = context\n\n    // The laziness here is not ideal... It's a workaround to how 2022.3 Decorators are implemented:\n    //   `addInitializer` callbacks are executed _before_ any accessors are defined (instead of the ideal-for-us right after each).\n    //   This means that, if we were to do our stuff in an `addInitializer`, we'd attempt to read a private slot\n    //   before it has been initialized. The runtime doesn't like that and throws a `Cannot read private member\n    //   from an object whose class did not declare it` error.\n    // TODO: it seems that this will not be required anymore in the final version of the spec\n    // See TODO: link\n    const initializedObjects = new WeakSet()\n\n    function initializeObservable(target, value) {\n        const adm: ObservableObjectAdministration = asObservableObject(target)[$mobx]\n        const observable = new ObservableValue(\n            value,\n            ann.options_?.enhancer ?? deepEnhancer,\n            __DEV__ ? `${adm.name_}.${name.toString()}` : `ObservableObject.${name.toString()}`,\n            false\n        )\n        adm.values_.set(name, observable)\n        initializedObjects.add(target)\n    }\n\n    if (kind == \"accessor\") {\n        return {\n            get() {\n                if (!initializedObjects.has(this)) {\n                    initializeObservable(this, desc.get.call(this))\n                }\n                return this[$mobx].getObservablePropValue_(name)\n            },\n            set(value) {\n                if (!initializedObjects.has(this)) {\n                    initializeObservable(this, value)\n                }\n                return this[$mobx].setObservablePropValue_(name, value)\n            },\n            init(value) {\n                if (!initializedObjects.has(this)) {\n                    initializeObservable(this, value)\n                }\n                return value\n            }\n        }\n    }\n\n    return\n}\n\nfunction assertObservableDescriptor(\n    adm: ObservableObjectAdministration,\n    { annotationType_ }: Annotation,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor\n) {\n    if (__DEV__ && !(\"value\" in descriptor)) {\n        die(\n            `Cannot apply '${annotationType_}' to '${adm.name_}.${key.toString()}':` +\n                `\\n'${annotationType_}' cannot be used on getter/setter properties`\n        )\n    }\n}\n","import {\n    ObservableObjectAdministration,\n    observable,\n    Annotation,\n    defineProperty,\n    createAction,\n    globalState,\n    flow,\n    computed,\n    autoAction,\n    isGenerator,\n    MakeResult,\n    die\n} from \"../internal\"\n\nconst AUTO = \"true\"\n\nexport const autoAnnotation: Annotation = createAutoAnnotation()\n\nexport function createAutoAnnotation(options?: object): Annotation {\n    return {\n        annotationType_: AUTO,\n        options_: options,\n        make_,\n        extend_,\n        decorate_20223_\n    }\n}\n\nfunction make_(\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    source: object\n): MakeResult {\n    // getter -> computed\n    if (descriptor.get) {\n        return computed.make_(adm, key, descriptor, source)\n    }\n    // lone setter -> action setter\n    if (descriptor.set) {\n        // TODO make action applicable to setter and delegate to action.make_\n        const set = createAction(key.toString(), descriptor.set) as (v: any) => void\n        // own\n        if (source === adm.target_) {\n            return adm.defineProperty_(key, {\n                configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n                set\n            }) === null\n                ? MakeResult.Cancel\n                : MakeResult.Continue\n        }\n        // proto\n        defineProperty(source, key, {\n            configurable: true,\n            set\n        })\n        return MakeResult.Continue\n    }\n    // function on proto -> autoAction/flow\n    if (source !== adm.target_ && typeof descriptor.value === \"function\") {\n        if (isGenerator(descriptor.value)) {\n            const flowAnnotation = this.options_?.autoBind ? flow.bound : flow\n            return flowAnnotation.make_(adm, key, descriptor, source)\n        }\n        const actionAnnotation = this.options_?.autoBind ? autoAction.bound : autoAction\n        return actionAnnotation.make_(adm, key, descriptor, source)\n    }\n    // other -> observable\n    // Copy props from proto as well, see test:\n    // \"decorate should work with Object.create\"\n    let observableAnnotation = this.options_?.deep === false ? observable.ref : observable\n    // if function respect autoBind option\n    if (typeof descriptor.value === \"function\" && this.options_?.autoBind) {\n        descriptor.value = descriptor.value.bind(adm.proxy_ ?? adm.target_)\n    }\n    return observableAnnotation.make_(adm, key, descriptor, source)\n}\n\nfunction extend_(\n    adm: ObservableObjectAdministration,\n    key: PropertyKey,\n    descriptor: PropertyDescriptor,\n    proxyTrap: boolean\n): boolean | null {\n    // getter -> computed\n    if (descriptor.get) {\n        return computed.extend_(adm, key, descriptor, proxyTrap)\n    }\n    // lone setter -> action setter\n    if (descriptor.set) {\n        // TODO make action applicable to setter and delegate to action.extend_\n        return adm.defineProperty_(\n            key,\n            {\n                configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,\n                set: createAction(key.toString(), descriptor.set) as (v: any) => void\n            },\n            proxyTrap\n        )\n    }\n    // other -> observable\n    // if function respect autoBind option\n    if (typeof descriptor.value === \"function\" && this.options_?.autoBind) {\n        descriptor.value = descriptor.value.bind(adm.proxy_ ?? adm.target_)\n    }\n    let observableAnnotation = this.options_?.deep === false ? observable.ref : observable\n    return observableAnnotation.extend_(adm, key, descriptor, proxyTrap)\n}\n\nfunction decorate_20223_(this: Annotation, desc, context: ClassGetterDecoratorContext) {\n    die(`'${this.annotationType_}' cannot be used as a decorator`)\n}\n","import {\n    IEnhancer,\n    IEqualsComparer,\n    IObservableArray,\n    IObservableMapInitialValues,\n    IObservableSetInitialValues,\n    IObservableValue,\n    ObservableMap,\n    ObservableSet,\n    ObservableValue,\n    asDynamicObservableObject,\n    createObservableArray,\n    deepEnhancer,\n    extendObservable,\n    isES6Map,\n    isES6Set,\n    isObservable,\n    isPlainObject,\n    referenceEnhancer,\n    Annotation,\n    shallowEnhancer,\n    refStructEnhancer,\n    AnnotationsMap,\n    asObservableObject,\n    storeAnnotation,\n    createDecoratorAnnotation,\n    createLegacyArray,\n    globalState,\n    assign,\n    isStringish,\n    createObservableAnnotation,\n    createAutoAnnotation,\n    is20223Decorator,\n    initObservable\n} from \"../internal\"\n\nimport type { ClassAccessorDecorator, ClassFieldDecorator } from \"../types/decorator_fills\"\n\nexport const OBSERVABLE = \"observable\"\nexport const OBSERVABLE_REF = \"observable.ref\"\nexport const OBSERVABLE_SHALLOW = \"observable.shallow\"\nexport const OBSERVABLE_STRUCT = \"observable.struct\"\n\nexport type CreateObservableOptions = {\n    name?: string\n    equals?: IEqualsComparer<any>\n    deep?: boolean\n    defaultDecorator?: Annotation\n    proxy?: boolean\n    autoBind?: boolean\n}\n\n// Predefined bags of create observable options, to avoid allocating temporarily option objects\n// in the majority of cases\nexport const defaultCreateObservableOptions: CreateObservableOptions = {\n    deep: true,\n    name: undefined,\n    defaultDecorator: undefined,\n    proxy: true\n}\nObject.freeze(defaultCreateObservableOptions)\n\nexport function asCreateObservableOptions(thing: any): CreateObservableOptions {\n    return thing || defaultCreateObservableOptions\n}\n\nconst observableAnnotation = createObservableAnnotation(OBSERVABLE)\nconst observableRefAnnotation = createObservableAnnotation(OBSERVABLE_REF, {\n    enhancer: referenceEnhancer\n})\nconst observableShallowAnnotation = createObservableAnnotation(OBSERVABLE_SHALLOW, {\n    enhancer: shallowEnhancer\n})\nconst observableStructAnnotation = createObservableAnnotation(OBSERVABLE_STRUCT, {\n    enhancer: refStructEnhancer\n})\nconst observableDecoratorAnnotation =\n    createDecoratorAnnotation<ClassAccessorDecorator>(observableAnnotation)\n\nexport function getEnhancerFromOptions(options: CreateObservableOptions): IEnhancer<any> {\n    return options.deep === true\n        ? deepEnhancer\n        : options.deep === false\n        ? referenceEnhancer\n        : getEnhancerFromAnnotation(options.defaultDecorator)\n}\n\nexport function getAnnotationFromOptions(\n    options?: CreateObservableOptions\n): Annotation | undefined {\n    return options ? options.defaultDecorator ?? createAutoAnnotation(options) : undefined\n}\n\nexport function getEnhancerFromAnnotation(annotation?: Annotation): IEnhancer<any> {\n    return !annotation ? deepEnhancer : annotation.options_?.enhancer ?? deepEnhancer\n}\n\n/**\n * Turns an object, array or function into a reactive structure.\n * @param v the value which should become observable.\n */\nfunction createObservable(v: any, arg2?: any, arg3?: any) {\n    // @observable someProp; (2022.3 Decorators)\n    if (is20223Decorator(arg2)) {\n        return observableAnnotation.decorate_20223_(v, arg2)\n    }\n\n    // @observable someProp;\n    if (isStringish(arg2)) {\n        storeAnnotation(v, arg2, observableAnnotation)\n        return\n    }\n\n    // already observable - ignore\n    if (isObservable(v)) {\n        return v\n    }\n\n    // plain object\n    if (isPlainObject(v)) {\n        return observable.object(v, arg2, arg3)\n    }\n\n    // Array\n    if (Array.isArray(v)) {\n        return observable.array(v, arg2)\n    }\n\n    // Map\n    if (isES6Map(v)) {\n        return observable.map(v, arg2)\n    }\n\n    // Set\n    if (isES6Set(v)) {\n        return observable.set(v, arg2)\n    }\n\n    // other object - ignore\n    if (typeof v === \"object\" && v !== null) {\n        return v\n    }\n\n    // anything else\n    return observable.box(v, arg2)\n}\nassign(createObservable, observableDecoratorAnnotation)\n\nexport interface IObservableValueFactory {\n    <T>(value: T, options?: CreateObservableOptions): IObservableValue<T>\n    <T>(value?: T, options?: CreateObservableOptions): IObservableValue<T | undefined>\n}\n\nexport interface IObservableFactory\n    extends Annotation,\n        PropertyDecorator,\n        ClassAccessorDecorator,\n        ClassFieldDecorator {\n    // TODO: remove ClassFieldDecorator, this is only temporarily support for legacy decorators\n    <T = any>(value: T[], options?: CreateObservableOptions): IObservableArray<T>\n    <T = any>(value: Set<T>, options?: CreateObservableOptions): ObservableSet<T>\n    <K = any, V = any>(value: Map<K, V>, options?: CreateObservableOptions): ObservableMap<K, V>\n    <T extends object>(\n        value: T,\n        decorators?: AnnotationsMap<T, never>,\n        options?: CreateObservableOptions\n    ): T\n\n    box: IObservableValueFactory\n    array: <T = any>(initialValues?: T[], options?: CreateObservableOptions) => IObservableArray<T>\n    set: <T = any>(\n        initialValues?: IObservableSetInitialValues<T>,\n        options?: CreateObservableOptions\n    ) => ObservableSet<T>\n    map: <K = any, V = any>(\n        initialValues?: IObservableMapInitialValues<K, V>,\n        options?: CreateObservableOptions\n    ) => ObservableMap<K, V>\n    object: <T = any>(\n        props: T,\n        decorators?: AnnotationsMap<T, never>,\n        options?: CreateObservableOptions\n    ) => T\n\n    /**\n     * Decorator that creates an observable that only observes the references, but doesn't try to turn the assigned value into an observable.ts.\n     */\n    ref: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n    /**\n     * Decorator that creates an observable converts its value (objects, maps or arrays) into a shallow observable structure\n     */\n    shallow: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n    deep: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n    struct: Annotation & PropertyDecorator & ClassAccessorDecorator & ClassFieldDecorator\n}\n\nconst observableFactories: IObservableFactory = {\n    box<T = any>(value: T, options?: CreateObservableOptions): IObservableValue<T> {\n        const o = asCreateObservableOptions(options)\n        return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals)\n    },\n    array<T = any>(initialValues?: T[], options?: CreateObservableOptions): IObservableArray<T> {\n        const o = asCreateObservableOptions(options)\n        return (\n            globalState.useProxies === false || o.proxy === false\n                ? createLegacyArray\n                : createObservableArray\n        )(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    map<K = any, V = any>(\n        initialValues?: IObservableMapInitialValues<K, V>,\n        options?: CreateObservableOptions\n    ): ObservableMap<K, V> {\n        const o = asCreateObservableOptions(options)\n        return new ObservableMap<K, V>(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    set<T = any>(\n        initialValues?: IObservableSetInitialValues<T>,\n        options?: CreateObservableOptions\n    ): ObservableSet<T> {\n        const o = asCreateObservableOptions(options)\n        return new ObservableSet<T>(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    object<T extends object = any>(\n        props: T,\n        decorators?: AnnotationsMap<T, never>,\n        options?: CreateObservableOptions\n    ): T {\n        return initObservable(() =>\n            extendObservable(\n                globalState.useProxies === false || options?.proxy === false\n                    ? asObservableObject({}, options)\n                    : asDynamicObservableObject({}, options),\n                props,\n                decorators\n            )\n        )\n    },\n    ref: createDecoratorAnnotation(observableRefAnnotation),\n    shallow: createDecoratorAnnotation(observableShallowAnnotation),\n    deep: observableDecoratorAnnotation,\n    struct: createDecoratorAnnotation(observableStructAnnotation)\n} as any\n\n// eslint-disable-next-line\nexport var observable: IObservableFactory = assign(createObservable, observableFactories)\n","import {\n    ComputedValue,\n    IComputedValueOptions,\n    Annotation,\n    storeAnnotation,\n    createDecoratorAnnotation,\n    isStringish,\n    isPlainObject,\n    isFunction,\n    die,\n    IComputedValue,\n    createComputedAnnotation,\n    comparer,\n    is20223Decorator\n} from \"../internal\"\n\nimport type { ClassGetterDecorator } from \"../types/decorator_fills\"\n\nexport const COMPUTED = \"computed\"\nexport const COMPUTED_STRUCT = \"computed.struct\"\n\nexport interface IComputedFactory extends Annotation, PropertyDecorator, ClassGetterDecorator {\n    // @computed(opts)\n    <T>(options: IComputedValueOptions<T>): Annotation & PropertyDecorator & ClassGetterDecorator\n    // computed(fn, opts)\n    <T>(func: () => T, options?: IComputedValueOptions<T>): IComputedValue<T>\n\n    struct: Annotation & PropertyDecorator & ClassGetterDecorator\n}\n\nconst computedAnnotation = createComputedAnnotation(COMPUTED)\nconst computedStructAnnotation = createComputedAnnotation(COMPUTED_STRUCT, {\n    equals: comparer.structural\n})\n\n/**\n * Decorator for class properties: @computed get value() { return expr; }.\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\n */\nexport const computed: IComputedFactory = function computed(arg1, arg2) {\n    if (is20223Decorator(arg2)) {\n        // @computed (2022.3 Decorators)\n        return computedAnnotation.decorate_20223_(arg1, arg2)\n    }\n    if (isStringish(arg2)) {\n        // @computed\n        return storeAnnotation(arg1, arg2, computedAnnotation)\n    }\n    if (isPlainObject(arg1)) {\n        // @computed({ options })\n        return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1))\n    }\n\n    // computed(expr, options?)\n    if (__DEV__) {\n        if (!isFunction(arg1)) {\n            die(\"First argument to `computed` should be an expression.\")\n        }\n        if (isFunction(arg2)) {\n            die(\n                \"A setter as second argument is no longer supported, use `{ set: fn }` option instead\"\n            )\n        }\n    }\n    const opts: IComputedValueOptions<any> = isPlainObject(arg2) ? arg2 : {}\n    opts.get = arg1\n    opts.name ||= arg1.name || \"\" /* for generated name */\n\n    return new ComputedValue(opts)\n} as any\n\nObject.assign(computed, computedAnnotation)\n\ncomputed.struct = createDecoratorAnnotation(computedStructAnnotation)\n","import {\n    IDerivation,\n    endBatch,\n    globalState,\n    isSpyEnabled,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    untrackedEnd,\n    untrackedStart,\n    isFunction,\n    allowStateReadsStart,\n    allowStateReadsEnd,\n    ACTION,\n    EMPTY_ARRAY,\n    die,\n    getDescriptor,\n    defineProperty\n} from \"../internal\"\n\n// we don't use globalState for these in order to avoid possible issues with multiple\n// mobx versions\nlet currentActionId = 0\nlet nextActionId = 1\nconst isFunctionNameConfigurable = getDescriptor(() => {}, \"name\")?.configurable ?? false\n\n// we can safely recycle this object\nconst tmpNameDescriptor: PropertyDescriptor = {\n    value: \"action\",\n    configurable: true,\n    writable: false,\n    enumerable: false\n}\n\nexport function createAction(\n    actionName: string,\n    fn: Function,\n    autoAction: boolean = false,\n    ref?: Object\n): Function {\n    if (__DEV__) {\n        if (!isFunction(fn)) {\n            die(\"`action` can only be invoked on functions\")\n        }\n        if (typeof actionName !== \"string\" || !actionName) {\n            die(`actions should have valid names, got: '${actionName}'`)\n        }\n    }\n    function res() {\n        return executeAction(actionName, autoAction, fn, ref || this, arguments)\n    }\n    res.isMobxAction = true\n    res.toString = () => fn.toString()\n    if (isFunctionNameConfigurable) {\n        tmpNameDescriptor.value = actionName\n        defineProperty(res, \"name\", tmpNameDescriptor)\n    }\n    return res\n}\n\nexport function executeAction(\n    actionName: string,\n    canRunAsDerivation: boolean,\n    fn: Function,\n    scope?: any,\n    args?: IArguments\n) {\n    const runInfo = _startAction(actionName, canRunAsDerivation, scope, args)\n    try {\n        return fn.apply(scope, args)\n    } catch (err) {\n        runInfo.error_ = err\n        throw err\n    } finally {\n        _endAction(runInfo)\n    }\n}\n\nexport interface IActionRunInfo {\n    prevDerivation_: IDerivation | null\n    prevAllowStateChanges_: boolean\n    prevAllowStateReads_: boolean\n    notifySpy_: boolean\n    startTime_: number\n    error_?: any\n    parentActionId_: number\n    actionId_: number\n    runAsAction_?: boolean\n}\n\nexport function _startAction(\n    actionName: string,\n    canRunAsDerivation: boolean, // true for autoAction\n    scope: any,\n    args?: IArguments\n): IActionRunInfo {\n    const notifySpy_ = __DEV__ && isSpyEnabled() && !!actionName\n    let startTime_: number = 0\n    if (__DEV__ && notifySpy_) {\n        startTime_ = Date.now()\n        const flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY\n        spyReportStart({\n            type: ACTION,\n            name: actionName,\n            object: scope,\n            arguments: flattenedArgs\n        })\n    }\n    const prevDerivation_ = globalState.trackingDerivation\n    const runAsAction = !canRunAsDerivation || !prevDerivation_\n    startBatch()\n    let prevAllowStateChanges_ = globalState.allowStateChanges // by default preserve previous allow\n    if (runAsAction) {\n        untrackedStart()\n        prevAllowStateChanges_ = allowStateChangesStart(true)\n    }\n    const prevAllowStateReads_ = allowStateReadsStart(true)\n    const runInfo = {\n        runAsAction_: runAsAction,\n        prevDerivation_,\n        prevAllowStateChanges_,\n        prevAllowStateReads_,\n        notifySpy_,\n        startTime_,\n        actionId_: nextActionId++,\n        parentActionId_: currentActionId\n    }\n    currentActionId = runInfo.actionId_\n    return runInfo\n}\n\nexport function _endAction(runInfo: IActionRunInfo) {\n    if (currentActionId !== runInfo.actionId_) {\n        die(30)\n    }\n    currentActionId = runInfo.parentActionId_\n\n    if (runInfo.error_ !== undefined) {\n        globalState.suppressReactionErrors = true\n    }\n    allowStateChangesEnd(runInfo.prevAllowStateChanges_)\n    allowStateReadsEnd(runInfo.prevAllowStateReads_)\n    endBatch()\n    if (runInfo.runAsAction_) {\n        untrackedEnd(runInfo.prevDerivation_)\n    }\n    if (__DEV__ && runInfo.notifySpy_) {\n        spyReportEnd({ time: Date.now() - runInfo.startTime_ })\n    }\n    globalState.suppressReactionErrors = false\n}\n\nexport function allowStateChanges<T>(allowStateChanges: boolean, func: () => T): T {\n    const prev = allowStateChangesStart(allowStateChanges)\n    try {\n        return func()\n    } finally {\n        allowStateChangesEnd(prev)\n    }\n}\n\nexport function allowStateChangesStart(allowStateChanges: boolean) {\n    const prev = globalState.allowStateChanges\n    globalState.allowStateChanges = allowStateChanges\n    return prev\n}\n\nexport function allowStateChangesEnd(prev: boolean) {\n    globalState.allowStateChanges = prev\n}\n","import {\n    Atom,\n    IEnhancer,\n    IInterceptable,\n    IEqualsComparer,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    checkIfStateModificationsAreAllowed,\n    comparer,\n    createInstanceofPredicate,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isSpyEnabled,\n    notifyListeners,\n    registerInterceptor,\n    registerListener,\n    spyReport,\n    spyReportEnd,\n    spyReportStart,\n    toPrimitive,\n    globalState,\n    IUNCHANGED,\n    UPDATE\n} from \"../internal\"\n\nexport interface IValueWillChange<T> {\n    object: IObservableValue<T>\n    type: \"update\"\n    newValue: T\n}\n\nexport type IValueDidChange<T = any> = {\n    type: \"update\"\n    observableKind: \"value\"\n    object: IObservableValue<T>\n    debugObjectName: string\n    newValue: T\n    oldValue: T | undefined\n}\nexport type IBoxDidChange<T = any> =\n    | {\n          type: \"create\"\n          observableKind: \"value\"\n          object: IObservableValue<T>\n          debugObjectName: string\n          newValue: T\n      }\n    | IValueDidChange<T>\n\nexport interface IObservableValue<T> {\n    get(): T\n    set(value: T): void\n}\n\nconst CREATE = \"create\"\n\nexport class ObservableValue<T>\n    extends Atom\n    implements IObservableValue<T>, IInterceptable<IValueWillChange<T>>, IListenable\n{\n    hasUnreportedChange_ = false\n    interceptors_\n    changeListeners_\n    value_\n    dehancer: any\n\n    constructor(\n        value: T,\n        public enhancer: IEnhancer<T>,\n        public name_ = __DEV__ ? \"ObservableValue@\" + getNextId() : \"ObservableValue\",\n        notifySpy = true,\n        private equals: IEqualsComparer<any> = comparer.default\n    ) {\n        super(name_)\n        this.value_ = enhancer(value, undefined, name_)\n        if (__DEV__ && notifySpy && isSpyEnabled()) {\n            // only notify spy if this is a stand-alone observable\n            spyReport({\n                type: CREATE,\n                object: this,\n                observableKind: \"value\",\n                debugObjectName: this.name_,\n                newValue: \"\" + this.value_\n            })\n        }\n    }\n\n    private dehanceValue(value: T): T {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    public set(newValue: T) {\n        const oldValue = this.value_\n        newValue = this.prepareNewValue_(newValue) as any\n        if (newValue !== globalState.UNCHANGED) {\n            const notifySpy = isSpyEnabled()\n            if (__DEV__ && notifySpy) {\n                spyReportStart({\n                    type: UPDATE,\n                    object: this,\n                    observableKind: \"value\",\n                    debugObjectName: this.name_,\n                    newValue,\n                    oldValue\n                })\n            }\n            this.setNewValue_(newValue)\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n    }\n\n    private prepareNewValue_(newValue): T | IUNCHANGED {\n        checkIfStateModificationsAreAllowed(this)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IValueWillChange<T>>(this, {\n                object: this,\n                type: UPDATE,\n                newValue\n            })\n            if (!change) {\n                return globalState.UNCHANGED\n            }\n            newValue = change.newValue\n        }\n        // apply modifier\n        newValue = this.enhancer(newValue, this.value_, this.name_)\n        return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue\n    }\n\n    setNewValue_(newValue: T) {\n        const oldValue = this.value_\n        this.value_ = newValue\n        this.reportChanged()\n        if (hasListeners(this)) {\n            notifyListeners(this, {\n                type: UPDATE,\n                object: this,\n                newValue,\n                oldValue\n            })\n        }\n    }\n\n    public get(): T {\n        this.reportObserved()\n        return this.dehanceValue(this.value_)\n    }\n\n    intercept_(handler: IInterceptor<IValueWillChange<T>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    observe_(listener: (change: IValueDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        if (fireImmediately) {\n            listener({\n                observableKind: \"value\",\n                debugObjectName: this.name_,\n                object: this,\n                type: UPDATE,\n                newValue: this.value_,\n                oldValue: undefined\n            })\n        }\n        return registerListener(this, listener)\n    }\n\n    raw() {\n        // used by MST ot get undehanced value\n        return this.value_\n    }\n\n    toJSON() {\n        return this.get()\n    }\n\n    toString() {\n        return `${this.name_}[${this.value_}]`\n    }\n\n    valueOf(): T {\n        return toPrimitive(this.get())\n    }\n\n    [Symbol.toPrimitive]() {\n        return this.valueOf()\n    }\n}\n\nexport const isObservableValue = createInstanceofPredicate(\"ObservableValue\", ObservableValue) as (\n    x: any\n) => x is IObservableValue<any>\n","import {\n    CaughtException,\n    IDerivation,\n    IDerivationState_,\n    IEqualsComparer,\n    IObservable,\n    Lambda,\n    TraceMode,\n    autorun,\n    clearObserving,\n    comparer,\n    createAction,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    globalState,\n    isCaughtException,\n    isSpyEnabled,\n    propagateChangeConfirmed,\n    propagateMaybeChanged,\n    reportObserved,\n    shouldCompute,\n    spyReport,\n    startBatch,\n    toPrimitive,\n    trackDerivedFunction,\n    untrackedEnd,\n    untrackedStart,\n    UPDATE,\n    die,\n    allowStateChangesStart,\n    allowStateChangesEnd\n} from \"../internal\"\n\nimport { getFlag, setFlag } from \"../utils/utils\"\n\nexport interface IComputedValue<T> {\n    get(): T\n    set(value: T): void\n}\n\nexport interface IComputedValueOptions<T> {\n    get?: () => T\n    set?: (value: T) => void\n    name?: string\n    equals?: IEqualsComparer<T>\n    context?: any\n    requiresReaction?: boolean\n    keepAlive?: boolean\n}\n\nexport type IComputedDidChange<T = any> = {\n    type: \"update\"\n    observableKind: \"computed\"\n    object: unknown\n    debugObjectName: string\n    newValue: T\n    oldValue: T | undefined\n}\n\n/**\n * A node in the state dependency root that observes other nodes, and can be observed itself.\n *\n * ComputedValue will remember the result of the computation for the duration of the batch, or\n * while being observed.\n *\n * During this time it will recompute only when one of its direct dependencies changed,\n * but only when it is being accessed with `ComputedValue.get()`.\n *\n * Implementation description:\n * 1. First time it's being accessed it will compute and remember result\n *    give back remembered result until 2. happens\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\n * 3. When it's being accessed, recompute if any shallow dependency changed.\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\n *    go to step 2. either way\n *\n * If at any point it's outside batch and it isn't observed: reset everything and go to 1.\n */\nexport class ComputedValue<T> implements IObservable, IComputedValue<T>, IDerivation {\n    dependenciesState_ = IDerivationState_.NOT_TRACKING_\n    observing_: IObservable[] = [] // nodes we are looking at. Our value depends on these nodes\n    newObserving_ = null // during tracking it's an array with new observed observers\n    observers_ = new Set<IDerivation>()\n    runId_ = 0\n    lastAccessedBy_ = 0\n    lowestObserverState_ = IDerivationState_.UP_TO_DATE_\n    unboundDepsCount_ = 0\n    protected value_: T | undefined | CaughtException = new CaughtException(null)\n    name_: string\n    triggeredBy_?: string\n\n    private static readonly isComputingMask_ = 0b00001\n    private static readonly isRunningSetterMask_ = 0b00010\n    private static readonly isBeingObservedMask_ = 0b00100\n    private static readonly isPendingUnobservationMask_ = 0b01000\n    private static readonly diffValueMask_ = 0b10000\n    private flags_ = 0b00000\n\n    derivation: () => T // N.B: unminified as it is used by MST\n    setter_?: (value: T) => void\n    isTracing_: TraceMode = TraceMode.NONE\n    scope_: Object | undefined\n    private equals_: IEqualsComparer<any>\n    private requiresReaction_: boolean | undefined\n    keepAlive_: boolean\n\n    /**\n     * Create a new computed value based on a function expression.\n     *\n     * The `name` property is for debug purposes only.\n     *\n     * The `equals` property specifies the comparer function to use to determine if a newly produced\n     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\n     * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.\n     * Structural comparison can be convenient if you always produce a new aggregated object and\n     * don't want to notify observers if it is structurally the same.\n     * This is useful for working with vectors, mouse coordinates etc.\n     */\n    constructor(options: IComputedValueOptions<T>) {\n        if (!options.get) {\n            die(31)\n        }\n        this.derivation = options.get!\n        this.name_ = options.name || (__DEV__ ? \"ComputedValue@\" + getNextId() : \"ComputedValue\")\n        if (options.set) {\n            this.setter_ = createAction(\n                __DEV__ ? this.name_ + \"-setter\" : \"ComputedValue-setter\",\n                options.set\n            ) as any\n        }\n        this.equals_ =\n            options.equals ||\n            ((options as any).compareStructural || (options as any).struct\n                ? comparer.structural\n                : comparer.default)\n        this.scope_ = options.context\n        this.requiresReaction_ = options.requiresReaction\n        this.keepAlive_ = !!options.keepAlive\n    }\n\n    onBecomeStale_() {\n        propagateMaybeChanged(this)\n    }\n\n    public onBOL: Set<Lambda> | undefined\n    public onBUOL: Set<Lambda> | undefined\n\n    public onBO() {\n        if (this.onBOL) {\n            this.onBOL.forEach(listener => listener())\n        }\n    }\n\n    public onBUO() {\n        if (this.onBUOL) {\n            this.onBUOL.forEach(listener => listener())\n        }\n    }\n\n    // to check for cycles\n    private get isComputing(): boolean {\n        return getFlag(this.flags_, ComputedValue.isComputingMask_)\n    }\n    private set isComputing(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, ComputedValue.isComputingMask_, newValue)\n    }\n\n    private get isRunningSetter(): boolean {\n        return getFlag(this.flags_, ComputedValue.isRunningSetterMask_)\n    }\n    private set isRunningSetter(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, ComputedValue.isRunningSetterMask_, newValue)\n    }\n\n    get isBeingObserved(): boolean {\n        return getFlag(this.flags_, ComputedValue.isBeingObservedMask_)\n    }\n    set isBeingObserved(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, ComputedValue.isBeingObservedMask_, newValue)\n    }\n\n    get isPendingUnobservation(): boolean {\n        return getFlag(this.flags_, ComputedValue.isPendingUnobservationMask_)\n    }\n    set isPendingUnobservation(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, ComputedValue.isPendingUnobservationMask_, newValue)\n    }\n\n    get diffValue(): 0 | 1 {\n        return getFlag(this.flags_, ComputedValue.diffValueMask_) ? 1 : 0\n    }\n    set diffValue(newValue: 0 | 1) {\n        this.flags_ = setFlag(\n            this.flags_,\n            ComputedValue.diffValueMask_,\n            newValue === 1 ? true : false\n        )\n    }\n\n    /**\n     * Returns the current value of this computed value.\n     * Will evaluate its computation first if needed.\n     */\n    public get(): T {\n        if (this.isComputing) {\n            die(32, this.name_, this.derivation)\n        }\n        if (\n            globalState.inBatch === 0 &&\n            // !globalState.trackingDerivatpion &&\n            this.observers_.size === 0 &&\n            !this.keepAlive_\n        ) {\n            if (shouldCompute(this)) {\n                this.warnAboutUntrackedRead_()\n                startBatch() // See perf test 'computed memoization'\n                this.value_ = this.computeValue_(false)\n                endBatch()\n            }\n        } else {\n            reportObserved(this)\n            if (shouldCompute(this)) {\n                let prevTrackingContext = globalState.trackingContext\n                if (this.keepAlive_ && !prevTrackingContext) {\n                    globalState.trackingContext = this\n                }\n                if (this.trackAndCompute()) {\n                    propagateChangeConfirmed(this)\n                }\n                globalState.trackingContext = prevTrackingContext\n            }\n        }\n        const result = this.value_!\n\n        if (isCaughtException(result)) {\n            throw result.cause\n        }\n        return result\n    }\n\n    public set(value: T) {\n        if (this.setter_) {\n            if (this.isRunningSetter) {\n                die(33, this.name_)\n            }\n            this.isRunningSetter = true\n            try {\n                this.setter_.call(this.scope_, value)\n            } finally {\n                this.isRunningSetter = false\n            }\n        } else {\n            die(34, this.name_)\n        }\n    }\n\n    trackAndCompute(): boolean {\n        // N.B: unminified as it is used by MST\n        const oldValue = this.value_\n        const wasSuspended =\n            /* see #1208 */ this.dependenciesState_ === IDerivationState_.NOT_TRACKING_\n        const newValue = this.computeValue_(true)\n\n        const changed =\n            wasSuspended ||\n            isCaughtException(oldValue) ||\n            isCaughtException(newValue) ||\n            !this.equals_(oldValue, newValue)\n\n        if (changed) {\n            this.value_ = newValue\n\n            if (__DEV__ && isSpyEnabled()) {\n                spyReport({\n                    observableKind: \"computed\",\n                    debugObjectName: this.name_,\n                    object: this.scope_,\n                    type: \"update\",\n                    oldValue,\n                    newValue\n                } as IComputedDidChange)\n            }\n        }\n\n        return changed\n    }\n\n    computeValue_(track: boolean) {\n        this.isComputing = true\n        // don't allow state changes during computation\n        const prev = allowStateChangesStart(false)\n        let res: T | CaughtException\n        if (track) {\n            res = trackDerivedFunction(this, this.derivation, this.scope_)\n        } else {\n            if (globalState.disableErrorBoundaries === true) {\n                res = this.derivation.call(this.scope_)\n            } else {\n                try {\n                    res = this.derivation.call(this.scope_)\n                } catch (e) {\n                    res = new CaughtException(e)\n                }\n            }\n        }\n        allowStateChangesEnd(prev)\n        this.isComputing = false\n        return res\n    }\n\n    suspend_() {\n        if (!this.keepAlive_) {\n            clearObserving(this)\n            this.value_ = undefined // don't hold on to computed value!\n            if (__DEV__ && this.isTracing_ !== TraceMode.NONE) {\n                console.log(\n                    `[mobx.trace] Computed value '${this.name_}' was suspended and it will recompute on the next access.`\n                )\n            }\n        }\n    }\n\n    observe_(listener: (change: IComputedDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        let firstTime = true\n        let prevValue: T | undefined = undefined\n        return autorun(() => {\n            // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place\n            let newValue = this.get()\n            if (!firstTime || fireImmediately) {\n                const prevU = untrackedStart()\n                listener({\n                    observableKind: \"computed\",\n                    debugObjectName: this.name_,\n                    type: UPDATE,\n                    object: this,\n                    newValue,\n                    oldValue: prevValue\n                })\n                untrackedEnd(prevU)\n            }\n            firstTime = false\n            prevValue = newValue\n        })\n    }\n\n    warnAboutUntrackedRead_() {\n        if (!__DEV__) {\n            return\n        }\n        if (this.isTracing_ !== TraceMode.NONE) {\n            console.log(\n                `[mobx.trace] Computed value '${this.name_}' is being read outside a reactive context. Doing a full recompute.`\n            )\n        }\n        if (\n            typeof this.requiresReaction_ === \"boolean\"\n                ? this.requiresReaction_\n                : globalState.computedRequiresReaction\n        ) {\n            console.warn(\n                `[mobx] Computed value '${this.name_}' is being read outside a reactive context. Doing a full recompute.`\n            )\n        }\n    }\n\n    toString() {\n        return `${this.name_}[${this.derivation.toString()}]`\n    }\n\n    valueOf(): T {\n        return toPrimitive(this.get())\n    }\n\n    [Symbol.toPrimitive]() {\n        return this.valueOf()\n    }\n}\n\nexport const isComputedValue = createInstanceofPredicate(\"ComputedValue\", ComputedValue)\n","import {\n    IAtom,\n    IDepTreeNode,\n    IObservable,\n    addObserver,\n    globalState,\n    isComputedValue,\n    removeObserver\n} from \"../internal\"\n\nexport enum IDerivationState_ {\n    // before being run or (outside batch and not being observed)\n    // at this point derivation is not holding any data about dependency tree\n    NOT_TRACKING_ = -1,\n    // no shallow dependency changed since last computation\n    // won't recalculate derivation\n    // this is what makes mobx fast\n    UP_TO_DATE_ = 0,\n    // some deep dependency changed, but don't know if shallow dependency changed\n    // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n    // currently only ComputedValue will propagate POSSIBLY_STALE\n    //\n    // having this state is second big optimization:\n    // don't have to recompute on every dependency change, but only when it's needed\n    POSSIBLY_STALE_ = 1,\n    // A shallow dependency has changed since last computation and the derivation\n    // will need to recompute when it's needed next.\n    STALE_ = 2\n}\n\nexport enum TraceMode {\n    NONE,\n    LOG,\n    BREAK\n}\n\n/**\n * A derivation is everything that can be derived from the state (all the atoms) in a pure manner.\n * See https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n */\nexport interface IDerivation extends IDepTreeNode {\n    observing_: IObservable[]\n    newObserving_: null | IObservable[]\n    dependenciesState_: IDerivationState_\n    /**\n     * Id of the current run of a derivation. Each time the derivation is tracked\n     * this number is increased by one. This number is globally unique\n     */\n    runId_: number\n    /**\n     * amount of dependencies used by the derivation in this run, which has not been bound yet.\n     */\n    unboundDepsCount_: number\n    onBecomeStale_(): void\n    isTracing_: TraceMode\n\n    /**\n     *  warn if the derivation has no dependencies after creation/update\n     */\n    requiresObservable_?: boolean\n}\n\nexport class CaughtException {\n    constructor(public cause: any) {\n        // Empty\n    }\n}\n\nexport function isCaughtException(e: any): e is CaughtException {\n    return e instanceof CaughtException\n}\n\n/**\n * Finds out whether any dependency of the derivation has actually changed.\n * If dependenciesState is 1 then it will recalculate dependencies,\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\n *\n * By iterating over the dependencies in the same order that they were reported and\n * stopping on the first change, all the recalculations are only called for ComputedValues\n * that will be tracked by derivation. That is because we assume that if the first x\n * dependencies of the derivation doesn't change then the derivation should run the same way\n * up until accessing x-th dependency.\n */\nexport function shouldCompute(derivation: IDerivation): boolean {\n    switch (derivation.dependenciesState_) {\n        case IDerivationState_.UP_TO_DATE_:\n            return false\n        case IDerivationState_.NOT_TRACKING_:\n        case IDerivationState_.STALE_:\n            return true\n        case IDerivationState_.POSSIBLY_STALE_: {\n            // state propagation can occur outside of action/reactive context #2195\n            const prevAllowStateReads = allowStateReadsStart(true)\n            const prevUntracked = untrackedStart() // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n            const obs = derivation.observing_,\n                l = obs.length\n            for (let i = 0; i < l; i++) {\n                const obj = obs[i]\n                if (isComputedValue(obj)) {\n                    if (globalState.disableErrorBoundaries) {\n                        obj.get()\n                    } else {\n                        try {\n                            obj.get()\n                        } catch (e) {\n                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                            untrackedEnd(prevUntracked)\n                            allowStateReadsEnd(prevAllowStateReads)\n                            return true\n                        }\n                    }\n                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n                    // and `derivation` is an observer of `obj`\n                    // invariantShouldCompute(derivation)\n                    if ((derivation.dependenciesState_ as any) === IDerivationState_.STALE_) {\n                        untrackedEnd(prevUntracked)\n                        allowStateReadsEnd(prevAllowStateReads)\n                        return true\n                    }\n                }\n            }\n            changeDependenciesStateTo0(derivation)\n            untrackedEnd(prevUntracked)\n            allowStateReadsEnd(prevAllowStateReads)\n            return false\n        }\n    }\n}\n\nexport function isComputingDerivation() {\n    return globalState.trackingDerivation !== null // filter out actions inside computations\n}\n\nexport function checkIfStateModificationsAreAllowed(atom: IAtom) {\n    if (!__DEV__) {\n        return\n    }\n    const hasObservers = atom.observers_.size > 0\n    // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n    if (\n        !globalState.allowStateChanges &&\n        (hasObservers || globalState.enforceActions === \"always\")\n    ) {\n        console.warn(\n            \"[MobX] \" +\n                (globalState.enforceActions\n                    ? \"Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: \"\n                    : \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: \") +\n                atom.name_\n        )\n    }\n}\n\nexport function checkIfStateReadsAreAllowed(observable: IObservable) {\n    if (__DEV__ && !globalState.allowStateReads && globalState.observableRequiresReaction) {\n        console.warn(\n            `[mobx] Observable '${observable.name_}' being read outside a reactive context.`\n        )\n    }\n}\n\n/**\n * Executes the provided function `f` and tracks which observables are being accessed.\n * The tracking information is stored on the `derivation` object and the derivation is registered\n * as observer of any of the accessed observables.\n */\nexport function trackDerivedFunction<T>(derivation: IDerivation, f: () => T, context: any) {\n    const prevAllowStateReads = allowStateReadsStart(true)\n    changeDependenciesStateTo0(derivation)\n    // Preallocate array; will be trimmed by bindDependencies.\n    derivation.newObserving_ = new Array(\n        // Reserve constant space for initial dependencies, dynamic space otherwise.\n        // See https://github.com/mobxjs/mobx/pull/3833\n        derivation.runId_ === 0 ? 100 : derivation.observing_.length\n    )\n    derivation.unboundDepsCount_ = 0\n    derivation.runId_ = ++globalState.runId\n    const prevTracking = globalState.trackingDerivation\n    globalState.trackingDerivation = derivation\n    globalState.inBatch++\n    let result\n    if (globalState.disableErrorBoundaries === true) {\n        result = f.call(context)\n    } else {\n        try {\n            result = f.call(context)\n        } catch (e) {\n            result = new CaughtException(e)\n        }\n    }\n    globalState.inBatch--\n    globalState.trackingDerivation = prevTracking\n    bindDependencies(derivation)\n\n    warnAboutDerivationWithoutDependencies(derivation)\n    allowStateReadsEnd(prevAllowStateReads)\n    return result\n}\n\nfunction warnAboutDerivationWithoutDependencies(derivation: IDerivation) {\n    if (!__DEV__) {\n        return\n    }\n\n    if (derivation.observing_.length !== 0) {\n        return\n    }\n\n    if (\n        typeof derivation.requiresObservable_ === \"boolean\"\n            ? derivation.requiresObservable_\n            : globalState.reactionRequiresObservable\n    ) {\n        console.warn(\n            `[mobx] Derivation '${derivation.name_}' is created/updated without reading any observable value.`\n        )\n    }\n}\n\n/**\n * diffs newObserving with observing.\n * update observing to be newObserving with unique observables\n * notify observers that become observed/unobserved\n */\nfunction bindDependencies(derivation: IDerivation) {\n    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, \"INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1\");\n    const prevObserving = derivation.observing_\n    const observing = (derivation.observing_ = derivation.newObserving_!)\n    let lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_\n\n    // Go through all new observables and check diffValue: (this list can contain duplicates):\n    //   0: first occurrence, change to 1 and keep it\n    //   1: extra occurrence, drop it\n    let i0 = 0,\n        l = derivation.unboundDepsCount_\n    for (let i = 0; i < l; i++) {\n        const dep = observing[i]\n        if (dep.diffValue === 0) {\n            dep.diffValue = 1\n            if (i0 !== i) {\n                observing[i0] = dep\n            }\n            i0++\n        }\n\n        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,\n        // not hitting the condition\n        if ((dep as any as IDerivation).dependenciesState_ > lowestNewObservingDerivationState) {\n            lowestNewObservingDerivationState = (dep as any as IDerivation).dependenciesState_\n        }\n    }\n    observing.length = i0\n\n    derivation.newObserving_ = null // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)\n\n    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n    //   0: it's not in new observables, unobserve it\n    //   1: it keeps being observed, don't want to notify it. change to 0\n    l = prevObserving.length\n    while (l--) {\n        const dep = prevObserving[l]\n        if (dep.diffValue === 0) {\n            removeObserver(dep, derivation)\n        }\n        dep.diffValue = 0\n    }\n\n    // Go through all new observables and check diffValue: (now it should be unique)\n    //   0: it was set to 0 in last loop. don't need to do anything.\n    //   1: it wasn't observed, let's observe it. set back to 0\n    while (i0--) {\n        const dep = observing[i0]\n        if (dep.diffValue === 1) {\n            dep.diffValue = 0\n            addObserver(dep, derivation)\n        }\n    }\n\n    // Some new observed derivations may become stale during this derivation computation\n    // so they have had no chance to propagate staleness (#916)\n    if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {\n        derivation.dependenciesState_ = lowestNewObservingDerivationState\n        derivation.onBecomeStale_()\n    }\n}\n\nexport function clearObserving(derivation: IDerivation) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR clearObserving should be called only inside batch\");\n    const obs = derivation.observing_\n    derivation.observing_ = []\n    let i = obs.length\n    while (i--) {\n        removeObserver(obs[i], derivation)\n    }\n\n    derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_\n}\n\nexport function untracked<T>(action: () => T): T {\n    const prev = untrackedStart()\n    try {\n        return action()\n    } finally {\n        untrackedEnd(prev)\n    }\n}\n\nexport function untrackedStart(): IDerivation | null {\n    const prev = globalState.trackingDerivation\n    globalState.trackingDerivation = null\n    return prev\n}\n\nexport function untrackedEnd(prev: IDerivation | null) {\n    globalState.trackingDerivation = prev\n}\n\nexport function allowStateReadsStart(allowStateReads: boolean) {\n    const prev = globalState.allowStateReads\n    globalState.allowStateReads = allowStateReads\n    return prev\n}\n\nexport function allowStateReadsEnd(prev: boolean) {\n    globalState.allowStateReads = prev\n}\n\n/**\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\n *\n */\nexport function changeDependenciesStateTo0(derivation: IDerivation) {\n    if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n        return\n    }\n    derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_\n\n    const obs = derivation.observing_\n    let i = obs.length\n    while (i--) {\n        obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_\n    }\n}\n","import { IDerivation, IObservable, Reaction, die, getGlobal } from \"../internal\"\nimport { ComputedValue } from \"./computedvalue\"\n\n/**\n * These values will persist if global state is reset\n */\nconst persistentKeys: (keyof MobXGlobals)[] = [\n    \"mobxGuid\",\n    \"spyListeners\",\n    \"enforceActions\",\n    \"computedRequiresReaction\",\n    \"reactionRequiresObservable\",\n    \"observableRequiresReaction\",\n    \"allowStateReads\",\n    \"disableErrorBoundaries\",\n    \"runId\",\n    \"UNCHANGED\",\n    \"useProxies\"\n]\n\nexport type IUNCHANGED = {}\n\nexport class MobXGlobals {\n    /**\n     * MobXGlobals version.\n     * MobX compatiblity with other versions loaded in memory as long as this version matches.\n     * It indicates that the global state still stores similar information\n     *\n     * N.B: this version is unrelated to the package version of MobX, and is only the version of the\n     * internal state storage of MobX, and can be the same across many different package versions\n     */\n    version = 6\n\n    /**\n     * globally unique token to signal unchanged\n     */\n    UNCHANGED: IUNCHANGED = {}\n\n    /**\n     * Currently running derivation\n     */\n    trackingDerivation: IDerivation | null = null\n\n    /**\n     * Currently running reaction. This determines if we currently have a reactive context.\n     * (Tracking derivation is also set for temporal tracking of computed values inside actions,\n     * but trackingReaction can only be set by a form of Reaction)\n     */\n    trackingContext: Reaction | ComputedValue<any> | null = null\n\n    /**\n     * Each time a derivation is tracked, it is assigned a unique run-id\n     */\n    runId = 0\n\n    /**\n     * 'guid' for general purpose. Will be persisted amongst resets.\n     */\n    mobxGuid = 0\n\n    /**\n     * Are we in a batch block? (and how many of them)\n     */\n    inBatch: number = 0\n\n    /**\n     * Observables that don't have observers anymore, and are about to be\n     * suspended, unless somebody else accesses it in the same batch\n     *\n     * @type {IObservable[]}\n     */\n    pendingUnobservations: IObservable[] = []\n\n    /**\n     * List of scheduled, not yet executed, reactions.\n     */\n    pendingReactions: Reaction[] = []\n\n    /**\n     * Are we currently processing reactions?\n     */\n    isRunningReactions = false\n\n    /**\n     * Is it allowed to change observables at this point?\n     * In general, MobX doesn't allow that when running computations and React.render.\n     * To ensure that those functions stay pure.\n     */\n    allowStateChanges = false\n\n    /**\n     * Is it allowed to read observables at this point?\n     * Used to hold the state needed for `observableRequiresReaction`\n     */\n    allowStateReads = true\n\n    /**\n     * If strict mode is enabled, state changes are by default not allowed\n     */\n    enforceActions: boolean | \"always\" = true\n\n    /**\n     * Spy callbacks\n     */\n    spyListeners: { (change: any): void }[] = []\n\n    /**\n     * Globally attached error handlers that react specifically to errors in reactions\n     */\n    globalReactionErrorHandlers: ((error: any, derivation: IDerivation) => void)[] = []\n\n    /**\n     * Warn if computed values are accessed outside a reactive context\n     */\n    computedRequiresReaction = false\n\n    /**\n     * (Experimental)\n     * Warn if you try to create to derivation / reactive context without accessing any observable.\n     */\n    reactionRequiresObservable = false\n\n    /**\n     * (Experimental)\n     * Warn if observables are accessed outside a reactive context\n     */\n    observableRequiresReaction = false\n\n    /*\n     * Don't catch and rethrow exceptions. This is useful for inspecting the state of\n     * the stack when an exception occurs while debugging.\n     */\n    disableErrorBoundaries = false\n\n    /*\n     * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as\n     * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836\n     */\n    suppressReactionErrors = false\n\n    useProxies = true\n    /*\n     * print warnings about code that would fail if proxies weren't available\n     */\n    verifyProxies = false\n\n    /**\n     * False forces all object's descriptors to\n     * writable: true\n     * configurable: true\n     */\n    safeDescriptors = true\n}\n\nlet canMergeGlobalState = true\nlet isolateCalled = false\n\nexport let globalState: MobXGlobals = (function () {\n    let global = getGlobal()\n    if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {\n        canMergeGlobalState = false\n    }\n    if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {\n        canMergeGlobalState = false\n    }\n\n    if (!canMergeGlobalState) {\n        // Because this is a IIFE we need to let isolateCalled a chance to change\n        // so we run it after the event loop completed at least 1 iteration\n        setTimeout(() => {\n            if (!isolateCalled) {\n                die(35)\n            }\n        }, 1)\n        return new MobXGlobals()\n    } else if (global.__mobxGlobals) {\n        global.__mobxInstanceCount += 1\n        if (!global.__mobxGlobals.UNCHANGED) {\n            global.__mobxGlobals.UNCHANGED = {}\n        } // make merge backward compatible\n        return global.__mobxGlobals\n    } else {\n        global.__mobxInstanceCount = 1\n        return (global.__mobxGlobals = new MobXGlobals())\n    }\n})()\n\nexport function isolateGlobalState() {\n    if (\n        globalState.pendingReactions.length ||\n        globalState.inBatch ||\n        globalState.isRunningReactions\n    ) {\n        die(36)\n    }\n    isolateCalled = true\n    if (canMergeGlobalState) {\n        let global = getGlobal()\n        if (--global.__mobxInstanceCount === 0) {\n            global.__mobxGlobals = undefined\n        }\n        globalState = new MobXGlobals()\n    }\n}\n\nexport function getGlobalState(): any {\n    return globalState\n}\n\n/**\n * For testing purposes only; this will break the internal state of existing observables,\n * but can be used to get back at a stable state after throwing errors\n */\nexport function resetGlobalState() {\n    const defaultGlobals = new MobXGlobals()\n    for (let key in defaultGlobals) {\n        if (persistentKeys.indexOf(key as any) === -1) {\n            globalState[key] = defaultGlobals[key]\n        }\n    }\n    globalState.allowStateChanges = !globalState.enforceActions\n}\n","import {\n    Lambda,\n    ComputedValue,\n    IDependencyTree,\n    IDerivation,\n    IDerivationState_,\n    TraceMode,\n    getDependencyTree,\n    globalState,\n    runReactions,\n    checkIfStateReadsAreAllowed\n} from \"../internal\"\n\nexport interface IDepTreeNode {\n    name_: string\n    observing_?: IObservable[]\n}\n\nexport interface IObservable extends IDepTreeNode {\n    diffValue: number\n    /**\n     * Id of the derivation *run* that last accessed this observable.\n     * If this id equals the *run* id of the current derivation,\n     * the dependency is already established\n     */\n    lastAccessedBy_: number\n    isBeingObserved: boolean\n\n    lowestObserverState_: IDerivationState_ // Used to avoid redundant propagations\n    isPendingUnobservation: boolean // Used to push itself to global.pendingUnobservations at most once per batch.\n\n    observers_: Set<IDerivation>\n\n    onBUO(): void\n    onBO(): void\n\n    onBUOL: Set<Lambda> | undefined\n    onBOL: Set<Lambda> | undefined\n}\n\nexport function hasObservers(observable: IObservable): boolean {\n    return observable.observers_ && observable.observers_.size > 0\n}\n\nexport function getObservers(observable: IObservable): Set<IDerivation> {\n    return observable.observers_\n}\n\n// function invariantObservers(observable: IObservable) {\n//     const list = observable.observers\n//     const map = observable.observersIndexes\n//     const l = list.length\n//     for (let i = 0; i < l; i++) {\n//         const id = list[i].__mapid\n//         if (i) {\n//             invariant(map[id] === i, \"INTERNAL ERROR maps derivation.__mapid to index in list\") // for performance\n//         } else {\n//             invariant(!(id in map), \"INTERNAL ERROR observer on index 0 shouldn't be held in map.\") // for performance\n//         }\n//     }\n//     invariant(\n//         list.length === 0 || Object.keys(map).length === list.length - 1,\n//         \"INTERNAL ERROR there is no junk in map\"\n//     )\n// }\nexport function addObserver(observable: IObservable, node: IDerivation) {\n    // invariant(node.dependenciesState !== -1, \"INTERNAL ERROR, can add only dependenciesState !== -1\");\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR add already added node\");\n    // invariantObservers(observable);\n\n    observable.observers_.add(node)\n    if (observable.lowestObserverState_ > node.dependenciesState_) {\n        observable.lowestObserverState_ = node.dependenciesState_\n    }\n\n    // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR didn't add node\");\n}\n\nexport function removeObserver(observable: IObservable, node: IDerivation) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR, remove should be called only inside batch\");\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR remove already removed node\");\n    // invariantObservers(observable);\n    observable.observers_.delete(node)\n    if (observable.observers_.size === 0) {\n        // deleting last observer\n        queueForUnobservation(observable)\n    }\n    // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR remove already removed node2\");\n}\n\nexport function queueForUnobservation(observable: IObservable) {\n    if (observable.isPendingUnobservation === false) {\n        // invariant(observable._observers.length === 0, \"INTERNAL ERROR, should only queue for unobservation unobserved observables\");\n        observable.isPendingUnobservation = true\n        globalState.pendingUnobservations.push(observable)\n    }\n}\n\n/**\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\n * Avoids unnecessary recalculations.\n */\nexport function startBatch() {\n    globalState.inBatch++\n}\n\nexport function endBatch() {\n    if (--globalState.inBatch === 0) {\n        runReactions()\n        // the batch is actually about to finish, all unobserving should happen here.\n        const list = globalState.pendingUnobservations\n        for (let i = 0; i < list.length; i++) {\n            const observable = list[i]\n            observable.isPendingUnobservation = false\n            if (observable.observers_.size === 0) {\n                if (observable.isBeingObserved) {\n                    // if this observable had reactive observers, trigger the hooks\n                    observable.isBeingObserved = false\n                    observable.onBUO()\n                }\n                if (observable instanceof ComputedValue) {\n                    // computed values are automatically teared down when the last observer leaves\n                    // this process happens recursively, this computed might be the last observabe of another, etc..\n                    observable.suspend_()\n                }\n            }\n        }\n        globalState.pendingUnobservations = []\n    }\n}\n\nexport function reportObserved(observable: IObservable): boolean {\n    checkIfStateReadsAreAllowed(observable)\n\n    const derivation = globalState.trackingDerivation\n    if (derivation !== null) {\n        /**\n         * Simple optimization, give each derivation run an unique id (runId)\n         * Check if last time this observable was accessed the same runId is used\n         * if this is the case, the relation is already known\n         */\n        if (derivation.runId_ !== observable.lastAccessedBy_) {\n            observable.lastAccessedBy_ = derivation.runId_\n            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...\n            derivation.newObserving_![derivation.unboundDepsCount_++] = observable\n            if (!observable.isBeingObserved && globalState.trackingContext) {\n                observable.isBeingObserved = true\n                observable.onBO()\n            }\n        }\n        return observable.isBeingObserved\n    } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {\n        queueForUnobservation(observable)\n    }\n\n    return false\n}\n\n// function invariantLOS(observable: IObservable, msg: string) {\n//     // it's expensive so better not run it in produciton. but temporarily helpful for testing\n//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n//     throw new Error(\n//         \"lowestObserverState is wrong for \" +\n//             msg +\n//             \" because \" +\n//             min +\n//             \" < \" +\n//             observable.lowestObserverState\n//     )\n// }\n\n/**\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\n * It will propagate changes to observers from previous run\n * It's hard or maybe impossible (with reasonable perf) to get it right with current approach\n * Hopefully self reruning autoruns aren't a feature people should depend on\n * Also most basic use cases should be ok\n */\n\n// Called by Atom when its value changes\nexport function propagateChanged(observable: IObservable) {\n    // invariantLOS(observable, \"changed start\");\n    if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n        return\n    }\n    observable.lowestObserverState_ = IDerivationState_.STALE_\n\n    // Ideally we use for..of here, but the downcompiled version is really slow...\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n            if (__DEV__ && d.isTracing_ !== TraceMode.NONE) {\n                logTraceInfo(d, observable)\n            }\n            d.onBecomeStale_()\n        }\n        d.dependenciesState_ = IDerivationState_.STALE_\n    })\n    // invariantLOS(observable, \"changed end\");\n}\n\n// Called by ComputedValue when it recalculate and its value changed\nexport function propagateChangeConfirmed(observable: IObservable) {\n    // invariantLOS(observable, \"confirmed start\");\n    if (observable.lowestObserverState_ === IDerivationState_.STALE_) {\n        return\n    }\n    observable.lowestObserverState_ = IDerivationState_.STALE_\n\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {\n            d.dependenciesState_ = IDerivationState_.STALE_\n            if (__DEV__ && d.isTracing_ !== TraceMode.NONE) {\n                logTraceInfo(d, observable)\n            }\n        } else if (\n            d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.\n        ) {\n            observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_\n        }\n    })\n    // invariantLOS(observable, \"confirmed end\");\n}\n\n// Used by computed when its dependency changed, but we don't wan't to immediately recompute.\nexport function propagateMaybeChanged(observable: IObservable) {\n    // invariantLOS(observable, \"maybe start\");\n    if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {\n        return\n    }\n    observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_\n\n    observable.observers_.forEach(d => {\n        if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {\n            d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_\n            d.onBecomeStale_()\n        }\n    })\n    // invariantLOS(observable, \"maybe end\");\n}\n\nfunction logTraceInfo(derivation: IDerivation, observable: IObservable) {\n    console.log(\n        `[mobx.trace] '${derivation.name_}' is invalidated due to a change in: '${observable.name_}'`\n    )\n    if (derivation.isTracing_ === TraceMode.BREAK) {\n        const lines = []\n        printDepTree(getDependencyTree(derivation), lines, 1)\n\n        // prettier-ignore\n        new Function(\n`debugger;\n/*\nTracing '${derivation.name_}'\n\nYou are entering this break point because derivation '${derivation.name_}' is being traced and '${observable.name_}' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n${derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, \"/\") : \"\"}\n\nThe dependencies for this derivation are:\n\n${lines.join(\"\\n\")}\n*/\n    `)()\n    }\n}\n\nfunction printDepTree(tree: IDependencyTree, lines: string[], depth: number) {\n    if (lines.length >= 1000) {\n        lines.push(\"(and many more)\")\n        return\n    }\n    lines.push(`${\"\\t\".repeat(depth - 1)}${tree.name}`)\n    if (tree.dependencies) {\n        tree.dependencies.forEach(child => printDepTree(child, lines, depth + 1))\n    }\n}\n","import {\n    $mobx,\n    IDerivation,\n    IDerivationState_,\n    IObservable,\n    Lambda,\n    TraceMode,\n    clearObserving,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    globalState,\n    isCaughtException,\n    isSpyEnabled,\n    shouldCompute,\n    spyReport,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    trace,\n    trackDerivedFunction,\n    GenericAbortSignal\n} from \"../internal\"\n\nimport { getFlag, setFlag } from \"../utils/utils\"\n\n/**\n * Reactions are a special kind of derivations. Several things distinguishes them from normal reactive computations\n *\n * 1) They will always run, whether they are used by other computations or not.\n * This means that they are very suitable for triggering side effects like logging, updating the DOM and making network requests.\n * 2) They are not observable themselves\n * 3) They will always run after any 'normal' derivations\n * 4) They are allowed to change the state and thereby triggering themselves again, as long as they make sure the state propagates to a stable state in a reasonable amount of iterations.\n *\n * The state machine of a Reaction is as follows:\n *\n * 1) after creating, the reaction should be started by calling `runReaction` or by scheduling it (see also `autorun`)\n * 2) the `onInvalidate` handler should somehow result in a call to `this.track(someFunction)`\n * 3) all observables accessed in `someFunction` will be observed by this reaction.\n * 4) as soon as some of the dependencies has changed the Reaction will be rescheduled for another run (after the current mutation or transaction). `isScheduled` will yield true once a dependency is stale and during this period\n * 5) `onInvalidate` will be called, and we are back at step 1.\n *\n */\n\nexport interface IReactionPublic {\n    dispose(): void\n    trace(enterBreakPoint?: boolean): void\n}\n\nexport interface IReactionDisposer {\n    (): void\n    [$mobx]: Reaction\n}\n\nexport class Reaction implements IDerivation, IReactionPublic {\n    observing_: IObservable[] = [] // nodes we are looking at. Our value depends on these nodes\n    newObserving_: IObservable[] = []\n    dependenciesState_ = IDerivationState_.NOT_TRACKING_\n    runId_ = 0\n    unboundDepsCount_ = 0\n\n    private static readonly isDisposedMask_ = 0b00001\n    private static readonly isScheduledMask_ = 0b00010\n    private static readonly isTrackPendingMask_ = 0b00100\n    private static readonly isRunningMask_ = 0b01000\n    private static readonly diffValueMask_ = 0b10000\n    private flags_ = 0b00000\n\n    isTracing_: TraceMode = TraceMode.NONE\n\n    constructor(\n        public name_: string = __DEV__ ? \"Reaction@\" + getNextId() : \"Reaction\",\n        private onInvalidate_: () => void,\n        private errorHandler_?: (error: any, derivation: IDerivation) => void,\n        public requiresObservable_?\n    ) {}\n\n    get isDisposed() {\n        return getFlag(this.flags_, Reaction.isDisposedMask_)\n    }\n    set isDisposed(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Reaction.isDisposedMask_, newValue)\n    }\n\n    get isScheduled() {\n        return getFlag(this.flags_, Reaction.isScheduledMask_)\n    }\n    set isScheduled(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Reaction.isScheduledMask_, newValue)\n    }\n\n    get isTrackPending() {\n        return getFlag(this.flags_, Reaction.isTrackPendingMask_)\n    }\n    set isTrackPending(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Reaction.isTrackPendingMask_, newValue)\n    }\n\n    get isRunning() {\n        return getFlag(this.flags_, Reaction.isRunningMask_)\n    }\n    set isRunning(newValue: boolean) {\n        this.flags_ = setFlag(this.flags_, Reaction.isRunningMask_, newValue)\n    }\n\n    get diffValue(): 0 | 1 {\n        return getFlag(this.flags_, Reaction.diffValueMask_) ? 1 : 0\n    }\n    set diffValue(newValue: 0 | 1) {\n        this.flags_ = setFlag(this.flags_, Reaction.diffValueMask_, newValue === 1 ? true : false)\n    }\n\n    onBecomeStale_() {\n        this.schedule_()\n    }\n\n    schedule_() {\n        if (!this.isScheduled) {\n            this.isScheduled = true\n            globalState.pendingReactions.push(this)\n            runReactions()\n        }\n    }\n\n    /**\n     * internal, use schedule() if you intend to kick off a reaction\n     */\n    runReaction_() {\n        if (!this.isDisposed) {\n            startBatch()\n            this.isScheduled = false\n            const prev = globalState.trackingContext\n            globalState.trackingContext = this\n            if (shouldCompute(this)) {\n                this.isTrackPending = true\n\n                try {\n                    this.onInvalidate_()\n                    if (__DEV__ && this.isTrackPending && isSpyEnabled()) {\n                        // onInvalidate didn't trigger track right away..\n                        spyReport({\n                            name: this.name_,\n                            type: \"scheduled-reaction\"\n                        })\n                    }\n                } catch (e) {\n                    this.reportExceptionInDerivation_(e)\n                }\n            }\n            globalState.trackingContext = prev\n            endBatch()\n        }\n    }\n\n    track(fn: () => void) {\n        if (this.isDisposed) {\n            return\n            // console.warn(\"Reaction already disposed\") // Note: Not a warning / error in mobx 4 either\n        }\n        startBatch()\n        const notify = isSpyEnabled()\n        let startTime\n        if (__DEV__ && notify) {\n            startTime = Date.now()\n            spyReportStart({\n                name: this.name_,\n                type: \"reaction\"\n            })\n        }\n        this.isRunning = true\n        const prevReaction = globalState.trackingContext // reactions could create reactions...\n        globalState.trackingContext = this\n        const result = trackDerivedFunction(this, fn, undefined)\n        globalState.trackingContext = prevReaction\n        this.isRunning = false\n        this.isTrackPending = false\n        if (this.isDisposed) {\n            // disposed during last run. Clean up everything that was bound after the dispose call.\n            clearObserving(this)\n        }\n        if (isCaughtException(result)) {\n            this.reportExceptionInDerivation_(result.cause)\n        }\n        if (__DEV__ && notify) {\n            spyReportEnd({\n                time: Date.now() - startTime\n            })\n        }\n        endBatch()\n    }\n\n    reportExceptionInDerivation_(error: any) {\n        if (this.errorHandler_) {\n            this.errorHandler_(error, this)\n            return\n        }\n\n        if (globalState.disableErrorBoundaries) {\n            throw error\n        }\n\n        const message = __DEV__\n            ? `[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '${this}'`\n            : `[mobx] uncaught error in '${this}'`\n        if (!globalState.suppressReactionErrors) {\n            console.error(message, error)\n            /** If debugging brought you here, please, read the above message :-). Tnx! */\n        } else if (__DEV__) { console.warn(`[mobx] (error in reaction '${this.name_}' suppressed, fix error of causing action below)`) } // prettier-ignore\n\n        if (__DEV__ && isSpyEnabled()) {\n            spyReport({\n                type: \"error\",\n                name: this.name_,\n                message,\n                error: \"\" + error\n            })\n        }\n\n        globalState.globalReactionErrorHandlers.forEach(f => f(error, this))\n    }\n\n    dispose() {\n        if (!this.isDisposed) {\n            this.isDisposed = true\n            if (!this.isRunning) {\n                // if disposed while running, clean up later. Maybe not optimal, but rare case\n                startBatch()\n                clearObserving(this)\n                endBatch()\n            }\n        }\n    }\n\n    getDisposer_(abortSignal?: GenericAbortSignal): IReactionDisposer {\n        const dispose = (() => {\n            this.dispose()\n            abortSignal?.removeEventListener?.(\"abort\", dispose)\n        }) as IReactionDisposer\n        abortSignal?.addEventListener?.(\"abort\", dispose)\n        dispose[$mobx] = this\n\n        return dispose\n    }\n\n    toString() {\n        return `Reaction[${this.name_}]`\n    }\n\n    trace(enterBreakPoint: boolean = false) {\n        trace(this, enterBreakPoint)\n    }\n}\n\nexport function onReactionError(handler: (error: any, derivation: IDerivation) => void): Lambda {\n    globalState.globalReactionErrorHandlers.push(handler)\n    return () => {\n        const idx = globalState.globalReactionErrorHandlers.indexOf(handler)\n        if (idx >= 0) {\n            globalState.globalReactionErrorHandlers.splice(idx, 1)\n        }\n    }\n}\n\n/**\n * Magic number alert!\n * Defines within how many times a reaction is allowed to re-trigger itself\n * until it is assumed that this is gonna be a never ending loop...\n */\nconst MAX_REACTION_ITERATIONS = 100\n\nlet reactionScheduler: (fn: () => void) => void = f => f()\n\nexport function runReactions() {\n    // Trampolining, if runReactions are already running, new reactions will be picked up\n    if (globalState.inBatch > 0 || globalState.isRunningReactions) {\n        return\n    }\n    reactionScheduler(runReactionsHelper)\n}\n\nfunction runReactionsHelper() {\n    globalState.isRunningReactions = true\n    const allReactions = globalState.pendingReactions\n    let iterations = 0\n\n    // While running reactions, new reactions might be triggered.\n    // Hence we work with two variables and check whether\n    // we converge to no remaining reactions after a while.\n    while (allReactions.length > 0) {\n        if (++iterations === MAX_REACTION_ITERATIONS) {\n            console.error(\n                __DEV__\n                    ? `Reaction doesn't converge to a stable state after ${MAX_REACTION_ITERATIONS} iterations.` +\n                          ` Probably there is a cycle in the reactive function: ${allReactions[0]}`\n                    : `[mobx] cycle in reaction: ${allReactions[0]}`\n            )\n            allReactions.splice(0) // clear reactions\n        }\n        let remainingReactions = allReactions.splice(0)\n        for (let i = 0, l = remainingReactions.length; i < l; i++) {\n            remainingReactions[i].runReaction_()\n        }\n    }\n    globalState.isRunningReactions = false\n}\n\nexport const isReaction = createInstanceofPredicate(\"Reaction\", Reaction)\n\nexport function setReactionScheduler(fn: (f: () => void) => void) {\n    const baseScheduler = reactionScheduler\n    reactionScheduler = f => fn(() => baseScheduler(f))\n}\n","import { IComputedDidChange } from \"./computedvalue\"\nimport { IValueDidChange, IBoxDidChange } from \"./../types/observablevalue\"\nimport { IObjectDidChange } from \"./../types/observableobject\"\nimport { IArrayDidChange } from \"./../types/observablearray\"\nimport { Lambda, globalState, once, ISetDidChange, IMapDidChange } from \"../internal\"\n\nexport function isSpyEnabled() {\n    return __DEV__ && !!globalState.spyListeners.length\n}\n\nexport type PureSpyEvent =\n    | { type: \"action\"; name: string; object: unknown; arguments: unknown[] }\n    | { type: \"scheduled-reaction\"; name: string }\n    | { type: \"reaction\"; name: string }\n    | { type: \"error\"; name: string; message: string; error: string }\n    | IComputedDidChange<unknown>\n    | IObjectDidChange<unknown>\n    | IArrayDidChange<unknown>\n    | IMapDidChange<unknown, unknown>\n    | ISetDidChange<unknown>\n    | IValueDidChange<unknown>\n    | IBoxDidChange<unknown>\n    | { type: \"report-end\"; spyReportEnd: true; time?: number }\n\ntype SpyEvent = PureSpyEvent & { spyReportStart?: true }\n\nexport function spyReport(event: SpyEvent) {\n    if (!__DEV__) {\n        return\n    } // dead code elimination can do the rest\n    if (!globalState.spyListeners.length) {\n        return\n    }\n    const listeners = globalState.spyListeners\n    for (let i = 0, l = listeners.length; i < l; i++) {\n        listeners[i](event)\n    }\n}\n\nexport function spyReportStart(event: PureSpyEvent) {\n    if (!__DEV__) {\n        return\n    }\n    const change = { ...event, spyReportStart: true as const }\n    spyReport(change)\n}\n\nconst END_EVENT: SpyEvent = { type: \"report-end\", spyReportEnd: true }\n\nexport function spyReportEnd(change?: { time?: number }) {\n    if (!__DEV__) {\n        return\n    }\n    if (change) {\n        spyReport({ ...change, type: \"report-end\", spyReportEnd: true })\n    } else {\n        spyReport(END_EVENT)\n    }\n}\n\nexport function spy(listener: (change: SpyEvent) => void): Lambda {\n    if (!__DEV__) {\n        console.warn(`[mobx.spy] Is a no-op in production builds`)\n        return function () {}\n    } else {\n        globalState.spyListeners.push(listener)\n        return once(() => {\n            globalState.spyListeners = globalState.spyListeners.filter(l => l !== listener)\n        })\n    }\n}\n","import {\n    createAction,\n    executeAction,\n    Annotation,\n    storeAnnotation,\n    die,\n    isFunction,\n    isStringish,\n    createDecoratorAnnotation,\n    createActionAnnotation,\n    is20223Decorator\n} from \"../internal\"\n\nimport type { ClassFieldDecorator, ClassMethodDecorator } from \"../types/decorator_fills\"\n\nexport const ACTION = \"action\"\nexport const ACTION_BOUND = \"action.bound\"\nexport const AUTOACTION = \"autoAction\"\nexport const AUTOACTION_BOUND = \"autoAction.bound\"\n\nconst DEFAULT_ACTION_NAME = \"<unnamed action>\"\n\nconst actionAnnotation = createActionAnnotation(ACTION)\nconst actionBoundAnnotation = createActionAnnotation(ACTION_BOUND, {\n    bound: true\n})\nconst autoActionAnnotation = createActionAnnotation(AUTOACTION, {\n    autoAction: true\n})\nconst autoActionBoundAnnotation = createActionAnnotation(AUTOACTION_BOUND, {\n    autoAction: true,\n    bound: true\n})\n\nexport interface IActionFactory\n    extends Annotation,\n        PropertyDecorator,\n        ClassMethodDecorator,\n        ClassFieldDecorator {\n    // nameless actions\n    <T extends Function | undefined | null>(fn: T): T\n    // named actions\n    <T extends Function | undefined | null>(name: string, fn: T): T\n\n    // named decorator\n    (customName: string): PropertyDecorator &\n        Annotation &\n        ClassMethodDecorator &\n        ClassFieldDecorator\n\n    // decorator (name no longer supported)\n    bound: Annotation & PropertyDecorator & ClassMethodDecorator & ClassFieldDecorator\n}\n\nfunction createActionFactory(autoAction: boolean): IActionFactory {\n    const res: IActionFactory = function action(arg1, arg2?): any {\n        // action(fn() {})\n        if (isFunction(arg1)) {\n            return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction)\n        }\n        // action(\"name\", fn() {})\n        if (isFunction(arg2)) {\n            return createAction(arg1, arg2, autoAction)\n        }\n        // @action (2022.3 Decorators)\n        if (is20223Decorator(arg2)) {\n            return (autoAction ? autoActionAnnotation : actionAnnotation).decorate_20223_(\n                arg1,\n                arg2\n            )\n        }\n        // @action\n        if (isStringish(arg2)) {\n            return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation)\n        }\n        // action(\"name\") & @action(\"name\")\n        if (isStringish(arg1)) {\n            return createDecoratorAnnotation(\n                createActionAnnotation(autoAction ? AUTOACTION : ACTION, {\n                    name: arg1,\n                    autoAction\n                })\n            )\n        }\n\n        if (__DEV__) {\n            die(\"Invalid arguments for `action`\")\n        }\n    } as IActionFactory\n    return res\n}\n\nexport const action: IActionFactory = createActionFactory(false)\nObject.assign(action, actionAnnotation)\nexport const autoAction: IActionFactory = createActionFactory(true)\nObject.assign(autoAction, autoActionAnnotation)\n\naction.bound = createDecoratorAnnotation(actionBoundAnnotation)\nautoAction.bound = createDecoratorAnnotation(autoActionBoundAnnotation)\n\nexport function runInAction<T>(fn: () => T): T {\n    return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined)\n}\n\nexport function isAction(thing: any) {\n    return isFunction(thing) && thing.isMobxAction === true\n}\n","import {\n    EMPTY_OBJECT,\n    IEqualsComparer,\n    IReactionDisposer,\n    IReactionPublic,\n    Lambda,\n    Reaction,\n    action,\n    comparer,\n    getNextId,\n    isAction,\n    isFunction,\n    isPlainObject,\n    die,\n    allowStateChanges,\n    GenericAbortSignal\n} from \"../internal\"\n\nexport interface IAutorunOptions {\n    delay?: number\n    name?: string\n    /**\n     * Experimental.\n     * Warns if the view doesn't track observables\n     */\n    requiresObservable?: boolean\n    scheduler?: (callback: () => void) => any\n    onError?: (error: any) => void\n    signal?: GenericAbortSignal\n}\n\n/**\n * Creates a named reactive view and keeps it alive, so that the view is always\n * updated if one of the dependencies changes, even when the view is not further used by something else.\n * @param view The reactive view\n * @returns disposer function, which can be used to stop the view from being updated in the future.\n */\nexport function autorun(\n    view: (r: IReactionPublic) => any,\n    opts: IAutorunOptions = EMPTY_OBJECT\n): IReactionDisposer {\n    if (__DEV__) {\n        if (!isFunction(view)) {\n            die(\"Autorun expects a function as first argument\")\n        }\n        if (isAction(view)) {\n            die(\"Autorun does not accept actions since actions are untrackable\")\n        }\n    }\n\n    const name: string =\n        opts?.name ?? (__DEV__ ? (view as any).name || \"Autorun@\" + getNextId() : \"Autorun\")\n    const runSync = !opts.scheduler && !opts.delay\n    let reaction: Reaction\n\n    if (runSync) {\n        // normal autorun\n        reaction = new Reaction(\n            name,\n            function (this: Reaction) {\n                this.track(reactionRunner)\n            },\n            opts.onError,\n            opts.requiresObservable\n        )\n    } else {\n        const scheduler = createSchedulerFromOptions(opts)\n        // debounced autorun\n        let isScheduled = false\n\n        reaction = new Reaction(\n            name,\n            () => {\n                if (!isScheduled) {\n                    isScheduled = true\n                    scheduler(() => {\n                        isScheduled = false\n                        if (!reaction.isDisposed) {\n                            reaction.track(reactionRunner)\n                        }\n                    })\n                }\n            },\n            opts.onError,\n            opts.requiresObservable\n        )\n    }\n\n    function reactionRunner() {\n        view(reaction)\n    }\n\n    if (!opts?.signal?.aborted) {\n        reaction.schedule_()\n    }\n    return reaction.getDisposer_(opts?.signal)\n}\n\nexport type IReactionOptions<T, FireImmediately extends boolean> = IAutorunOptions & {\n    fireImmediately?: FireImmediately\n    equals?: IEqualsComparer<T>\n}\n\nconst run = (f: Lambda) => f()\n\nfunction createSchedulerFromOptions(opts: IAutorunOptions) {\n    return opts.scheduler\n        ? opts.scheduler\n        : opts.delay\n        ? (f: Lambda) => setTimeout(f, opts.delay!)\n        : run\n}\n\nexport function reaction<T, FireImmediately extends boolean = false>(\n    expression: (r: IReactionPublic) => T,\n    effect: (\n        arg: T,\n        prev: FireImmediately extends true ? T | undefined : T,\n        r: IReactionPublic\n    ) => void,\n    opts: IReactionOptions<T, FireImmediately> = EMPTY_OBJECT\n): IReactionDisposer {\n    if (__DEV__) {\n        if (!isFunction(expression) || !isFunction(effect)) {\n            die(\"First and second argument to reaction should be functions\")\n        }\n        if (!isPlainObject(opts)) {\n            die(\"Third argument of reactions should be an object\")\n        }\n    }\n    const name = opts.name ?? (__DEV__ ? \"Reaction@\" + getNextId() : \"Reaction\")\n    const effectAction = action(\n        name,\n        opts.onError ? wrapErrorHandler(opts.onError, effect) : effect\n    )\n    const runSync = !opts.scheduler && !opts.delay\n    const scheduler = createSchedulerFromOptions(opts)\n\n    let firstTime = true\n    let isScheduled = false\n    let value: T\n\n    const equals: IEqualsComparer<T> = (opts as any).compareStructural\n        ? comparer.structural\n        : opts.equals || comparer.default\n\n    const r = new Reaction(\n        name,\n        () => {\n            if (firstTime || runSync) {\n                reactionRunner()\n            } else if (!isScheduled) {\n                isScheduled = true\n                scheduler!(reactionRunner)\n            }\n        },\n        opts.onError,\n        opts.requiresObservable\n    )\n\n    function reactionRunner() {\n        isScheduled = false\n        if (r.isDisposed) {\n            return\n        }\n        let changed: boolean = false\n        const oldValue = value\n        r.track(() => {\n            const nextValue = allowStateChanges(false, () => expression(r))\n            changed = firstTime || !equals(value, nextValue)\n            value = nextValue\n        })\n\n        // This casting is nesessary as TS cannot infer proper type in current function implementation\n        type OldValue = FireImmediately extends true ? T | undefined : T\n        if (firstTime && opts.fireImmediately!) {\n            effectAction(value, oldValue as OldValue, r)\n        } else if (!firstTime && changed) {\n            effectAction(value, oldValue as OldValue, r)\n        }\n        firstTime = false\n    }\n\n    if (!opts?.signal?.aborted) {\n        r.schedule_()\n    }\n    return r.getDisposer_(opts?.signal)\n}\n\nfunction wrapErrorHandler(errorHandler, baseFn) {\n    return function () {\n        try {\n            return baseFn.apply(this, arguments)\n        } catch (e) {\n            errorHandler.call(this, e)\n        }\n    }\n}\n","import {\n    IComputedValue,\n    IObservable,\n    IObservableArray,\n    Lambda,\n    ObservableMap,\n    getAtom,\n    ObservableSet,\n    isFunction,\n    IObservableValue\n} from \"../internal\"\n\nconst ON_BECOME_OBSERVED = \"onBO\"\nconst ON_BECOME_UNOBSERVED = \"onBUO\"\n\nexport function onBecomeObserved(\n    value:\n        | IObservable\n        | IComputedValue<any>\n        | IObservableArray<any>\n        | ObservableMap<any, any>\n        | ObservableSet<any>\n        | IObservableValue<any>,\n    listener: Lambda\n): Lambda\nexport function onBecomeObserved<K, V = any>(\n    value: ObservableMap<K, V> | Object,\n    property: K,\n    listener: Lambda\n): Lambda\nexport function onBecomeObserved(thing, arg2, arg3?): Lambda {\n    return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3)\n}\n\nexport function onBecomeUnobserved(\n    value:\n        | IObservable\n        | IComputedValue<any>\n        | IObservableArray<any>\n        | ObservableMap<any, any>\n        | ObservableSet<any>\n        | IObservableValue<any>,\n    listener: Lambda\n): Lambda\nexport function onBecomeUnobserved<K, V = any>(\n    value: ObservableMap<K, V> | Object,\n    property: K,\n    listener: Lambda\n): Lambda\nexport function onBecomeUnobserved(thing, arg2, arg3?): Lambda {\n    return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3)\n}\n\nfunction interceptHook(hook: \"onBO\" | \"onBUO\", thing, arg2, arg3) {\n    const atom: IObservable =\n        typeof arg3 === \"function\" ? getAtom(thing, arg2) : (getAtom(thing) as any)\n    const cb = isFunction(arg3) ? arg3 : arg2\n    const listenersKey = `${hook}L` as \"onBOL\" | \"onBUOL\"\n\n    if (atom[listenersKey]) {\n        atom[listenersKey]!.add(cb)\n    } else {\n        atom[listenersKey] = new Set<Lambda>([cb])\n    }\n\n    return function () {\n        const hookListeners = atom[listenersKey]\n        if (hookListeners) {\n            hookListeners.delete(cb)\n            if (hookListeners.size === 0) {\n                delete atom[listenersKey]\n            }\n        }\n    }\n}\n","import { globalState, isolateGlobalState, setReactionScheduler } from \"../internal\"\n\nconst NEVER = \"never\"\nconst ALWAYS = \"always\"\nconst OBSERVED = \"observed\"\n// const IF_AVAILABLE = \"ifavailable\"\n\nexport function configure(options: {\n    enforceActions?: \"never\" | \"always\" | \"observed\"\n    computedRequiresReaction?: boolean\n    /**\n     * Warn if you try to create to derivation / reactive context without accessing any observable.\n     */\n    reactionRequiresObservable?: boolean\n    /**\n     * Warn if observables are accessed outside a reactive context\n     */\n    observableRequiresReaction?: boolean\n    isolateGlobalState?: boolean\n    disableErrorBoundaries?: boolean\n    safeDescriptors?: boolean\n    reactionScheduler?: (f: () => void) => void\n    useProxies?: \"always\" | \"never\" | \"ifavailable\"\n}): void {\n    if (options.isolateGlobalState === true) {\n        isolateGlobalState()\n    }\n    const { useProxies, enforceActions } = options\n    if (useProxies !== undefined) {\n        globalState.useProxies =\n            useProxies === ALWAYS\n                ? true\n                : useProxies === NEVER\n                ? false\n                : typeof Proxy !== \"undefined\"\n    }\n    if (useProxies === \"ifavailable\") {\n        globalState.verifyProxies = true\n    }\n    if (enforceActions !== undefined) {\n        const ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED\n        globalState.enforceActions = ea\n        globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true\n    }\n    ;[\n        \"computedRequiresReaction\",\n        \"reactionRequiresObservable\",\n        \"observableRequiresReaction\",\n        \"disableErrorBoundaries\",\n        \"safeDescriptors\"\n    ].forEach(key => {\n        if (key in options) {\n            globalState[key] = !!options[key]\n        }\n    })\n    globalState.allowStateReads = !globalState.observableRequiresReaction\n    if (__DEV__ && globalState.disableErrorBoundaries === true) {\n        console.warn(\n            \"WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.\"\n        )\n    }\n    if (options.reactionScheduler) {\n        setReactionScheduler(options.reactionScheduler)\n    }\n}\n","import {\n    CreateObservableOptions,\n    isObservableMap,\n    AnnotationsMap,\n    asObservableObject,\n    isPlainObject,\n    ObservableObjectAdministration,\n    isObservable,\n    die,\n    getOwnPropertyDescriptors,\n    $mobx,\n    ownKeys,\n    initObservable\n} from \"../internal\"\n\nexport function extendObservable<A extends Object, B extends Object>(\n    target: A,\n    properties: B,\n    annotations?: AnnotationsMap<B, never>,\n    options?: CreateObservableOptions\n): A & B {\n    if (__DEV__) {\n        if (arguments.length > 4) {\n            die(\"'extendObservable' expected 2-4 arguments\")\n        }\n        if (typeof target !== \"object\") {\n            die(\"'extendObservable' expects an object as first argument\")\n        }\n        if (isObservableMap(target)) {\n            die(\"'extendObservable' should not be used on maps, use map.merge instead\")\n        }\n        if (!isPlainObject(properties)) {\n            die(`'extendObservable' only accepts plain objects as second argument`)\n        }\n        if (isObservable(properties) || isObservable(annotations)) {\n            die(`Extending an object with another observable (object) is not supported`)\n        }\n    }\n    // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)\n    const descriptors = getOwnPropertyDescriptors(properties)\n\n    initObservable(() => {\n        const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n        ownKeys(descriptors).forEach(key => {\n            adm.extend_(\n                key,\n                descriptors[key as any],\n                // must pass \"undefined\" for { key: undefined }\n                !annotations ? true : key in annotations ? annotations[key] : true\n            )\n        })\n    })\n\n    return target as any\n}\n","import { IDepTreeNode, getAtom, getObservers, hasObservers } from \"../internal\"\n\nexport interface IDependencyTree {\n    name: string\n    dependencies?: IDependencyTree[]\n}\n\nexport interface IObserverTree {\n    name: string\n    observers?: IObserverTree[]\n}\n\nexport function getDependencyTree(thing: any, property?: string): IDependencyTree {\n    return nodeToDependencyTree(getAtom(thing, property))\n}\n\nfunction nodeToDependencyTree(node: IDepTreeNode): IDependencyTree {\n    const result: IDependencyTree = {\n        name: node.name_\n    }\n    if (node.observing_ && node.observing_.length > 0) {\n        result.dependencies = unique(node.observing_).map(nodeToDependencyTree)\n    }\n    return result\n}\n\nexport function getObserverTree(thing: any, property?: string): IObserverTree {\n    return nodeToObserverTree(getAtom(thing, property))\n}\n\nfunction nodeToObserverTree(node: IDepTreeNode): IObserverTree {\n    const result: IObserverTree = {\n        name: node.name_\n    }\n    if (hasObservers(node as any)) {\n        result.observers = Array.from(<any>getObservers(node as any)).map(<any>nodeToObserverTree)\n    }\n    return result\n}\n\nfunction unique<T>(list: T[]): T[] {\n    return Array.from(new Set(list))\n}\n","import {\n    action,\n    noop,\n    die,\n    isFunction,\n    Annotation,\n    isStringish,\n    storeAnnotation,\n    createFlowAnnotation,\n    createDecoratorAnnotation,\n    is20223Decorator\n} from \"../internal\"\n\nimport type { ClassMethodDecorator } from \"../types/decorator_fills\"\n\nexport const FLOW = \"flow\"\n\nlet generatorId = 0\n\nexport function FlowCancellationError() {\n    this.message = \"FLOW_CANCELLED\"\n}\nFlowCancellationError.prototype = Object.create(Error.prototype)\n\nexport function isFlowCancellationError(error: Error) {\n    return error instanceof FlowCancellationError\n}\n\nexport type CancellablePromise<T> = Promise<T> & { cancel(): void }\n\ninterface Flow extends Annotation, PropertyDecorator, ClassMethodDecorator {\n    <R, Args extends any[]>(\n        generator: (...args: Args) => Generator<any, R, any> | AsyncGenerator<any, R, any>\n    ): (...args: Args) => CancellablePromise<R>\n    bound: Annotation & PropertyDecorator & ClassMethodDecorator\n}\n\nconst flowAnnotation = createFlowAnnotation(\"flow\")\nconst flowBoundAnnotation = createFlowAnnotation(\"flow.bound\", { bound: true })\n\nexport const flow: Flow = Object.assign(\n    function flow(arg1, arg2?) {\n        // @flow (2022.3 Decorators)\n        if (is20223Decorator(arg2)) {\n            return flowAnnotation.decorate_20223_(arg1, arg2)\n        }\n        // @flow\n        if (isStringish(arg2)) {\n            return storeAnnotation(arg1, arg2, flowAnnotation)\n        }\n        // flow(fn)\n        if (__DEV__ && arguments.length !== 1) {\n            die(`Flow expects single argument with generator function`)\n        }\n        const generator = arg1\n        const name = generator.name || \"<unnamed flow>\"\n\n        // Implementation based on https://github.com/tj/co/blob/master/index.js\n        const res = function () {\n            const ctx = this\n            const args = arguments\n            const runId = ++generatorId\n            const gen = action(`${name} - runid: ${runId} - init`, generator).apply(ctx, args)\n            let rejector: (error: any) => void\n            let pendingPromise: CancellablePromise<any> | undefined = undefined\n\n            const promise = new Promise(function (resolve, reject) {\n                let stepId = 0\n                rejector = reject\n\n                function onFulfilled(res: any) {\n                    pendingPromise = undefined\n                    let ret\n                    try {\n                        ret = action(\n                            `${name} - runid: ${runId} - yield ${stepId++}`,\n                            gen.next\n                        ).call(gen, res)\n                    } catch (e) {\n                        return reject(e)\n                    }\n\n                    next(ret)\n                }\n\n                function onRejected(err: any) {\n                    pendingPromise = undefined\n                    let ret\n                    try {\n                        ret = action(\n                            `${name} - runid: ${runId} - yield ${stepId++}`,\n                            gen.throw!\n                        ).call(gen, err)\n                    } catch (e) {\n                        return reject(e)\n                    }\n                    next(ret)\n                }\n\n                function next(ret: any) {\n                    if (isFunction(ret?.then)) {\n                        // an async iterator\n                        ret.then(next, reject)\n                        return\n                    }\n                    if (ret.done) {\n                        return resolve(ret.value)\n                    }\n                    pendingPromise = Promise.resolve(ret.value) as any\n                    return pendingPromise!.then(onFulfilled, onRejected)\n                }\n\n                onFulfilled(undefined) // kick off the process\n            }) as any\n\n            promise.cancel = action(`${name} - runid: ${runId} - cancel`, function () {\n                try {\n                    if (pendingPromise) {\n                        cancelPromise(pendingPromise)\n                    }\n                    // Finally block can return (or yield) stuff..\n                    const res = gen.return!(undefined as any)\n                    // eat anything that promise would do, it's cancelled!\n                    const yieldedPromise = Promise.resolve(res.value)\n                    yieldedPromise.then(noop, noop)\n                    cancelPromise(yieldedPromise) // maybe it can be cancelled :)\n                    // reject our original promise\n                    rejector(new FlowCancellationError())\n                } catch (e) {\n                    rejector(e) // there could be a throwing finally block\n                }\n            })\n            return promise\n        }\n        res.isMobXFlow = true\n        return res\n    } as any,\n    flowAnnotation\n)\n\nflow.bound = createDecoratorAnnotation(flowBoundAnnotation)\n\nfunction cancelPromise(promise) {\n    if (isFunction(promise.cancel)) {\n        promise.cancel()\n    }\n}\n\nexport function flowResult<T>(\n    result: T\n): T extends Generator<any, infer R, any>\n    ? CancellablePromise<R>\n    : T extends CancellablePromise<any>\n    ? T\n    : never {\n    return result as any // just tricking TypeScript :)\n}\n\nexport function isFlow(fn: any): boolean {\n    return fn?.isMobXFlow === true\n}\n","import {\n    IObservableArray,\n    IObservableValue,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isObservableValue,\n    ObservableSet,\n    die,\n    isStringish\n} from \"../internal\"\n\nexport type ReadInterceptor<T> = (value: any) => T\n\n/** Experimental feature right now, tested indirectly via Mobx-State-Tree */\nexport function interceptReads<T>(value: IObservableValue<T>, handler: ReadInterceptor<T>): Lambda\nexport function interceptReads<T>(\n    observableArray: IObservableArray<T>,\n    handler: ReadInterceptor<T>\n): Lambda\nexport function interceptReads<K, V>(\n    observableMap: ObservableMap<K, V>,\n    handler: ReadInterceptor<V>\n): Lambda\nexport function interceptReads<V>(\n    observableSet: ObservableSet<V>,\n    handler: ReadInterceptor<V>\n): Lambda\nexport function interceptReads(\n    object: Object,\n    property: string,\n    handler: ReadInterceptor<any>\n): Lambda\nexport function interceptReads(thing, propOrHandler?, handler?): Lambda {\n    let target\n    if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n        target = getAdministration(thing)\n    } else if (isObservableObject(thing)) {\n        if (__DEV__ && !isStringish(propOrHandler)) {\n            return die(\n                `InterceptReads can only be used with a specific property, not with an object in general`\n            )\n        }\n        target = getAdministration(thing, propOrHandler)\n    } else if (__DEV__) {\n        return die(`Expected observable map, object or array as first array`)\n    }\n    if (__DEV__ && target.dehancer !== undefined) {\n        return die(`An intercept reader was already established`)\n    }\n    target.dehancer = typeof propOrHandler === \"function\" ? propOrHandler : handler\n    return () => {\n        target.dehancer = undefined\n    }\n}\n","import {\n    IArrayWillChange,\n    IArrayWillSplice,\n    IInterceptor,\n    IMapWillChange,\n    IObjectWillChange,\n    IObservableArray,\n    IObservableValue,\n    IValueWillChange,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    ObservableSet,\n    ISetWillChange,\n    isFunction\n} from \"../internal\"\n\nexport function intercept<T>(\n    value: IObservableValue<T>,\n    handler: IInterceptor<IValueWillChange<T>>\n): Lambda\nexport function intercept<T>(\n    observableArray: IObservableArray<T> | Array<T>,\n    handler: IInterceptor<IArrayWillChange<T> | IArrayWillSplice<T>>\n): Lambda\nexport function intercept<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    handler: IInterceptor<IMapWillChange<K, V>>\n): Lambda\nexport function intercept<V>(\n    observableSet: ObservableSet<V> | Set<V>,\n    handler: IInterceptor<ISetWillChange<V>>\n): Lambda\nexport function intercept<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    property: K,\n    handler: IInterceptor<IValueWillChange<V>>\n): Lambda\nexport function intercept(object: object, handler: IInterceptor<IObjectWillChange>): Lambda\nexport function intercept<T extends object, K extends keyof T>(\n    object: T,\n    property: K,\n    handler: IInterceptor<IValueWillChange<T[K]>>\n): Lambda\nexport function intercept(thing, propOrHandler?, handler?): Lambda {\n    if (isFunction(handler)) {\n        return interceptProperty(thing, propOrHandler, handler)\n    } else {\n        return interceptInterceptable(thing, propOrHandler)\n    }\n}\n\nfunction interceptInterceptable(thing, handler) {\n    return getAdministration(thing).intercept_(handler)\n}\n\nfunction interceptProperty(thing, property, handler) {\n    return getAdministration(thing, property).intercept_(handler)\n}\n","import { $mobx, getAtom, isComputedValue, isObservableObject, die, isStringish } from \"../internal\"\n\nexport function _isComputed(value, property?: PropertyKey): boolean {\n    if (property === undefined) {\n        return isComputedValue(value)\n    }\n    if (isObservableObject(value) === false) {\n        return false\n    }\n    if (!value[$mobx].values_.has(property)) {\n        return false\n    }\n    const atom = getAtom(value, property)\n    return isComputedValue(atom)\n}\n\nexport function isComputed(value: any): boolean {\n    if (__DEV__ && arguments.length > 1) {\n        return die(\n            `isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property`\n        )\n    }\n    return _isComputed(value)\n}\n\nexport function isComputedProp(value: any, propName: PropertyKey): boolean {\n    if (__DEV__ && !isStringish(propName)) {\n        return die(`isComputed expected a property name as second argument`)\n    }\n    return _isComputed(value, propName)\n}\n","import {\n    $mobx,\n    isAtom,\n    isComputedValue,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isReaction,\n    die,\n    isStringish\n} from \"../internal\"\n\nfunction _isObservable(value, property?: PropertyKey): boolean {\n    if (!value) {\n        return false\n    }\n    if (property !== undefined) {\n        if (__DEV__ && (isObservableMap(value) || isObservableArray(value))) {\n            return die(\n                \"isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.\"\n            )\n        }\n        if (isObservableObject(value)) {\n            return value[$mobx].values_.has(property)\n        }\n        return false\n    }\n    // For first check, see #701\n    return (\n        isObservableObject(value) ||\n        !!value[$mobx] ||\n        isAtom(value) ||\n        isReaction(value) ||\n        isComputedValue(value)\n    )\n}\n\nexport function isObservable(value: any): boolean {\n    if (__DEV__ && arguments.length !== 1) {\n        die(\n            `isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property`\n        )\n    }\n    return _isObservable(value)\n}\n\nexport function isObservableProp(value: any, propName: PropertyKey): boolean {\n    if (__DEV__ && !isStringish(propName)) {\n        return die(`expected a property name as second argument`)\n    }\n    return _isObservable(value, propName)\n}\n","import {\n    $mobx,\n    IIsObservableObject,\n    IObservableArray,\n    ObservableMap,\n    ObservableSet,\n    ObservableObjectAdministration,\n    endBatch,\n    isObservableArray,\n    isObservableMap,\n    isObservableSet,\n    isObservableObject,\n    startBatch,\n    die\n} from \"../internal\"\n\nexport function keys<K>(map: ObservableMap<K, any>): ReadonlyArray<K>\nexport function keys<T>(ar: IObservableArray<T>): ReadonlyArray<number>\nexport function keys<T>(set: ObservableSet<T>): ReadonlyArray<T>\nexport function keys<T extends Object>(obj: T): ReadonlyArray<PropertyKey>\nexport function keys(obj: any): any {\n    if (isObservableObject(obj)) {\n        return (\n            (obj as any as IIsObservableObject)[$mobx] as ObservableObjectAdministration\n        ).keys_()\n    }\n    if (isObservableMap(obj) || isObservableSet(obj)) {\n        return Array.from(obj.keys())\n    }\n    if (isObservableArray(obj)) {\n        return obj.map((_, index) => index)\n    }\n    die(5)\n}\n\nexport function values<K, T>(map: ObservableMap<K, T>): ReadonlyArray<T>\nexport function values<T>(set: ObservableSet<T>): ReadonlyArray<T>\nexport function values<T>(ar: IObservableArray<T>): ReadonlyArray<T>\nexport function values<T = any>(obj: T): ReadonlyArray<T extends object ? T[keyof T] : any>\nexport function values(obj: any): string[] {\n    if (isObservableObject(obj)) {\n        return keys(obj).map(key => obj[key])\n    }\n    if (isObservableMap(obj)) {\n        return keys(obj).map(key => obj.get(key))\n    }\n    if (isObservableSet(obj)) {\n        return Array.from(obj.values())\n    }\n    if (isObservableArray(obj)) {\n        return obj.slice()\n    }\n    die(6)\n}\n\nexport function entries<K, T>(map: ObservableMap<K, T>): ReadonlyArray<[K, T]>\nexport function entries<T>(set: ObservableSet<T>): ReadonlyArray<[T, T]>\nexport function entries<T>(ar: IObservableArray<T>): ReadonlyArray<[number, T]>\nexport function entries<T = any>(\n    obj: T\n): ReadonlyArray<[string, T extends object ? T[keyof T] : any]>\nexport function entries(obj: any): any {\n    if (isObservableObject(obj)) {\n        return keys(obj).map(key => [key, obj[key]])\n    }\n    if (isObservableMap(obj)) {\n        return keys(obj).map(key => [key, obj.get(key)])\n    }\n    if (isObservableSet(obj)) {\n        return Array.from(obj.entries())\n    }\n    if (isObservableArray(obj)) {\n        return obj.map((key, index) => [index, key])\n    }\n    die(7)\n}\n\nexport function set<V>(obj: ObservableMap<PropertyKey, V>, values: { [key: string]: V })\nexport function set<K, V>(obj: ObservableMap<K, V>, key: K, value: V)\nexport function set<T>(obj: ObservableSet<T>, value: T)\nexport function set<T>(obj: IObservableArray<T>, index: number, value: T)\nexport function set<T extends Object>(obj: T, values: { [key: string]: any })\nexport function set<T extends Object>(obj: T, key: PropertyKey, value: any)\nexport function set(obj: any, key: any, value?: any): void {\n    if (arguments.length === 2 && !isObservableSet(obj)) {\n        startBatch()\n        const values = key\n        try {\n            for (let key in values) {\n                set(obj, key, values[key])\n            }\n        } finally {\n            endBatch()\n        }\n        return\n    }\n    if (isObservableObject(obj)) {\n        ;(obj as any as IIsObservableObject)[$mobx].set_(key, value)\n    } else if (isObservableMap(obj)) {\n        obj.set(key, value)\n    } else if (isObservableSet(obj)) {\n        obj.add(key)\n    } else if (isObservableArray(obj)) {\n        if (typeof key !== \"number\") {\n            key = parseInt(key, 10)\n        }\n        if (key < 0) {\n            die(`Invalid index: '${key}'`)\n        }\n        startBatch()\n        if (key >= obj.length) {\n            obj.length = key + 1\n        }\n        obj[key] = value\n        endBatch()\n    } else {\n        die(8)\n    }\n}\n\nexport function remove<K, V>(obj: ObservableMap<K, V>, key: K)\nexport function remove<T>(obj: ObservableSet<T>, key: T)\nexport function remove<T>(obj: IObservableArray<T>, index: number)\nexport function remove<T extends Object>(obj: T, key: string)\nexport function remove(obj: any, key: any): void {\n    if (isObservableObject(obj)) {\n        ;(obj as any as IIsObservableObject)[$mobx].delete_(key)\n    } else if (isObservableMap(obj)) {\n        obj.delete(key)\n    } else if (isObservableSet(obj)) {\n        obj.delete(key)\n    } else if (isObservableArray(obj)) {\n        if (typeof key !== \"number\") {\n            key = parseInt(key, 10)\n        }\n        obj.splice(key, 1)\n    } else {\n        die(9)\n    }\n}\n\nexport function has<K>(obj: ObservableMap<K, any>, key: K): boolean\nexport function has<T>(obj: ObservableSet<T>, key: T): boolean\nexport function has<T>(obj: IObservableArray<T>, index: number): boolean\nexport function has<T extends Object>(obj: T, key: string): boolean\nexport function has(obj: any, key: any): boolean {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].has_(key)\n    } else if (isObservableMap(obj)) {\n        return obj.has(key)\n    } else if (isObservableSet(obj)) {\n        return obj.has(key)\n    } else if (isObservableArray(obj)) {\n        return key >= 0 && key < obj.length\n    }\n    die(10)\n}\n\nexport function get<K, V>(obj: ObservableMap<K, V>, key: K): V | undefined\nexport function get<T>(obj: IObservableArray<T>, index: number): T | undefined\nexport function get<T extends Object>(obj: T, key: string): any\nexport function get(obj: any, key: any): any {\n    if (!has(obj, key)) {\n        return undefined\n    }\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].get_(key)\n    } else if (isObservableMap(obj)) {\n        return obj.get(key)\n    } else if (isObservableArray(obj)) {\n        return obj[key]\n    }\n    die(11)\n}\n\nexport function apiDefineProperty(obj: Object, key: PropertyKey, descriptor: PropertyDescriptor) {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].defineProperty_(key, descriptor)\n    }\n    die(39)\n}\n\nexport function apiOwnKeys(obj: Object) {\n    if (isObservableObject(obj)) {\n        return (obj as any as IIsObservableObject)[$mobx].ownKeys_()\n    }\n    die(38)\n}\n","import {\n    IArrayDidChange,\n    IComputedValue,\n    IMapDidChange,\n    IObjectDidChange,\n    IObservableArray,\n    IObservableValue,\n    IValueDidChange,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    ObservableSet,\n    ISetDidChange,\n    isFunction\n} from \"../internal\"\n\nexport function observe<T>(\n    value: IObservableValue<T> | IComputedValue<T>,\n    listener: (change: IValueDidChange<T>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<T>(\n    observableArray: IObservableArray<T> | Array<T>,\n    listener: (change: IArrayDidChange<T>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<V>(\n    // ObservableSet/ObservableMap are required despite they implement Set/Map: https://github.com/mobxjs/mobx/pull/3180#discussion_r746542929\n    observableSet: ObservableSet<V> | Set<V>,\n    listener: (change: ISetDidChange<V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    listener: (change: IMapDidChange<K, V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<K, V>(\n    observableMap: ObservableMap<K, V> | Map<K, V>,\n    property: K,\n    listener: (change: IValueDidChange<V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe(\n    object: Object,\n    listener: (change: IObjectDidChange) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<T, K extends keyof T>(\n    object: T,\n    property: K,\n    listener: (change: IValueDidChange<T[K]>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe(thing, propOrCb?, cbOrFire?, fireImmediately?): Lambda {\n    if (isFunction(cbOrFire)) {\n        return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately)\n    } else {\n        return observeObservable(thing, propOrCb, cbOrFire)\n    }\n}\n\nfunction observeObservable(thing, listener, fireImmediately: boolean) {\n    return getAdministration(thing).observe_(listener, fireImmediately)\n}\n\nfunction observeObservableProperty(thing, property, listener, fireImmediately: boolean) {\n    return getAdministration(thing, property).observe_(listener, fireImmediately)\n}\n","import {\n    isObservable,\n    isObservableArray,\n    isObservableValue,\n    isObservableMap,\n    isObservableSet,\n    isComputedValue,\n    die,\n    apiOwnKeys,\n    objectPrototype\n} from \"../internal\"\n\nfunction cache<K, V>(map: Map<any, any>, key: K, value: V): V {\n    map.set(key, value)\n    return value\n}\n\nfunction toJSHelper(source, __alreadySeen: Map<any, any>) {\n    if (\n        source == null ||\n        typeof source !== \"object\" ||\n        source instanceof Date ||\n        !isObservable(source)\n    ) {\n        return source\n    }\n\n    if (isObservableValue(source) || isComputedValue(source)) {\n        return toJSHelper(source.get(), __alreadySeen)\n    }\n    if (__alreadySeen.has(source)) {\n        return __alreadySeen.get(source)\n    }\n    if (isObservableArray(source)) {\n        const res = cache(__alreadySeen, source, new Array(source.length))\n        source.forEach((value, idx) => {\n            res[idx] = toJSHelper(value, __alreadySeen)\n        })\n        return res\n    }\n    if (isObservableSet(source)) {\n        const res = cache(__alreadySeen, source, new Set())\n        source.forEach(value => {\n            res.add(toJSHelper(value, __alreadySeen))\n        })\n        return res\n    }\n    if (isObservableMap(source)) {\n        const res = cache(__alreadySeen, source, new Map())\n        source.forEach((value, key) => {\n            res.set(key, toJSHelper(value, __alreadySeen))\n        })\n        return res\n    } else {\n        // must be observable object\n        const res = cache(__alreadySeen, source, {})\n        apiOwnKeys(source).forEach((key: any) => {\n            if (objectPrototype.propertyIsEnumerable.call(source, key)) {\n                res[key] = toJSHelper(source[key], __alreadySeen)\n            }\n        })\n        return res\n    }\n}\n\n/**\n * Recursively converts an observable to it's non-observable native counterpart.\n * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.\n * Computed and other non-enumerable properties are completely ignored.\n * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.\n */\nexport function toJS<T>(source: T, options?: any): T {\n    if (__DEV__ && options) {\n        die(\"toJS no longer supports options\")\n    }\n    return toJSHelper(source, new Map())\n}\n","import { TraceMode, die, getAtom, globalState } from \"../internal\"\n\nexport function trace(thing?: any, prop?: string, enterBreakPoint?: boolean): void\nexport function trace(thing?: any, enterBreakPoint?: boolean): void\nexport function trace(enterBreakPoint?: boolean): void\nexport function trace(...args: any[]): void {\n    if (!__DEV__) {\n        return\n    }\n    let enterBreakPoint = false\n    if (typeof args[args.length - 1] === \"boolean\") {\n        enterBreakPoint = args.pop()\n    }\n    const derivation = getAtomFromArgs(args)\n    if (!derivation) {\n        return die(\n            `'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly`\n        )\n    }\n    if (derivation.isTracing_ === TraceMode.NONE) {\n        console.log(`[mobx.trace] '${derivation.name_}' tracing enabled`)\n    }\n    derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG\n}\n\nfunction getAtomFromArgs(args): any {\n    switch (args.length) {\n        case 0:\n            return globalState.trackingDerivation\n        case 1:\n            return getAtom(args[0])\n        case 2:\n            return getAtom(args[0], args[1])\n    }\n}\n","import { endBatch, startBatch } from \"../internal\"\n\n/**\n * During a transaction no views are updated until the end of the transaction.\n * The transaction will be run synchronously nonetheless.\n *\n * @param action a function that updates some reactive state\n * @returns any value that was returned by the 'action' parameter.\n */\nexport function transaction<T>(action: () => T, thisArg = undefined): T {\n    startBatch()\n    try {\n        return action.apply(thisArg)\n    } finally {\n        endBatch()\n    }\n}\n","import {\n    $mobx,\n    IReactionDisposer,\n    Lambda,\n    autorun,\n    createAction,\n    getNextId,\n    die,\n    allowStateChanges,\n    GenericAbortSignal\n} from \"../internal\"\n\nexport interface IWhenOptions {\n    name?: string\n    timeout?: number\n    onError?: (error: any) => void\n    signal?: GenericAbortSignal\n}\n\nexport function when(\n    predicate: () => boolean,\n    opts?: IWhenOptions\n): Promise<void> & { cancel(): void }\nexport function when(\n    predicate: () => boolean,\n    effect: Lambda,\n    opts?: IWhenOptions\n): IReactionDisposer\nexport function when(predicate: any, arg1?: any, arg2?: any): any {\n    if (arguments.length === 1 || (arg1 && typeof arg1 === \"object\")) {\n        return whenPromise(predicate, arg1)\n    }\n    return _when(predicate, arg1, arg2 || {})\n}\n\nfunction _when(predicate: () => boolean, effect: Lambda, opts: IWhenOptions): IReactionDisposer {\n    let timeoutHandle: any\n    if (typeof opts.timeout === \"number\") {\n        const error = new Error(\"WHEN_TIMEOUT\")\n        timeoutHandle = setTimeout(() => {\n            if (!disposer[$mobx].isDisposed) {\n                disposer()\n                if (opts.onError) {\n                    opts.onError(error)\n                } else {\n                    throw error\n                }\n            }\n        }, opts.timeout)\n    }\n\n    opts.name = __DEV__ ? opts.name || \"When@\" + getNextId() : \"When\"\n    const effectAction = createAction(\n        __DEV__ ? opts.name + \"-effect\" : \"When-effect\",\n        effect as Function\n    )\n    // eslint-disable-next-line\n    var disposer = autorun(r => {\n        // predicate should not change state\n        let cond = allowStateChanges(false, predicate)\n        if (cond) {\n            r.dispose()\n            if (timeoutHandle) {\n                clearTimeout(timeoutHandle)\n            }\n            effectAction()\n        }\n    }, opts)\n    return disposer\n}\n\nfunction whenPromise(\n    predicate: () => boolean,\n    opts?: IWhenOptions\n): Promise<void> & { cancel(): void } {\n    if (__DEV__ && opts && opts.onError) {\n        return die(`the options 'onError' and 'promise' cannot be combined`)\n    }\n    if (opts?.signal?.aborted) {\n        return Object.assign(Promise.reject(new Error(\"WHEN_ABORTED\")), { cancel: () => null })\n    }\n    let cancel\n    let abort\n    const res = new Promise((resolve, reject) => {\n        let disposer = _when(predicate, resolve as Lambda, { ...opts, onError: reject })\n        cancel = () => {\n            disposer()\n            reject(new Error(\"WHEN_CANCELLED\"))\n        }\n        abort = () => {\n            disposer()\n            reject(new Error(\"WHEN_ABORTED\"))\n        }\n        opts?.signal?.addEventListener?.(\"abort\", abort)\n    }).finally(() => opts?.signal?.removeEventListener?.(\"abort\", abort))\n    ;(res as any).cancel = cancel\n    return res as any\n}\n","import {\n    $mobx,\n    IIsObservableObject,\n    ObservableObjectAdministration,\n    warnAboutProxyRequirement,\n    assertProxies,\n    die,\n    isStringish,\n    globalState,\n    CreateObservableOptions,\n    asObservableObject\n} from \"../internal\"\n\nfunction getAdm(target): ObservableObjectAdministration {\n    return target[$mobx]\n}\n\n// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,\n// and skip either the internal values map, or the base object with its property descriptors!\nconst objectProxyTraps: ProxyHandler<any> = {\n    has(target: IIsObservableObject, name: PropertyKey): boolean {\n        if (__DEV__ && globalState.trackingDerivation) {\n            warnAboutProxyRequirement(\n                \"detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.\"\n            )\n        }\n        return getAdm(target).has_(name)\n    },\n    get(target: IIsObservableObject, name: PropertyKey): any {\n        return getAdm(target).get_(name)\n    },\n    set(target: IIsObservableObject, name: PropertyKey, value: any): boolean {\n        if (!isStringish(name)) {\n            return false\n        }\n        if (__DEV__ && !getAdm(target).values_.has(name)) {\n            warnAboutProxyRequirement(\n                \"add a new observable property through direct assignment. Use 'set' from 'mobx' instead.\"\n            )\n        }\n        // null (intercepted) -> true (success)\n        return getAdm(target).set_(name, value, true) ?? true\n    },\n    deleteProperty(target: IIsObservableObject, name: PropertyKey): boolean {\n        if (__DEV__) {\n            warnAboutProxyRequirement(\n                \"delete properties from an observable object. Use 'remove' from 'mobx' instead.\"\n            )\n        }\n        if (!isStringish(name)) {\n            return false\n        }\n        // null (intercepted) -> true (success)\n        return getAdm(target).delete_(name, true) ?? true\n    },\n    defineProperty(\n        target: IIsObservableObject,\n        name: PropertyKey,\n        descriptor: PropertyDescriptor\n    ): boolean {\n        if (__DEV__) {\n            warnAboutProxyRequirement(\n                \"define property on an observable object. Use 'defineProperty' from 'mobx' instead.\"\n            )\n        }\n        // null (intercepted) -> true (success)\n        return getAdm(target).defineProperty_(name, descriptor) ?? true\n    },\n    ownKeys(target: IIsObservableObject): ArrayLike<string | symbol> {\n        if (__DEV__ && globalState.trackingDerivation) {\n            warnAboutProxyRequirement(\n                \"iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.\"\n            )\n        }\n        return getAdm(target).ownKeys_()\n    },\n    preventExtensions(target) {\n        die(13)\n    }\n}\n\nexport function asDynamicObservableObject(\n    target: any,\n    options?: CreateObservableOptions\n): IIsObservableObject {\n    assertProxies()\n    target = asObservableObject(target, options)\n    return (target[$mobx].proxy_ ??= new Proxy(target, objectProxyTraps))\n}\n","import { Lambda, once, untrackedEnd, untrackedStart, die } from \"../internal\"\n\nexport type IInterceptor<T> = (change: T) => T | null\n\nexport interface IInterceptable<T> {\n    interceptors_: IInterceptor<T>[] | undefined\n}\n\nexport function hasInterceptors(interceptable: IInterceptable<any>) {\n    return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0\n}\n\nexport function registerInterceptor<T>(\n    interceptable: IInterceptable<T>,\n    handler: IInterceptor<T>\n): Lambda {\n    const interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = [])\n    interceptors.push(handler)\n    return once(() => {\n        const idx = interceptors.indexOf(handler)\n        if (idx !== -1) {\n            interceptors.splice(idx, 1)\n        }\n    })\n}\n\nexport function interceptChange<T>(\n    interceptable: IInterceptable<T | null>,\n    change: T | null\n): T | null {\n    const prevU = untrackedStart()\n    try {\n        // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n        const interceptors = [...(interceptable.interceptors_ || [])]\n        for (let i = 0, l = interceptors.length; i < l; i++) {\n            change = interceptors[i](change)\n            if (change && !(change as any).type) {\n                die(14)\n            }\n            if (!change) {\n                break\n            }\n        }\n        return change\n    } finally {\n        untrackedEnd(prevU)\n    }\n}\n","import { Lambda, once, untrackedEnd, untrackedStart } from \"../internal\"\n\nexport interface IListenable {\n    changeListeners_: Function[] | undefined\n}\n\nexport function hasListeners(listenable: IListenable) {\n    return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0\n}\n\nexport function registerListener(listenable: IListenable, handler: Function): Lambda {\n    const listeners = listenable.changeListeners_ || (listenable.changeListeners_ = [])\n    listeners.push(handler)\n    return once(() => {\n        const idx = listeners.indexOf(handler)\n        if (idx !== -1) {\n            listeners.splice(idx, 1)\n        }\n    })\n}\n\nexport function notifyListeners<T>(listenable: IListenable, change: T) {\n    const prevU = untrackedStart()\n    let listeners = listenable.changeListeners_\n    if (!listeners) {\n        return\n    }\n    listeners = listeners.slice()\n    for (let i = 0, l = listeners.length; i < l; i++) {\n        listeners[i](change)\n    }\n    untrackedEnd(prevU)\n}\n","import {\n    $mobx,\n    asObservableObject,\n    AnnotationsMap,\n    CreateObservableOptions,\n    ObservableObjectAdministration,\n    collectStoredAnnotations,\n    isPlainObject,\n    isObservableObject,\n    die,\n    ownKeys,\n    extendObservable,\n    addHiddenProp,\n    storedAnnotationsSymbol,\n    initObservable\n} from \"../internal\"\n\n// Hack based on https://github.com/Microsoft/TypeScript/issues/14829#issuecomment-322267089\n// We need this, because otherwise, AdditionalKeys is going to be inferred to be any\n// set of superfluous keys. But, we rather want to get a compile error unless AdditionalKeys is\n// _explicity_ passed as generic argument\n// Fixes: https://github.com/mobxjs/mobx/issues/2325#issuecomment-691070022\ntype NoInfer<T> = [T][T extends any ? 0 : never]\n\ntype MakeObservableOptions = Omit<CreateObservableOptions, \"proxy\">\n\nexport function makeObservable<T extends object, AdditionalKeys extends PropertyKey = never>(\n    target: T,\n    annotations?: AnnotationsMap<T, NoInfer<AdditionalKeys>>,\n    options?: MakeObservableOptions\n): T {\n    initObservable(() => {\n        const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n        if (__DEV__ && annotations && target[storedAnnotationsSymbol]) {\n            die(\n                `makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.`\n            )\n        }\n        // Default to decorators\n        annotations ??= collectStoredAnnotations(target)\n\n        // Annotate\n        ownKeys(annotations).forEach(key => adm.make_(key, annotations![key]))\n    })\n    return target\n}\n\n// proto[keysSymbol] = new Set<PropertyKey>()\nconst keysSymbol = Symbol(\"mobx-keys\")\n\nexport function makeAutoObservable<T extends object, AdditionalKeys extends PropertyKey = never>(\n    target: T,\n    overrides?: AnnotationsMap<T, NoInfer<AdditionalKeys>>,\n    options?: MakeObservableOptions\n): T {\n    if (__DEV__) {\n        if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) {\n            die(`'makeAutoObservable' can only be used for classes that don't have a superclass`)\n        }\n        if (isObservableObject(target)) {\n            die(`makeAutoObservable can only be used on objects not already made observable`)\n        }\n    }\n\n    // Optimization: avoid visiting protos\n    // Assumes that annotation.make_/.extend_ works the same for plain objects\n    if (isPlainObject(target)) {\n        return extendObservable(target, target, overrides, options)\n    }\n\n    initObservable(() => {\n        const adm: ObservableObjectAdministration = asObservableObject(target, options)[$mobx]\n\n        // Optimization: cache keys on proto\n        // Assumes makeAutoObservable can be called only once per object and can't be used in subclass\n        if (!target[keysSymbol]) {\n            const proto = Object.getPrototypeOf(target)\n            const keys = new Set([...ownKeys(target), ...ownKeys(proto)])\n            keys.delete(\"constructor\")\n            keys.delete($mobx)\n            addHiddenProp(proto, keysSymbol, keys)\n        }\n\n        target[keysSymbol].forEach(key =>\n            adm.make_(\n                key,\n                // must pass \"undefined\" for { key: undefined }\n                !overrides ? true : key in overrides ? overrides[key] : true\n            )\n        )\n    })\n\n    return target\n}\n","import {\n    $mobx,\n    Atom,\n    EMPTY_ARRAY,\n    IAtom,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    addHiddenFinalProp,\n    checkIfStateModificationsAreAllowed,\n    createInstanceofPredicate,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isObject,\n    isSpyEnabled,\n    notifyListeners,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    assertProxies,\n    reserveArrayBuffer,\n    hasProp,\n    die,\n    globalState,\n    initObservable\n} from \"../internal\"\n\nconst SPLICE = \"splice\"\nexport const UPDATE = \"update\"\nexport const MAX_SPLICE_SIZE = 10000 // See e.g. https://github.com/mobxjs/mobx/issues/859\n\nexport interface IObservableArray<T = any> extends Array<T> {\n    spliceWithArray(index: number, deleteCount?: number, newItems?: T[]): T[]\n    clear(): T[]\n    replace(newItems: T[]): T[]\n    remove(value: T): boolean\n    toJSON(): T[]\n}\n\ninterface IArrayBaseChange<T> {\n    object: IObservableArray<T>\n    observableKind: \"array\"\n    debugObjectName: string\n    index: number\n}\n\nexport type IArrayDidChange<T = any> = IArrayUpdate<T> | IArraySplice<T>\n\nexport interface IArrayUpdate<T = any> extends IArrayBaseChange<T> {\n    type: \"update\"\n    newValue: T\n    oldValue: T\n}\n\nexport interface IArraySplice<T = any> extends IArrayBaseChange<T> {\n    type: \"splice\"\n    added: T[]\n    addedCount: number\n    removed: T[]\n    removedCount: number\n}\n\nexport interface IArrayWillChange<T = any> {\n    object: IObservableArray<T>\n    index: number\n    type: \"update\"\n    newValue: T\n}\n\nexport interface IArrayWillSplice<T = any> {\n    object: IObservableArray<T>\n    index: number\n    type: \"splice\"\n    added: T[]\n    removedCount: number\n}\n\nconst arrayTraps = {\n    get(target, name) {\n        const adm: ObservableArrayAdministration = target[$mobx]\n        if (name === $mobx) {\n            return adm\n        }\n        if (name === \"length\") {\n            return adm.getArrayLength_()\n        }\n        if (typeof name === \"string\" && !isNaN(name as any)) {\n            return adm.get_(parseInt(name))\n        }\n        if (hasProp(arrayExtensions, name)) {\n            return arrayExtensions[name]\n        }\n        return target[name]\n    },\n    set(target, name, value): boolean {\n        const adm: ObservableArrayAdministration = target[$mobx]\n        if (name === \"length\") {\n            adm.setArrayLength_(value)\n        }\n        if (typeof name === \"symbol\" || isNaN(name)) {\n            target[name] = value\n        } else {\n            // numeric string\n            adm.set_(parseInt(name), value)\n        }\n        return true\n    },\n    preventExtensions() {\n        die(15)\n    }\n}\n\nexport class ObservableArrayAdministration\n    implements IInterceptable<IArrayWillChange<any> | IArrayWillSplice<any>>, IListenable\n{\n    atom_: IAtom\n    readonly values_: any[] = [] // this is the prop that gets proxied, so can't replace it!\n    interceptors_\n    changeListeners_\n    enhancer_: (newV: any, oldV: any | undefined) => any\n    dehancer: any\n    proxy_!: IObservableArray<any>\n    lastKnownLength_ = 0\n\n    constructor(\n        name = __DEV__ ? \"ObservableArray@\" + getNextId() : \"ObservableArray\",\n        enhancer: IEnhancer<any>,\n        public owned_: boolean,\n        public legacyMode_: boolean\n    ) {\n        this.atom_ = new Atom(name)\n        this.enhancer_ = (newV, oldV) =>\n            enhancer(newV, oldV, __DEV__ ? name + \"[..]\" : \"ObservableArray[..]\")\n    }\n\n    dehanceValue_(value: any): any {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    dehanceValues_(values: any[]): any[] {\n        if (this.dehancer !== undefined && values.length > 0) {\n            return values.map(this.dehancer) as any\n        }\n        return values\n    }\n\n    intercept_(handler: IInterceptor<IArrayWillChange<any> | IArrayWillSplice<any>>): Lambda {\n        return registerInterceptor<IArrayWillChange<any> | IArrayWillSplice<any>>(this, handler)\n    }\n\n    observe_(\n        listener: (changeData: IArrayDidChange<any>) => void,\n        fireImmediately = false\n    ): Lambda {\n        if (fireImmediately) {\n            listener(<IArraySplice<any>>{\n                observableKind: \"array\",\n                object: this.proxy_ as any,\n                debugObjectName: this.atom_.name_,\n                type: \"splice\",\n                index: 0,\n                added: this.values_.slice(),\n                addedCount: this.values_.length,\n                removed: [],\n                removedCount: 0\n            })\n        }\n        return registerListener(this, listener)\n    }\n\n    getArrayLength_(): number {\n        this.atom_.reportObserved()\n        return this.values_.length\n    }\n\n    setArrayLength_(newLength: number) {\n        if (typeof newLength !== \"number\" || isNaN(newLength) || newLength < 0) {\n            die(\"Out of range: \" + newLength)\n        }\n        let currentLength = this.values_.length\n        if (newLength === currentLength) {\n            return\n        } else if (newLength > currentLength) {\n            const newItems = new Array(newLength - currentLength)\n            for (let i = 0; i < newLength - currentLength; i++) {\n                newItems[i] = undefined\n            } // No Array.fill everywhere...\n            this.spliceWithArray_(currentLength, 0, newItems)\n        } else {\n            this.spliceWithArray_(newLength, currentLength - newLength)\n        }\n    }\n\n    updateArrayLength_(oldLength: number, delta: number) {\n        if (oldLength !== this.lastKnownLength_) {\n            die(16)\n        }\n        this.lastKnownLength_ += delta\n        if (this.legacyMode_ && delta > 0) {\n            reserveArrayBuffer(oldLength + delta + 1)\n        }\n    }\n\n    spliceWithArray_(index: number, deleteCount?: number, newItems?: any[]): any[] {\n        checkIfStateModificationsAreAllowed(this.atom_)\n        const length = this.values_.length\n\n        if (index === undefined) {\n            index = 0\n        } else if (index > length) {\n            index = length\n        } else if (index < 0) {\n            index = Math.max(0, length + index)\n        }\n\n        if (arguments.length === 1) {\n            deleteCount = length - index\n        } else if (deleteCount === undefined || deleteCount === null) {\n            deleteCount = 0\n        } else {\n            deleteCount = Math.max(0, Math.min(deleteCount, length - index))\n        }\n\n        if (newItems === undefined) {\n            newItems = EMPTY_ARRAY\n        }\n\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IArrayWillSplice<any>>(this as any, {\n                object: this.proxy_ as any,\n                type: SPLICE,\n                index,\n                removedCount: deleteCount,\n                added: newItems\n            })\n            if (!change) {\n                return EMPTY_ARRAY\n            }\n            deleteCount = change.removedCount\n            newItems = change.added\n        }\n\n        newItems =\n            newItems.length === 0 ? newItems : newItems.map(v => this.enhancer_(v, undefined))\n        if (this.legacyMode_ || __DEV__) {\n            const lengthDelta = newItems.length - deleteCount\n            this.updateArrayLength_(length, lengthDelta) // checks if internal array wasn't modified\n        }\n        const res = this.spliceItemsIntoValues_(index, deleteCount, newItems)\n\n        if (deleteCount !== 0 || newItems.length !== 0) {\n            this.notifyArraySplice_(index, newItems, res)\n        }\n        return this.dehanceValues_(res)\n    }\n\n    spliceItemsIntoValues_(index: number, deleteCount: number, newItems: any[]): any[] {\n        if (newItems.length < MAX_SPLICE_SIZE) {\n            return this.values_.splice(index, deleteCount, ...newItems)\n        } else {\n            // The items removed by the splice\n            const res = this.values_.slice(index, index + deleteCount)\n            // The items that that should remain at the end of the array\n            let oldItems = this.values_.slice(index + deleteCount)\n            // New length is the previous length + addition count - deletion count\n            this.values_.length += newItems.length - deleteCount\n            for (let i = 0; i < newItems.length; i++) {\n                this.values_[index + i] = newItems[i]\n            }\n            for (let i = 0; i < oldItems.length; i++) {\n                this.values_[index + newItems.length + i] = oldItems[i]\n            }\n            return res\n        }\n    }\n\n    notifyArrayChildUpdate_(index: number, newValue: any, oldValue: any) {\n        const notifySpy = !this.owned_ && isSpyEnabled()\n        const notify = hasListeners(this)\n        const change: IArrayDidChange | null =\n            notify || notifySpy\n                ? ({\n                      observableKind: \"array\",\n                      object: this.proxy_,\n                      type: UPDATE,\n                      debugObjectName: this.atom_.name_,\n                      index,\n                      newValue,\n                      oldValue\n                  } as const)\n                : null\n\n        // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't\n        // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n        if (__DEV__ && notifySpy) {\n            spyReportStart(change!)\n        }\n        this.atom_.reportChanged()\n        if (notify) {\n            notifyListeners(this, change)\n        }\n        if (__DEV__ && notifySpy) {\n            spyReportEnd()\n        }\n    }\n\n    notifyArraySplice_(index: number, added: any[], removed: any[]) {\n        const notifySpy = !this.owned_ && isSpyEnabled()\n        const notify = hasListeners(this)\n        const change: IArraySplice | null =\n            notify || notifySpy\n                ? ({\n                      observableKind: \"array\",\n                      object: this.proxy_,\n                      debugObjectName: this.atom_.name_,\n                      type: SPLICE,\n                      index,\n                      removed,\n                      added,\n                      removedCount: removed.length,\n                      addedCount: added.length\n                  } as const)\n                : null\n\n        if (__DEV__ && notifySpy) {\n            spyReportStart(change!)\n        }\n        this.atom_.reportChanged()\n        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n        if (notify) {\n            notifyListeners(this, change)\n        }\n        if (__DEV__ && notifySpy) {\n            spyReportEnd()\n        }\n    }\n\n    get_(index: number): any | undefined {\n        if (this.legacyMode_ && index >= this.values_.length) {\n            console.warn(\n                __DEV__\n                    ? `[mobx.array] Attempt to read an array index (${index}) that is out of bounds (${this.values_.length}). Please check length first. Out of bound indices will not be tracked by MobX`\n                    : `[mobx] Out of bounds read: ${index}`\n            )\n            return undefined\n        }\n        this.atom_.reportObserved()\n        return this.dehanceValue_(this.values_[index])\n    }\n\n    set_(index: number, newValue: any) {\n        const values = this.values_\n        if (this.legacyMode_ && index > values.length) {\n            // out of bounds\n            die(17, index, values.length)\n        }\n        if (index < values.length) {\n            // update at index in range\n            checkIfStateModificationsAreAllowed(this.atom_)\n            const oldValue = values[index]\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IArrayWillChange<any>>(this as any, {\n                    type: UPDATE,\n                    object: this.proxy_ as any, // since \"this\" is the real array we need to pass its proxy\n                    index,\n                    newValue\n                })\n                if (!change) {\n                    return\n                }\n                newValue = change.newValue\n            }\n            newValue = this.enhancer_(newValue, oldValue)\n            const changed = newValue !== oldValue\n            if (changed) {\n                values[index] = newValue\n                this.notifyArrayChildUpdate_(index, newValue, oldValue)\n            }\n        } else {\n            // For out of bound index, we don't create an actual sparse array,\n            // but rather fill the holes with undefined (same as setArrayLength_).\n            // This could be considered a bug.\n            const newItems = new Array(index + 1 - values.length)\n            for (let i = 0; i < newItems.length - 1; i++) {\n                newItems[i] = undefined\n            } // No Array.fill everywhere...\n            newItems[newItems.length - 1] = newValue\n            this.spliceWithArray_(values.length, 0, newItems)\n        }\n    }\n}\n\nexport function createObservableArray<T>(\n    initialValues: T[] | undefined,\n    enhancer: IEnhancer<T>,\n    name = __DEV__ ? \"ObservableArray@\" + getNextId() : \"ObservableArray\",\n    owned = false\n): IObservableArray<T> {\n    assertProxies()\n    return initObservable(() => {\n        const adm = new ObservableArrayAdministration(name, enhancer, owned, false)\n        addHiddenFinalProp(adm.values_, $mobx, adm)\n        const proxy = new Proxy(adm.values_, arrayTraps) as any\n        adm.proxy_ = proxy\n        if (initialValues && initialValues.length) {\n            adm.spliceWithArray_(0, 0, initialValues)\n        }\n        return proxy\n    })\n}\n\n// eslint-disable-next-line\nexport var arrayExtensions = {\n    clear(): any[] {\n        return this.splice(0)\n    },\n\n    replace(newItems: any[]) {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        return adm.spliceWithArray_(0, adm.values_.length, newItems)\n    },\n\n    // Used by JSON.stringify\n    toJSON(): any[] {\n        return this.slice()\n    },\n\n    /*\n     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\n     * since these functions alter the inner structure of the array, the have side effects.\n     * Because the have side effects, they should not be used in computed function,\n     * and for that reason the do not call dependencyState.notifyObserved\n     */\n    splice(index: number, deleteCount?: number, ...newItems: any[]): any[] {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        switch (arguments.length) {\n            case 0:\n                return []\n            case 1:\n                return adm.spliceWithArray_(index)\n            case 2:\n                return adm.spliceWithArray_(index, deleteCount)\n        }\n        return adm.spliceWithArray_(index, deleteCount, newItems)\n    },\n\n    spliceWithArray(index: number, deleteCount?: number, newItems?: any[]): any[] {\n        return (this[$mobx] as ObservableArrayAdministration).spliceWithArray_(\n            index,\n            deleteCount,\n            newItems\n        )\n    },\n\n    push(...items: any[]): number {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.spliceWithArray_(adm.values_.length, 0, items)\n        return adm.values_.length\n    },\n\n    pop() {\n        return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0]\n    },\n\n    shift() {\n        return this.splice(0, 1)[0]\n    },\n\n    unshift(...items: any[]): number {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.spliceWithArray_(0, 0, items)\n        return adm.values_.length\n    },\n\n    reverse(): any[] {\n        // reverse by default mutates in place before returning the result\n        // which makes it both a 'derivation' and a 'mutation'.\n        if (globalState.trackingDerivation) {\n            die(37, \"reverse\")\n        }\n        this.replace(this.slice().reverse())\n        return this\n    },\n\n    sort(): any[] {\n        // sort by default mutates in place before returning the result\n        // which goes against all good practices. Let's not change the array in place!\n        if (globalState.trackingDerivation) {\n            die(37, \"sort\")\n        }\n        const copy = this.slice()\n        copy.sort.apply(copy, arguments)\n        this.replace(copy)\n        return this\n    },\n\n    remove(value: any): boolean {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        const idx = adm.dehanceValues_(adm.values_).indexOf(value)\n        if (idx > -1) {\n            this.splice(idx, 1)\n            return true\n        }\n        return false\n    }\n}\n\n/**\n * Wrap function from prototype\n * Without this, everything works as well, but this works\n * faster as everything works on unproxied values\n */\naddArrayExtension(\"at\", simpleFunc)\naddArrayExtension(\"concat\", simpleFunc)\naddArrayExtension(\"flat\", simpleFunc)\naddArrayExtension(\"includes\", simpleFunc)\naddArrayExtension(\"indexOf\", simpleFunc)\naddArrayExtension(\"join\", simpleFunc)\naddArrayExtension(\"lastIndexOf\", simpleFunc)\naddArrayExtension(\"slice\", simpleFunc)\naddArrayExtension(\"toString\", simpleFunc)\naddArrayExtension(\"toLocaleString\", simpleFunc)\naddArrayExtension(\"toSorted\", simpleFunc)\naddArrayExtension(\"toSpliced\", simpleFunc)\naddArrayExtension(\"with\", simpleFunc)\n// map\naddArrayExtension(\"every\", mapLikeFunc)\naddArrayExtension(\"filter\", mapLikeFunc)\naddArrayExtension(\"find\", mapLikeFunc)\naddArrayExtension(\"findIndex\", mapLikeFunc)\naddArrayExtension(\"findLast\", mapLikeFunc)\naddArrayExtension(\"findLastIndex\", mapLikeFunc)\naddArrayExtension(\"flatMap\", mapLikeFunc)\naddArrayExtension(\"forEach\", mapLikeFunc)\naddArrayExtension(\"map\", mapLikeFunc)\naddArrayExtension(\"some\", mapLikeFunc)\naddArrayExtension(\"toReversed\", mapLikeFunc)\n// reduce\naddArrayExtension(\"reduce\", reduceLikeFunc)\naddArrayExtension(\"reduceRight\", reduceLikeFunc)\n\nfunction addArrayExtension(funcName, funcFactory) {\n    if (typeof Array.prototype[funcName] === \"function\") {\n        arrayExtensions[funcName] = funcFactory(funcName)\n    }\n}\n\n// Report and delegate to dehanced array\nfunction simpleFunc(funcName) {\n    return function () {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom_.reportObserved()\n        const dehancedValues = adm.dehanceValues_(adm.values_)\n        return dehancedValues[funcName].apply(dehancedValues, arguments)\n    }\n}\n\n// Make sure callbacks receive correct array arg #2326\nfunction mapLikeFunc(funcName) {\n    return function (callback, thisArg) {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom_.reportObserved()\n        const dehancedValues = adm.dehanceValues_(adm.values_)\n        return dehancedValues[funcName]((element, index) => {\n            return callback.call(thisArg, element, index, this)\n        })\n    }\n}\n\n// Make sure callbacks receive correct array arg #2326\nfunction reduceLikeFunc(funcName) {\n    return function () {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom_.reportObserved()\n        const dehancedValues = adm.dehanceValues_(adm.values_)\n        // #2432 - reduce behavior depends on arguments.length\n        const callback = arguments[0]\n        arguments[0] = (accumulator, currentValue, index) => {\n            return callback(accumulator, currentValue, index, this)\n        }\n        return dehancedValues[funcName].apply(dehancedValues, arguments)\n    }\n}\n\nconst isObservableArrayAdministration = createInstanceofPredicate(\n    \"ObservableArrayAdministration\",\n    ObservableArrayAdministration\n)\n\nexport function isObservableArray(thing): thing is IObservableArray<any> {\n    return isObject(thing) && isObservableArrayAdministration(thing[$mobx])\n}\n","import {\n    $mobx,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    ObservableValue,\n    checkIfStateModificationsAreAllowed,\n    createAtom,\n    createInstanceofPredicate,\n    deepEnhancer,\n    getNextId,\n    getPlainObjectKeys,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isES6Map,\n    isPlainES6Map,\n    isPlainObject,\n    isSpyEnabled,\n    makeIterable,\n    notifyListeners,\n    referenceEnhancer,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    stringifyKey,\n    transaction,\n    untracked,\n    onBecomeUnobserved,\n    globalState,\n    die,\n    isFunction,\n    UPDATE,\n    IAtom,\n    PureSpyEvent,\n    initObservable\n} from \"../internal\"\n\nexport interface IKeyValueMap<V = any> {\n    [key: string]: V\n}\n\nexport type IMapEntry<K = any, V = any> = [K, V]\nexport type IReadonlyMapEntry<K = any, V = any> = readonly [K, V]\nexport type IMapEntries<K = any, V = any> = IMapEntry<K, V>[]\nexport type IReadonlyMapEntries<K = any, V = any> = IReadonlyMapEntry<K, V>[]\n\nexport type IMapDidChange<K = any, V = any> = { observableKind: \"map\"; debugObjectName: string } & (\n    | {\n          object: ObservableMap<K, V>\n          name: K // actual the key or index, but this is based on the ancient .observe proposal for consistency\n          type: \"update\"\n          newValue: V\n          oldValue: V\n      }\n    | {\n          object: ObservableMap<K, V>\n          name: K\n          type: \"add\"\n          newValue: V\n      }\n    | {\n          object: ObservableMap<K, V>\n          name: K\n          type: \"delete\"\n          oldValue: V\n      }\n)\n\nexport interface IMapWillChange<K = any, V = any> {\n    object: ObservableMap<K, V>\n    type: \"update\" | \"add\" | \"delete\"\n    name: K\n    newValue?: V\n}\n\nconst ObservableMapMarker = {}\n\nexport const ADD = \"add\"\nexport const DELETE = \"delete\"\n\nexport type IObservableMapInitialValues<K = any, V = any> =\n    | IMapEntries<K, V>\n    | IReadonlyMapEntries<K, V>\n    | IKeyValueMap<V>\n    | Map<K, V>\n\n// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n// But: https://github.com/mobxjs/mobx/issues/1556\nexport class ObservableMap<K = any, V = any>\n    implements Map<K, V>, IInterceptable<IMapWillChange<K, V>>, IListenable\n{\n    [$mobx] = ObservableMapMarker\n    data_!: Map<K, ObservableValue<V>>\n    hasMap_!: Map<K, ObservableValue<boolean>> // hasMap, not hashMap >-).\n    keysAtom_!: IAtom\n    interceptors_\n    changeListeners_\n    dehancer: any\n\n    constructor(\n        initialData?: IObservableMapInitialValues<K, V>,\n        public enhancer_: IEnhancer<V> = deepEnhancer,\n        public name_ = __DEV__ ? \"ObservableMap@\" + getNextId() : \"ObservableMap\"\n    ) {\n        if (!isFunction(Map)) {\n            die(18)\n        }\n        initObservable(() => {\n            this.keysAtom_ = createAtom(__DEV__ ? `${this.name_}.keys()` : \"ObservableMap.keys()\")\n            this.data_ = new Map()\n            this.hasMap_ = new Map()\n            if (initialData) {\n                this.merge(initialData)\n            }\n        })\n    }\n\n    private has_(key: K): boolean {\n        return this.data_.has(key)\n    }\n\n    has(key: K): boolean {\n        if (!globalState.trackingDerivation) {\n            return this.has_(key)\n        }\n\n        let entry = this.hasMap_.get(key)\n        if (!entry) {\n            const newEntry = (entry = new ObservableValue(\n                this.has_(key),\n                referenceEnhancer,\n                __DEV__ ? `${this.name_}.${stringifyKey(key)}?` : \"ObservableMap.key?\",\n                false\n            ))\n            this.hasMap_.set(key, newEntry)\n            onBecomeUnobserved(newEntry, () => this.hasMap_.delete(key))\n        }\n\n        return entry.get()\n    }\n\n    set(key: K, value: V) {\n        const hasKey = this.has_(key)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IMapWillChange<K, V>>(this, {\n                type: hasKey ? UPDATE : ADD,\n                object: this,\n                newValue: value,\n                name: key\n            })\n            if (!change) {\n                return this\n            }\n            value = change.newValue!\n        }\n        if (hasKey) {\n            this.updateValue_(key, value)\n        } else {\n            this.addValue_(key, value)\n        }\n        return this\n    }\n\n    delete(key: K): boolean {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IMapWillChange<K, V>>(this, {\n                type: DELETE,\n                object: this,\n                name: key\n            })\n            if (!change) {\n                return false\n            }\n        }\n        if (this.has_(key)) {\n            const notifySpy = isSpyEnabled()\n            const notify = hasListeners(this)\n            const change: IMapDidChange<K, V> | null =\n                notify || notifySpy\n                    ? {\n                          observableKind: \"map\",\n                          debugObjectName: this.name_,\n                          type: DELETE,\n                          object: this,\n                          oldValue: (<any>this.data_.get(key)).value_,\n                          name: key\n                      }\n                    : null\n\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change! as PureSpyEvent)\n            } // TODO fix type\n            transaction(() => {\n                this.keysAtom_.reportChanged()\n                this.hasMap_.get(key)?.setNewValue_(false)\n                const observable = this.data_.get(key)!\n                observable.setNewValue_(undefined as any)\n                this.data_.delete(key)\n            })\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n            return true\n        }\n        return false\n    }\n\n    private updateValue_(key: K, newValue: V | undefined) {\n        const observable = this.data_.get(key)!\n        newValue = (observable as any).prepareNewValue_(newValue) as V\n        if (newValue !== globalState.UNCHANGED) {\n            const notifySpy = isSpyEnabled()\n            const notify = hasListeners(this)\n            const change: IMapDidChange<K, V> | null =\n                notify || notifySpy\n                    ? {\n                          observableKind: \"map\",\n                          debugObjectName: this.name_,\n                          type: UPDATE,\n                          object: this,\n                          oldValue: (observable as any).value_,\n                          name: key,\n                          newValue\n                      }\n                    : null\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change! as PureSpyEvent)\n            } // TODO fix type\n            observable.setNewValue_(newValue as V)\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n    }\n\n    private addValue_(key: K, newValue: V) {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        transaction(() => {\n            const observable = new ObservableValue(\n                newValue,\n                this.enhancer_,\n                __DEV__ ? `${this.name_}.${stringifyKey(key)}` : \"ObservableMap.key\",\n                false\n            )\n            this.data_.set(key, observable)\n            newValue = (observable as any).value_ // value might have been changed\n            this.hasMap_.get(key)?.setNewValue_(true)\n            this.keysAtom_.reportChanged()\n        })\n        const notifySpy = isSpyEnabled()\n        const notify = hasListeners(this)\n        const change: IMapDidChange<K, V> | null =\n            notify || notifySpy\n                ? {\n                      observableKind: \"map\",\n                      debugObjectName: this.name_,\n                      type: ADD,\n                      object: this,\n                      name: key,\n                      newValue\n                  }\n                : null\n        if (__DEV__ && notifySpy) {\n            spyReportStart(change! as PureSpyEvent)\n        } // TODO fix type\n        if (notify) {\n            notifyListeners(this, change)\n        }\n        if (__DEV__ && notifySpy) {\n            spyReportEnd()\n        }\n    }\n\n    get(key: K): V | undefined {\n        if (this.has(key)) {\n            return this.dehanceValue_(this.data_.get(key)!.get())\n        }\n        return this.dehanceValue_(undefined)\n    }\n\n    private dehanceValue_<X extends V | undefined>(value: X): X {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    keys(): IterableIterator<K> {\n        this.keysAtom_.reportObserved()\n        return this.data_.keys()\n    }\n\n    values(): IterableIterator<V> {\n        const self = this\n        const keys = this.keys()\n        return makeIterable({\n            next() {\n                const { done, value } = keys.next()\n                return {\n                    done,\n                    value: done ? (undefined as any) : self.get(value)\n                }\n            }\n        })\n    }\n\n    entries(): IterableIterator<IMapEntry<K, V>> {\n        const self = this\n        const keys = this.keys()\n        return makeIterable({\n            next() {\n                const { done, value } = keys.next()\n                return {\n                    done,\n                    value: done ? (undefined as any) : ([value, self.get(value)!] as [K, V])\n                }\n            }\n        })\n    }\n\n    [Symbol.iterator]() {\n        return this.entries()\n    }\n\n    forEach(callback: (value: V, key: K, object: Map<K, V>) => void, thisArg?) {\n        for (const [key, value] of this) {\n            callback.call(thisArg, value, key, this)\n        }\n    }\n\n    /** Merge another object into this object, returns this. */\n    merge(other?: IObservableMapInitialValues<K, V>): ObservableMap<K, V> {\n        if (isObservableMap(other)) {\n            other = new Map(other)\n        }\n        transaction(() => {\n            if (isPlainObject(other)) {\n                getPlainObjectKeys(other).forEach((key: any) =>\n                    this.set(key as K, (other as IKeyValueMap)[key])\n                )\n            } else if (Array.isArray(other)) {\n                other.forEach(([key, value]) => this.set(key, value))\n            } else if (isES6Map(other)) {\n                if (!isPlainES6Map(other)) {\n                    die(19, other)\n                }\n                other.forEach((value, key) => this.set(key, value))\n            } else if (other !== null && other !== undefined) {\n                die(20, other)\n            }\n        })\n        return this\n    }\n\n    clear() {\n        transaction(() => {\n            untracked(() => {\n                for (const key of this.keys()) {\n                    this.delete(key)\n                }\n            })\n        })\n    }\n\n    replace(values: IObservableMapInitialValues<K, V>): ObservableMap<K, V> {\n        // Implementation requirements:\n        // - respect ordering of replacement map\n        // - allow interceptors to run and potentially prevent individual operations\n        // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)\n        // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n        // - note that result map may differ from replacement map due to the interceptors\n        transaction(() => {\n            // Convert to map so we can do quick key lookups\n            const replacementMap = convertToMap(values)\n            const orderedData = new Map()\n            // Used for optimization\n            let keysReportChangedCalled = false\n            // Delete keys that don't exist in replacement map\n            // if the key deletion is prevented by interceptor\n            // add entry at the beginning of the result map\n            for (const key of this.data_.keys()) {\n                // Concurrently iterating/deleting keys\n                // iterator should handle this correctly\n                if (!replacementMap.has(key)) {\n                    const deleted = this.delete(key)\n                    // Was the key removed?\n                    if (deleted) {\n                        // _keysAtom.reportChanged() was already called\n                        keysReportChangedCalled = true\n                    } else {\n                        // Delete prevented by interceptor\n                        const value = this.data_.get(key)\n                        orderedData.set(key, value)\n                    }\n                }\n            }\n            // Merge entries\n            for (const [key, value] of replacementMap.entries()) {\n                // We will want to know whether a new key is added\n                const keyExisted = this.data_.has(key)\n                // Add or update value\n                this.set(key, value)\n                // The addition could have been prevent by interceptor\n                if (this.data_.has(key)) {\n                    // The update could have been prevented by interceptor\n                    // and also we want to preserve existing values\n                    // so use value from _data map (instead of replacement map)\n                    const value = this.data_.get(key)\n                    orderedData.set(key, value)\n                    // Was a new key added?\n                    if (!keyExisted) {\n                        // _keysAtom.reportChanged() was already called\n                        keysReportChangedCalled = true\n                    }\n                }\n            }\n            // Check for possible key order change\n            if (!keysReportChangedCalled) {\n                if (this.data_.size !== orderedData.size) {\n                    // If size differs, keys are definitely modified\n                    this.keysAtom_.reportChanged()\n                } else {\n                    const iter1 = this.data_.keys()\n                    const iter2 = orderedData.keys()\n                    let next1 = iter1.next()\n                    let next2 = iter2.next()\n                    while (!next1.done) {\n                        if (next1.value !== next2.value) {\n                            this.keysAtom_.reportChanged()\n                            break\n                        }\n                        next1 = iter1.next()\n                        next2 = iter2.next()\n                    }\n                }\n            }\n            // Use correctly ordered map\n            this.data_ = orderedData\n        })\n        return this\n    }\n\n    get size(): number {\n        this.keysAtom_.reportObserved()\n        return this.data_.size\n    }\n\n    toString(): string {\n        return \"[object ObservableMap]\"\n    }\n\n    toJSON(): [K, V][] {\n        return Array.from(this)\n    }\n\n    get [Symbol.toStringTag]() {\n        return \"Map\"\n    }\n\n    /**\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n     * for callback details\n     */\n    observe_(listener: (changes: IMapDidChange<K, V>) => void, fireImmediately?: boolean): Lambda {\n        if (__DEV__ && fireImmediately === true) {\n            die(\"`observe` doesn't support fireImmediately=true in combination with maps.\")\n        }\n        return registerListener(this, listener)\n    }\n\n    intercept_(handler: IInterceptor<IMapWillChange<K, V>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n}\n\n// eslint-disable-next-line\nexport var isObservableMap = createInstanceofPredicate(\"ObservableMap\", ObservableMap) as (\n    thing: any\n) => thing is ObservableMap<any, any>\n\nfunction convertToMap(dataStructure: any): Map<any, any> {\n    if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n        return dataStructure\n    } else if (Array.isArray(dataStructure)) {\n        return new Map(dataStructure)\n    } else if (isPlainObject(dataStructure)) {\n        const map = new Map()\n        for (const key in dataStructure) {\n            map.set(key, dataStructure[key])\n        }\n        return map\n    } else {\n        return die(21, dataStructure)\n    }\n}\n","import {\n    $mobx,\n    createAtom,\n    deepEnhancer,\n    getNextId,\n    IEnhancer,\n    isSpyEnabled,\n    hasListeners,\n    IListenable,\n    registerListener,\n    Lambda,\n    spyReportStart,\n    notifyListeners,\n    spyReportEnd,\n    createInstanceofPredicate,\n    hasInterceptors,\n    interceptChange,\n    IInterceptable,\n    IInterceptor,\n    registerInterceptor,\n    checkIfStateModificationsAreAllowed,\n    untracked,\n    makeIterable,\n    transaction,\n    isES6Set,\n    IAtom,\n    DELETE,\n    ADD,\n    die,\n    isFunction,\n    initObservable\n} from \"../internal\"\n\nconst ObservableSetMarker = {}\n\nexport type IObservableSetInitialValues<T> = Set<T> | readonly T[]\n\nexport type ISetDidChange<T = any> =\n    | {\n          object: ObservableSet<T>\n          observableKind: \"set\"\n          debugObjectName: string\n          type: \"add\"\n          newValue: T\n      }\n    | {\n          object: ObservableSet<T>\n          observableKind: \"set\"\n          debugObjectName: string\n          type: \"delete\"\n          oldValue: T\n      }\n\nexport type ISetWillChange<T = any> =\n    | {\n          type: \"delete\"\n          object: ObservableSet<T>\n          oldValue: T\n      }\n    | {\n          type: \"add\"\n          object: ObservableSet<T>\n          newValue: T\n      }\n\nexport class ObservableSet<T = any> implements Set<T>, IInterceptable<ISetWillChange>, IListenable {\n    [$mobx] = ObservableSetMarker\n    private data_: Set<any> = new Set()\n    atom_!: IAtom\n    changeListeners_\n    interceptors_\n    dehancer: any\n    enhancer_: (newV: any, oldV: any | undefined) => any\n\n    constructor(\n        initialData?: IObservableSetInitialValues<T>,\n        enhancer: IEnhancer<T> = deepEnhancer,\n        public name_ = __DEV__ ? \"ObservableSet@\" + getNextId() : \"ObservableSet\"\n    ) {\n        if (!isFunction(Set)) {\n            die(22)\n        }\n        this.enhancer_ = (newV, oldV) => enhancer(newV, oldV, name_)\n        initObservable(() => {\n            this.atom_ = createAtom(this.name_)\n            if (initialData) {\n                this.replace(initialData)\n            }\n        })\n    }\n\n    private dehanceValue_<X extends T | undefined>(value: X): X {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    clear() {\n        transaction(() => {\n            untracked(() => {\n                for (const value of this.data_.values()) {\n                    this.delete(value)\n                }\n            })\n        })\n    }\n\n    forEach(callbackFn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any) {\n        for (const value of this) {\n            callbackFn.call(thisArg, value, value, this)\n        }\n    }\n\n    get size() {\n        this.atom_.reportObserved()\n        return this.data_.size\n    }\n\n    add(value: T) {\n        checkIfStateModificationsAreAllowed(this.atom_)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<ISetWillChange<T>>(this, {\n                type: ADD,\n                object: this,\n                newValue: value\n            })\n            if (!change) {\n                return this\n            }\n            // ideally, value = change.value would be done here, so that values can be\n            // changed by interceptor. Same applies for other Set and Map api's.\n        }\n        if (!this.has(value)) {\n            transaction(() => {\n                this.data_.add(this.enhancer_(value, undefined))\n                this.atom_.reportChanged()\n            })\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const notify = hasListeners(this)\n            const change =\n                notify || notifySpy\n                    ? <ISetDidChange<T>>{\n                          observableKind: \"set\",\n                          debugObjectName: this.name_,\n                          type: ADD,\n                          object: this,\n                          newValue: value\n                      }\n                    : null\n            if (notifySpy && __DEV__) {\n                spyReportStart(change!)\n            }\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (notifySpy && __DEV__) {\n                spyReportEnd()\n            }\n        }\n\n        return this\n    }\n\n    delete(value: T) {\n        if (hasInterceptors(this)) {\n            const change = interceptChange<ISetWillChange<T>>(this, {\n                type: DELETE,\n                object: this,\n                oldValue: value\n            })\n            if (!change) {\n                return false\n            }\n        }\n        if (this.has(value)) {\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const notify = hasListeners(this)\n            const change =\n                notify || notifySpy\n                    ? <ISetDidChange<T>>{\n                          observableKind: \"set\",\n                          debugObjectName: this.name_,\n                          type: DELETE,\n                          object: this,\n                          oldValue: value\n                      }\n                    : null\n\n            if (notifySpy && __DEV__) {\n                spyReportStart(change!)\n            }\n            transaction(() => {\n                this.atom_.reportChanged()\n                this.data_.delete(value)\n            })\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (notifySpy && __DEV__) {\n                spyReportEnd()\n            }\n            return true\n        }\n        return false\n    }\n\n    has(value: T) {\n        this.atom_.reportObserved()\n        return this.data_.has(this.dehanceValue_(value))\n    }\n\n    entries() {\n        let nextIndex = 0\n        const keys = Array.from(this.keys())\n        const values = Array.from(this.values())\n        return makeIterable<[T, T]>({\n            next() {\n                const index = nextIndex\n                nextIndex += 1\n                return index < values.length\n                    ? { value: [keys[index], values[index]], done: false }\n                    : { done: true }\n            }\n        } as any)\n    }\n\n    keys(): IterableIterator<T> {\n        return this.values()\n    }\n\n    values(): IterableIterator<T> {\n        this.atom_.reportObserved()\n        const self = this\n        let nextIndex = 0\n        const observableValues = Array.from(this.data_.values())\n        return makeIterable<T>({\n            next() {\n                return nextIndex < observableValues.length\n                    ? { value: self.dehanceValue_(observableValues[nextIndex++]), done: false }\n                    : { done: true }\n            }\n        } as any)\n    }\n\n    intersection<U>(otherSet: ReadonlySetLike<U> | Set<U>): Set<T & U> {\n        if (isES6Set(otherSet) && !isObservableSet(otherSet)) {\n            return otherSet.intersection(this)\n        } else {\n            const dehancedSet = new Set(this)\n            return dehancedSet.intersection(otherSet)\n        }\n    }\n\n    union<U>(otherSet: ReadonlySetLike<U> | Set<U>): Set<T | U> {\n        if (isES6Set(otherSet) && !isObservableSet(otherSet)) {\n            return otherSet.union(this)\n        } else {\n            const dehancedSet = new Set(this)\n            return dehancedSet.union(otherSet)\n        }\n    }\n\n    difference<U>(otherSet: ReadonlySetLike<U>): Set<T> {\n        return new Set(this).difference(otherSet)\n    }\n\n    symmetricDifference<U>(otherSet: ReadonlySetLike<U> | Set<U>): Set<T | U> {\n        if (isES6Set(otherSet) && !isObservableSet(otherSet)) {\n            return otherSet.symmetricDifference(this)\n        } else {\n            const dehancedSet = new Set(this)\n            return dehancedSet.symmetricDifference(otherSet)\n        }\n    }\n\n    isSubsetOf(otherSet: ReadonlySetLike<unknown>): boolean {\n        return new Set(this).isSubsetOf(otherSet)\n    }\n\n    isSupersetOf(otherSet: ReadonlySetLike<unknown>): boolean {\n        return new Set(this).isSupersetOf(otherSet)\n    }\n\n    isDisjointFrom(otherSet: ReadonlySetLike<unknown> | Set<unknown>): boolean {\n        if (isES6Set(otherSet) && !isObservableSet(otherSet)) {\n            return otherSet.isDisjointFrom(this)\n        } else {\n            const dehancedSet = new Set(this)\n            return dehancedSet.isDisjointFrom(otherSet)\n        }\n    }\n\n    replace(other: ObservableSet<T> | IObservableSetInitialValues<T>): ObservableSet<T> {\n        if (isObservableSet(other)) {\n            other = new Set(other)\n        }\n\n        transaction(() => {\n            if (Array.isArray(other)) {\n                this.clear()\n                other.forEach(value => this.add(value))\n            } else if (isES6Set(other)) {\n                this.clear()\n                other.forEach(value => this.add(value))\n            } else if (other !== null && other !== undefined) {\n                die(\"Cannot initialize set from \" + other)\n            }\n        })\n\n        return this\n    }\n    observe_(listener: (changes: ISetDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        // ... 'fireImmediately' could also be true?\n        if (__DEV__ && fireImmediately === true) {\n            die(\"`observe` doesn't support fireImmediately=true in combination with sets.\")\n        }\n        return registerListener(this, listener)\n    }\n\n    intercept_(handler: IInterceptor<ISetWillChange<T>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    toJSON(): T[] {\n        return Array.from(this)\n    }\n\n    toString(): string {\n        return \"[object ObservableSet]\"\n    }\n\n    [Symbol.iterator]() {\n        return this.values()\n    }\n\n    get [Symbol.toStringTag]() {\n        return \"Set\"\n    }\n}\n\n// eslint-disable-next-line\nexport var isObservableSet = createInstanceofPredicate(\"ObservableSet\", ObservableSet) as (\n    thing: any\n) => thing is ObservableSet<any>\n","import {\n    CreateObservableOptions,\n    getAnnotationFromOptions,\n    propagateChanged,\n    isAnnotation,\n    $mobx,\n    Atom,\n    Annotation,\n    ComputedValue,\n    IAtom,\n    IComputedValueOptions,\n    IEnhancer,\n    IInterceptable,\n    IListenable,\n    Lambda,\n    ObservableValue,\n    addHiddenProp,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isObject,\n    isPlainObject,\n    isSpyEnabled,\n    notifyListeners,\n    referenceEnhancer,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    stringifyKey,\n    globalState,\n    ADD,\n    UPDATE,\n    die,\n    hasProp,\n    getDescriptor,\n    storedAnnotationsSymbol,\n    ownKeys,\n    isOverride,\n    defineProperty,\n    autoAnnotation,\n    getAdministration,\n    getDebugName,\n    objectPrototype,\n    MakeResult,\n    checkIfStateModificationsAreAllowed\n} from \"../internal\"\n\nconst descriptorCache = Object.create(null)\n\nexport type IObjectDidChange<T = any> = {\n    observableKind: \"object\"\n    name: PropertyKey\n    object: T\n    debugObjectName: string\n} & (\n    | {\n          type: \"add\"\n          newValue: any\n      }\n    | {\n          type: \"update\"\n          oldValue: any\n          newValue: any\n      }\n    | {\n          type: \"remove\"\n          oldValue: any\n      }\n)\n\nexport type IObjectWillChange<T = any> =\n    | {\n          object: T\n          type: \"update\" | \"add\"\n          name: PropertyKey\n          newValue: any\n      }\n    | {\n          object: T\n          type: \"remove\"\n          name: PropertyKey\n      }\n\nconst REMOVE = \"remove\"\n\nexport class ObservableObjectAdministration\n    implements IInterceptable<IObjectWillChange>, IListenable\n{\n    keysAtom_: IAtom\n    changeListeners_\n    interceptors_\n    proxy_: any\n    isPlainObject_: boolean\n    appliedAnnotations_?: object\n    private pendingKeys_: undefined | Map<PropertyKey, ObservableValue<boolean>>\n\n    constructor(\n        public target_: any,\n        public values_ = new Map<PropertyKey, ObservableValue<any> | ComputedValue<any>>(),\n        public name_: string,\n        // Used anytime annotation is not explicitely provided\n        public defaultAnnotation_: Annotation = autoAnnotation\n    ) {\n        this.keysAtom_ = new Atom(__DEV__ ? `${this.name_}.keys` : \"ObservableObject.keys\")\n        // Optimization: we use this frequently\n        this.isPlainObject_ = isPlainObject(this.target_)\n        if (__DEV__ && !isAnnotation(this.defaultAnnotation_)) {\n            die(`defaultAnnotation must be valid annotation`)\n        }\n        if (__DEV__) {\n            // Prepare structure for tracking which fields were already annotated\n            this.appliedAnnotations_ = {}\n        }\n    }\n\n    getObservablePropValue_(key: PropertyKey): any {\n        return this.values_.get(key)!.get()\n    }\n\n    setObservablePropValue_(key: PropertyKey, newValue): boolean | null {\n        const observable = this.values_.get(key)\n        if (observable instanceof ComputedValue) {\n            observable.set(newValue)\n            return true\n        }\n\n        // intercept\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IObjectWillChange>(this, {\n                type: UPDATE,\n                object: this.proxy_ || this.target_,\n                name: key,\n                newValue\n            })\n            if (!change) {\n                return null\n            }\n            newValue = (change as any).newValue\n        }\n        newValue = (observable as any).prepareNewValue_(newValue)\n\n        // notify spy & observers\n        if (newValue !== globalState.UNCHANGED) {\n            const notify = hasListeners(this)\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const change: IObjectDidChange | null =\n                notify || notifySpy\n                    ? {\n                          type: UPDATE,\n                          observableKind: \"object\",\n                          debugObjectName: this.name_,\n                          object: this.proxy_ || this.target_,\n                          oldValue: (observable as any).value_,\n                          name: key,\n                          newValue\n                      }\n                    : null\n\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change!)\n            }\n            ;(observable as ObservableValue<any>).setNewValue_(newValue)\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n        return true\n    }\n\n    get_(key: PropertyKey): any {\n        if (globalState.trackingDerivation && !hasProp(this.target_, key)) {\n            // Key doesn't exist yet, subscribe for it in case it's added later\n            this.has_(key)\n        }\n        return this.target_[key]\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {any} value\n     * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    set_(key: PropertyKey, value: any, proxyTrap: boolean = false): boolean | null {\n        // Don't use .has(key) - we care about own\n        if (hasProp(this.target_, key)) {\n            // Existing prop\n            if (this.values_.has(key)) {\n                // Observable (can be intercepted)\n                return this.setObservablePropValue_(key, value)\n            } else if (proxyTrap) {\n                // Non-observable - proxy\n                return Reflect.set(this.target_, key, value)\n            } else {\n                // Non-observable\n                this.target_[key] = value\n                return true\n            }\n        } else {\n            // New prop\n            return this.extend_(\n                key,\n                { value, enumerable: true, writable: true, configurable: true },\n                this.defaultAnnotation_,\n                proxyTrap\n            )\n        }\n    }\n\n    // Trap for \"in\"\n    has_(key: PropertyKey): boolean {\n        if (!globalState.trackingDerivation) {\n            // Skip key subscription outside derivation\n            return key in this.target_\n        }\n        this.pendingKeys_ ||= new Map()\n        let entry = this.pendingKeys_.get(key)\n        if (!entry) {\n            entry = new ObservableValue(\n                key in this.target_,\n                referenceEnhancer,\n                __DEV__ ? `${this.name_}.${stringifyKey(key)}?` : \"ObservableObject.key?\",\n                false\n            )\n            this.pendingKeys_.set(key, entry)\n        }\n        return entry.get()\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop\n     */\n    make_(key: PropertyKey, annotation: Annotation | boolean): void {\n        if (annotation === true) {\n            annotation = this.defaultAnnotation_\n        }\n        if (annotation === false) {\n            return\n        }\n        assertAnnotable(this, annotation, key)\n        if (!(key in this.target_)) {\n            // Throw on missing key, except for decorators:\n            // Decorator annotations are collected from whole prototype chain.\n            // When called from super() some props may not exist yet.\n            // However we don't have to worry about missing prop,\n            // because the decorator must have been applied to something.\n            if (this.target_[storedAnnotationsSymbol]?.[key]) {\n                return // will be annotated by subclass constructor\n            } else {\n                die(1, annotation.annotationType_, `${this.name_}.${key.toString()}`)\n            }\n        }\n        let source = this.target_\n        while (source && source !== objectPrototype) {\n            const descriptor = getDescriptor(source, key)\n            if (descriptor) {\n                const outcome = annotation.make_(this, key, descriptor, source)\n                if (outcome === MakeResult.Cancel) {\n                    return\n                }\n                if (outcome === MakeResult.Break) {\n                    break\n                }\n            }\n            source = Object.getPrototypeOf(source)\n        }\n        recordAnnotationApplied(this, annotation, key)\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {PropertyDescriptor} descriptor\n     * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    extend_(\n        key: PropertyKey,\n        descriptor: PropertyDescriptor,\n        annotation: Annotation | boolean,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        if (annotation === true) {\n            annotation = this.defaultAnnotation_\n        }\n        if (annotation === false) {\n            return this.defineProperty_(key, descriptor, proxyTrap)\n        }\n        assertAnnotable(this, annotation, key)\n        const outcome = annotation.extend_(this, key, descriptor, proxyTrap)\n        if (outcome) {\n            recordAnnotationApplied(this, annotation, key)\n        }\n        return outcome\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {PropertyDescriptor} descriptor\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    defineProperty_(\n        key: PropertyKey,\n        descriptor: PropertyDescriptor,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: descriptor.value\n                })\n                if (!change) {\n                    return null\n                }\n                const { newValue } = change as any\n                if (descriptor.value !== newValue) {\n                    descriptor = {\n                        ...descriptor,\n                        value: newValue\n                    }\n                }\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            // Notify\n            this.notifyPropertyAddition_(key, descriptor.value)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    // If original descriptor becomes relevant, move this to annotation directly\n    defineObservableProperty_(\n        key: PropertyKey,\n        value: any,\n        enhancer: IEnhancer<any>,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: value\n                })\n                if (!change) {\n                    return null\n                }\n                value = (change as any).newValue\n            }\n\n            const cachedDescriptor = getCachedObservablePropDescriptor(key)\n            const descriptor = {\n                configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n                enumerable: true,\n                get: cachedDescriptor.get,\n                set: cachedDescriptor.set\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            const observable = new ObservableValue(\n                value,\n                enhancer,\n                __DEV__ ? `${this.name_}.${key.toString()}` : \"ObservableObject.key\",\n                false\n            )\n\n            this.values_.set(key, observable)\n\n            // Notify (value possibly changed by ObservableValue)\n            this.notifyPropertyAddition_(key, observable.value_)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    // If original descriptor becomes relevant, move this to annotation directly\n    defineComputedProperty_(\n        key: PropertyKey,\n        options: IComputedValueOptions<any>,\n        proxyTrap: boolean = false\n    ): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        try {\n            startBatch()\n\n            // Delete\n            const deleteOutcome = this.delete_(key)\n            if (!deleteOutcome) {\n                // Failure or intercepted\n                return deleteOutcome\n            }\n\n            // ADD interceptor\n            if (hasInterceptors(this)) {\n                const change = interceptChange<IObjectWillChange>(this, {\n                    object: this.proxy_ || this.target_,\n                    name: key,\n                    type: ADD,\n                    newValue: undefined\n                })\n                if (!change) {\n                    return null\n                }\n            }\n            options.name ||= __DEV__ ? `${this.name_}.${key.toString()}` : \"ObservableObject.key\"\n            options.context = this.proxy_ || this.target_\n            const cachedDescriptor = getCachedObservablePropDescriptor(key)\n            const descriptor = {\n                configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,\n                enumerable: false,\n                get: cachedDescriptor.get,\n                set: cachedDescriptor.set\n            }\n\n            // Define\n            if (proxyTrap) {\n                if (!Reflect.defineProperty(this.target_, key, descriptor)) {\n                    return false\n                }\n            } else {\n                defineProperty(this.target_, key, descriptor)\n            }\n\n            this.values_.set(key, new ComputedValue(options))\n\n            // Notify\n            this.notifyPropertyAddition_(key, undefined)\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    /**\n     * @param {PropertyKey} key\n     * @param {PropertyDescriptor} descriptor\n     * @param {boolean} proxyTrap whether it's called from proxy trap\n     * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor\n     */\n    delete_(key: PropertyKey, proxyTrap: boolean = false): boolean | null {\n        checkIfStateModificationsAreAllowed(this.keysAtom_)\n        // No such prop\n        if (!hasProp(this.target_, key)) {\n            return true\n        }\n\n        // Intercept\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IObjectWillChange>(this, {\n                object: this.proxy_ || this.target_,\n                name: key,\n                type: REMOVE\n            })\n            // Cancelled\n            if (!change) {\n                return null\n            }\n        }\n\n        // Delete\n        try {\n            startBatch()\n            const notify = hasListeners(this)\n            const notifySpy = __DEV__ && isSpyEnabled()\n            const observable = this.values_.get(key)\n            // Value needed for spies/listeners\n            let value = undefined\n            // Optimization: don't pull the value unless we will need it\n            if (!observable && (notify || notifySpy)) {\n                value = getDescriptor(this.target_, key)?.value\n            }\n            // delete prop (do first, may fail)\n            if (proxyTrap) {\n                if (!Reflect.deleteProperty(this.target_, key)) {\n                    return false\n                }\n            } else {\n                delete this.target_[key]\n            }\n            // Allow re-annotating this field\n            if (__DEV__) {\n                delete this.appliedAnnotations_![key]\n            }\n            // Clear observable\n            if (observable) {\n                this.values_.delete(key)\n                // for computed, value is undefined\n                if (observable instanceof ObservableValue) {\n                    value = observable.value_\n                }\n                // Notify: autorun(() => obj[key]), see #1796\n                propagateChanged(observable)\n            }\n            // Notify \"keys/entries/values\" observers\n            this.keysAtom_.reportChanged()\n\n            // Notify \"has\" observers\n            // \"in\" as it may still exist in proto\n            this.pendingKeys_?.get(key)?.set(key in this.target_)\n\n            // Notify spies/listeners\n            if (notify || notifySpy) {\n                const change: IObjectDidChange = {\n                    type: REMOVE,\n                    observableKind: \"object\",\n                    object: this.proxy_ || this.target_,\n                    debugObjectName: this.name_,\n                    oldValue: value,\n                    name: key\n                }\n                if (__DEV__ && notifySpy) {\n                    spyReportStart(change!)\n                }\n                if (notify) {\n                    notifyListeners(this, change)\n                }\n                if (__DEV__ && notifySpy) {\n                    spyReportEnd()\n                }\n            }\n        } finally {\n            endBatch()\n        }\n        return true\n    }\n\n    /**\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n     * for callback details\n     */\n    observe_(callback: (changes: IObjectDidChange) => void, fireImmediately?: boolean): Lambda {\n        if (__DEV__ && fireImmediately === true) {\n            die(\"`observe` doesn't support the fire immediately property for observable objects.\")\n        }\n        return registerListener(this, callback)\n    }\n\n    intercept_(handler): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    notifyPropertyAddition_(key: PropertyKey, value: any) {\n        const notify = hasListeners(this)\n        const notifySpy = __DEV__ && isSpyEnabled()\n        if (notify || notifySpy) {\n            const change: IObjectDidChange | null =\n                notify || notifySpy\n                    ? ({\n                          type: ADD,\n                          observableKind: \"object\",\n                          debugObjectName: this.name_,\n                          object: this.proxy_ || this.target_,\n                          name: key,\n                          newValue: value\n                      } as const)\n                    : null\n\n            if (__DEV__ && notifySpy) {\n                spyReportStart(change!)\n            }\n            if (notify) {\n                notifyListeners(this, change)\n            }\n            if (__DEV__ && notifySpy) {\n                spyReportEnd()\n            }\n        }\n\n        this.pendingKeys_?.get(key)?.set(true)\n\n        // Notify \"keys/entries/values\" observers\n        this.keysAtom_.reportChanged()\n    }\n\n    ownKeys_(): Array<string | symbol> {\n        this.keysAtom_.reportObserved()\n        return ownKeys(this.target_)\n    }\n\n    keys_(): PropertyKey[] {\n        // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.\n        // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.\n        // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)\n        // We choose to over-report in Object.keys(object), because:\n        // - typically it's used with simple data objects\n        // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected\n        this.keysAtom_.reportObserved()\n        return Object.keys(this.target_)\n    }\n}\n\nexport interface IIsObservableObject {\n    [$mobx]: ObservableObjectAdministration\n}\n\nexport function asObservableObject(\n    target: any,\n    options?: CreateObservableOptions\n): IIsObservableObject {\n    if (__DEV__ && options && isObservableObject(target)) {\n        die(`Options can't be provided for already observable objects.`)\n    }\n\n    if (hasProp(target, $mobx)) {\n        if (__DEV__ && !(getAdministration(target) instanceof ObservableObjectAdministration)) {\n            die(\n                `Cannot convert '${getDebugName(target)}' into observable object:` +\n                    `\\nThe target is already observable of different type.` +\n                    `\\nExtending builtins is not supported.`\n            )\n        }\n        return target\n    }\n\n    if (__DEV__ && !Object.isExtensible(target)) {\n        die(\"Cannot make the designated object observable; it is not extensible\")\n    }\n\n    const name =\n        options?.name ??\n        (__DEV__\n            ? `${\n                  isPlainObject(target) ? \"ObservableObject\" : target.constructor.name\n              }@${getNextId()}`\n            : \"ObservableObject\")\n\n    const adm = new ObservableObjectAdministration(\n        target,\n        new Map(),\n        String(name),\n        getAnnotationFromOptions(options)\n    )\n\n    addHiddenProp(target, $mobx, adm)\n\n    return target\n}\n\nconst isObservableObjectAdministration = createInstanceofPredicate(\n    \"ObservableObjectAdministration\",\n    ObservableObjectAdministration\n)\n\nfunction getCachedObservablePropDescriptor(key) {\n    return (\n        descriptorCache[key] ||\n        (descriptorCache[key] = {\n            get() {\n                return this[$mobx].getObservablePropValue_(key)\n            },\n            set(value) {\n                return this[$mobx].setObservablePropValue_(key, value)\n            }\n        })\n    )\n}\n\nexport function isObservableObject(thing: any): boolean {\n    if (isObject(thing)) {\n        return isObservableObjectAdministration((thing as any)[$mobx])\n    }\n    return false\n}\n\nexport function recordAnnotationApplied(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey\n) {\n    if (__DEV__) {\n        adm.appliedAnnotations_![key] = annotation\n    }\n    // Remove applied decorator annotation so we don't try to apply it again in subclass constructor\n    delete adm.target_[storedAnnotationsSymbol]?.[key]\n}\n\nfunction assertAnnotable(\n    adm: ObservableObjectAdministration,\n    annotation: Annotation,\n    key: PropertyKey\n) {\n    // Valid annotation\n    if (__DEV__ && !isAnnotation(annotation)) {\n        die(`Cannot annotate '${adm.name_}.${key.toString()}': Invalid annotation.`)\n    }\n\n    /*\n    // Configurable, not sealed, not frozen\n    // Possibly not needed, just a little better error then the one thrown by engine.\n    // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.\n    if (__DEV__) {\n        const configurable = getDescriptor(adm.target_, key)?.configurable\n        const frozen = Object.isFrozen(adm.target_)\n        const sealed = Object.isSealed(adm.target_)\n        if (!configurable || frozen || sealed) {\n            const fieldName = `${adm.name_}.${key.toString()}`\n            const requestedAnnotationType = annotation.annotationType_\n            let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`\n            if (frozen) {\n                error += `\\nObject is frozen.`\n            }\n            if (sealed) {\n                error += `\\nObject is sealed.`\n            }\n            if (!configurable) {\n                error += `\\nproperty is not configurable.`\n                // Mention only if caused by us to avoid confusion\n                if (hasProp(adm.appliedAnnotations!, key)) {\n                    error += `\\nTo prevent accidental re-definition of a field by a subclass, `\n                    error += `all annotated fields of non-plain objects (classes) are not configurable.`\n                }\n            }\n            die(error)\n        }\n    }\n    */\n\n    // Not annotated\n    if (__DEV__ && !isOverride(annotation) && hasProp(adm.appliedAnnotations_!, key)) {\n        const fieldName = `${adm.name_}.${key.toString()}`\n        const currentAnnotationType = adm.appliedAnnotations_![key].annotationType_\n        const requestedAnnotationType = annotation.annotationType_\n        die(\n            `Cannot apply '${requestedAnnotationType}' to '${fieldName}':` +\n                `\\nThe field is already annotated with '${currentAnnotationType}'.` +\n                `\\nRe-annotating fields is not allowed.` +\n                `\\nUse 'override' annotation for methods overridden by subclass.`\n        )\n    }\n}\n","import {\n    getNextId,\n    addHiddenFinalProp,\n    makeIterable,\n    addHiddenProp,\n    ObservableArrayAdministration,\n    $mobx,\n    arrayExtensions,\n    IEnhancer,\n    isObservableArray,\n    IObservableArray,\n    defineProperty,\n    initObservable\n} from \"../internal\"\n\n// Bug in safari 9.* (or iOS 9 safari mobile). See #364\nconst ENTRY_0 = createArrayEntryDescriptor(0)\n\nconst safariPrototypeSetterInheritanceBug = (() => {\n    let v = false\n    const p = {}\n    Object.defineProperty(p, \"0\", {\n        set: () => {\n            v = true\n        }\n    })\n    Object.create(p)[\"0\"] = 1\n    return v === false\n})()\n\n/**\n * This array buffer contains two lists of properties, so that all arrays\n * can recycle their property definitions, which significantly improves performance of creating\n * properties on the fly.\n */\nlet OBSERVABLE_ARRAY_BUFFER_SIZE = 0\n\n// Typescript workaround to make sure ObservableArray extends Array\nclass StubArray {}\nfunction inherit(ctor, proto) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(ctor.prototype, proto)\n    } else if (ctor.prototype.__proto__ !== undefined) {\n        ctor.prototype.__proto__ = proto\n    } else {\n        ctor.prototype = proto\n    }\n}\ninherit(StubArray, Array.prototype)\n\n// Weex proto freeze protection was here,\n// but it is unclear why the hack is need as MobX never changed the prototype\n// anyway, so removed it in V6\n\nexport class LegacyObservableArray<T> extends StubArray {\n    constructor(\n        initialValues: T[] | undefined,\n        enhancer: IEnhancer<T>,\n        name = __DEV__ ? \"ObservableArray@\" + getNextId() : \"ObservableArray\",\n        owned = false\n    ) {\n        super()\n        initObservable(() => {\n            const adm = new ObservableArrayAdministration(name, enhancer, owned, true)\n            adm.proxy_ = this as any\n            addHiddenFinalProp(this, $mobx, adm)\n\n            if (initialValues && initialValues.length) {\n                // @ts-ignore\n                this.spliceWithArray(0, 0, initialValues)\n            }\n\n            if (safariPrototypeSetterInheritanceBug) {\n                // Seems that Safari won't use numeric prototype setter until any * numeric property is\n                // defined on the instance. After that it works fine, even if this property is deleted.\n                Object.defineProperty(this, \"0\", ENTRY_0)\n            }\n        })\n    }\n\n    concat(...arrays: T[][]): T[] {\n        ;(this[$mobx] as ObservableArrayAdministration).atom_.reportObserved()\n        return Array.prototype.concat.apply(\n            (this as any).slice(),\n            //@ts-ignore\n            arrays.map(a => (isObservableArray(a) ? a.slice() : a))\n        )\n    }\n\n    get length(): number {\n        return (this[$mobx] as ObservableArrayAdministration).getArrayLength_()\n    }\n\n    set length(newLength: number) {\n        ;(this[$mobx] as ObservableArrayAdministration).setArrayLength_(newLength)\n    }\n\n    get [Symbol.toStringTag]() {\n        return \"Array\"\n    }\n\n    [Symbol.iterator]() {\n        const self = this\n        let nextIndex = 0\n        return makeIterable({\n            next() {\n                return nextIndex < self.length\n                    ? { value: self[nextIndex++], done: false }\n                    : { done: true, value: undefined }\n            }\n        })\n    }\n}\n\nObject.entries(arrayExtensions).forEach(([prop, fn]) => {\n    if (prop !== \"concat\") {\n        addHiddenProp(LegacyObservableArray.prototype, prop, fn)\n    }\n})\n\nfunction createArrayEntryDescriptor(index: number) {\n    return {\n        enumerable: false,\n        configurable: true,\n        get: function () {\n            return this[$mobx].get_(index)\n        },\n        set: function (value) {\n            this[$mobx].set_(index, value)\n        }\n    }\n}\n\nfunction createArrayBufferItem(index: number) {\n    defineProperty(LegacyObservableArray.prototype, \"\" + index, createArrayEntryDescriptor(index))\n}\n\nexport function reserveArrayBuffer(max: number) {\n    if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {\n        for (let index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {\n            createArrayBufferItem(index)\n        }\n        OBSERVABLE_ARRAY_BUFFER_SIZE = max\n    }\n}\n\nreserveArrayBuffer(1000)\n\nexport function createLegacyArray<T>(\n    initialValues: T[] | undefined,\n    enhancer: IEnhancer<T>,\n    name?: string\n): IObservableArray<T> {\n    return new LegacyObservableArray(initialValues, enhancer, name) as any\n}\n","import { isAction } from \"../api/action\"\nimport {\n    $mobx,\n    IDepTreeNode,\n    isAtom,\n    isComputedValue,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isReaction,\n    isObservableSet,\n    die,\n    isFunction,\n    allowStateChangesStart,\n    untrackedStart,\n    allowStateChangesEnd,\n    untrackedEnd,\n    startBatch,\n    endBatch\n} from \"../internal\"\n\nexport function getAtom(thing: any, property?: PropertyKey): IDepTreeNode {\n    if (typeof thing === \"object\" && thing !== null) {\n        if (isObservableArray(thing)) {\n            if (property !== undefined) {\n                die(23)\n            }\n            return (thing as any)[$mobx].atom_\n        }\n        if (isObservableSet(thing)) {\n            return thing.atom_\n        }\n        if (isObservableMap(thing)) {\n            if (property === undefined) {\n                return thing.keysAtom_\n            }\n            const observable = thing.data_.get(property) || thing.hasMap_.get(property)\n            if (!observable) {\n                die(25, property, getDebugName(thing))\n            }\n            return observable\n        }\n        if (property && !thing[$mobx]) {\n            thing[property]\n        } // See #1072\n        if (isObservableObject(thing)) {\n            if (!property) {\n                return die(26)\n            }\n            const observable = (thing as any)[$mobx].values_.get(property)\n            if (!observable) {\n                die(27, property, getDebugName(thing))\n            }\n            return observable\n        }\n        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n            return thing\n        }\n    } else if (isFunction(thing)) {\n        if (isReaction(thing[$mobx])) {\n            // disposer function\n            return thing[$mobx]\n        }\n    }\n    die(28)\n}\n\nexport function getAdministration(thing: any, property?: string) {\n    if (!thing) {\n        die(29)\n    }\n    if (property !== undefined) {\n        return getAdministration(getAtom(thing, property))\n    }\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n        return thing\n    }\n    if (isObservableMap(thing) || isObservableSet(thing)) {\n        return thing\n    }\n    if (thing[$mobx]) {\n        return thing[$mobx]\n    }\n    die(24, thing)\n}\n\nexport function getDebugName(thing: any, property?: string): string {\n    let named\n    if (property !== undefined) {\n        named = getAtom(thing, property)\n    } else if (isAction(thing)) {\n        return thing.name\n    } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {\n        named = getAdministration(thing)\n    } else {\n        // valid for arrays as well\n        named = getAtom(thing)\n    }\n    return named.name_\n}\n\n/**\n * Helper function for initializing observable structures, it applies:\n * 1. allowStateChanges so we don't violate enforceActions.\n * 2. untracked so we don't accidentaly subscribe to anything observable accessed during init in case the observable is created inside derivation.\n * 3. batch to avoid state version updates\n */\nexport function initObservable<T>(cb: () => T): T {\n    const derivation = untrackedStart()\n    const allowStateChanges = allowStateChangesStart(true)\n    startBatch()\n    try {\n        return cb()\n    } finally {\n        endBatch()\n        allowStateChangesEnd(allowStateChanges)\n        untrackedEnd(derivation)\n    }\n}\n","import {\n    isES6Map,\n    isObservableArray,\n    isObservableMap,\n    isES6Set,\n    isObservableSet,\n    hasProp,\n    isFunction,\n    objectPrototype\n} from \"../internal\"\n\ndeclare const Symbol\nconst toString = objectPrototype.toString\n\nexport function deepEqual(a: any, b: any, depth: number = -1): boolean {\n    return eq(a, b, depth)\n}\n\n// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n// Internal recursive comparison function for `isEqual`.\nfunction eq(a: any, b: any, depth: number, aStack?: any[], bStack?: any[]) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) {\n        return a !== 0 || 1 / a === 1 / b\n    }\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) {\n        return false\n    }\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) {\n        return b !== b\n    }\n    // Exhaust primitive checks\n    const type = typeof a\n    if (type !== \"function\" && type !== \"object\" && typeof b != \"object\") {\n        return false\n    }\n\n    // Compare `[[Class]]` names.\n    const className = toString.call(a)\n    if (className !== toString.call(b)) {\n        return false\n    }\n    switch (className) {\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n        case \"[object RegExp]\":\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n        case \"[object String]\":\n            // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n            // equivalent to `new String(\"5\")`.\n            return \"\" + a === \"\" + b\n        case \"[object Number]\":\n            // `NaN`s are equivalent, but non-reflexive.\n            // Object(NaN) is equivalent to NaN.\n            if (+a !== +a) {\n                return +b !== +b\n            }\n            // An `egal` comparison is performed for other numeric values.\n            return +a === 0 ? 1 / +a === 1 / b : +a === +b\n        case \"[object Date]\":\n        case \"[object Boolean]\":\n            // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n            // millisecond representations. Note that invalid dates with millisecond representations\n            // of `NaN` are not equivalent.\n            return +a === +b\n        case \"[object Symbol]\":\n            return (\n                typeof Symbol !== \"undefined\" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b)\n            )\n        case \"[object Map]\":\n        case \"[object Set]\":\n            // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n            // Hide this extra level by increasing the depth.\n            if (depth >= 0) {\n                depth++\n            }\n            break\n    }\n    // Unwrap any wrapped objects.\n    a = unwrap(a)\n    b = unwrap(b)\n\n    const areArrays = className === \"[object Array]\"\n    if (!areArrays) {\n        if (typeof a != \"object\" || typeof b != \"object\") {\n            return false\n        }\n\n        // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n        // from different frames are.\n        const aCtor = a.constructor,\n            bCtor = b.constructor\n        if (\n            aCtor !== bCtor &&\n            !(\n                isFunction(aCtor) &&\n                aCtor instanceof aCtor &&\n                isFunction(bCtor) &&\n                bCtor instanceof bCtor\n            ) &&\n            \"constructor\" in a &&\n            \"constructor\" in b\n        ) {\n            return false\n        }\n    }\n\n    if (depth === 0) {\n        return false\n    } else if (depth < 0) {\n        depth = -1\n    }\n\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || []\n    bStack = bStack || []\n    let length = aStack.length\n    while (length--) {\n        // Linear search. Performance is inversely proportional to the number of\n        // unique nested structures.\n        if (aStack[length] === a) {\n            return bStack[length] === b\n        }\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a)\n    bStack.push(b)\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n        // Compare array lengths to determine if a deep comparison is necessary.\n        length = a.length\n        if (length !== b.length) {\n            return false\n        }\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (length--) {\n            if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {\n                return false\n            }\n        }\n    } else {\n        // Deep compare objects.\n        const keys = Object.keys(a)\n        let key\n        length = keys.length\n        // Ensure that both objects contain the same number of properties before comparing deep equality.\n        if (Object.keys(b).length !== length) {\n            return false\n        }\n        while (length--) {\n            // Deep compare each member\n            key = keys[length]\n            if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {\n                return false\n            }\n        }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop()\n    bStack.pop()\n    return true\n}\n\nfunction unwrap(a: any) {\n    if (isObservableArray(a)) {\n        return a.slice()\n    }\n    if (isES6Map(a) || isObservableMap(a)) {\n        return Array.from(a.entries())\n    }\n    if (isES6Set(a) || isObservableSet(a)) {\n        return Array.from(a.entries())\n    }\n    return a\n}\n","export function makeIterable<T>(iterator: Iterator<T>): IterableIterator<T> {\n    iterator[Symbol.iterator] = getSelf\n    return iterator as any\n}\n\nfunction getSelf() {\n    return this\n}\n","import { ObservableObjectAdministration, isFunction } from \"../internal\"\n\nexport const enum MakeResult {\n    Cancel,\n    Break,\n    Continue\n}\n\nexport type Annotation = {\n    annotationType_: string\n    make_(\n        adm: ObservableObjectAdministration,\n        key: PropertyKey,\n        descriptor: PropertyDescriptor,\n        source: object\n    ): MakeResult\n    extend_(\n        adm: ObservableObjectAdministration,\n        key: PropertyKey,\n        descriptor: PropertyDescriptor,\n        proxyTrap: boolean\n    ): boolean | null\n    decorate_20223_(value: any, context: DecoratorContext)\n    options_?: any\n}\n\nexport type AnnotationMapEntry =\n    | Annotation\n    | true /* follow the default decorator, usually deep */\n    | false /* don't decorate this property */\n\n// AdditionalFields can be used to declare additional keys that can be used, for example to be able to\n// declare annotations for private/ protected members, see #2339\nexport type AnnotationsMap<T, AdditionalFields extends PropertyKey> = {\n    [P in Exclude<keyof T, \"toString\">]?: AnnotationMapEntry\n} & Record<AdditionalFields, AnnotationMapEntry>\n\nexport function isAnnotation(thing: any) {\n    return (\n        // Can be function\n        thing instanceof Object &&\n        typeof thing.annotationType_ === \"string\" &&\n        isFunction(thing.make_) &&\n        isFunction(thing.extend_)\n    )\n}\n\nexport function isAnnotationMapEntry(thing: any) {\n    return typeof thing === \"boolean\" || isAnnotation(thing)\n}\n","/**\n * (c) Michel Weststrate 2015 - 2020\n * MIT Licensed\n *\n * Welcome to the mobx sources! To get a global overview of how MobX internally works,\n * this is a good place to start:\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n *\n * Source folders:\n * ===============\n *\n * - api/     Most of the public static methods exposed by the module can be found here.\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\n * - utils/   Utility stuff.\n *\n */\nimport { die } from \"./errors\"\nimport { getGlobal } from \"./utils/global\"\n;[\"Symbol\", \"Map\", \"Set\"].forEach(m => {\n    let g = getGlobal()\n    if (typeof g[m] === \"undefined\") {\n        die(`MobX requires global '${m}' to be available or polyfilled`)\n    }\n})\n\nimport { spy, getDebugName, $mobx } from \"./internal\"\n\nexport {\n    IObservable,\n    IDepTreeNode,\n    Reaction,\n    IReactionPublic,\n    IReactionDisposer,\n    untracked,\n    IAtom,\n    createAtom,\n    spy,\n    IComputedValue,\n    IEqualsComparer,\n    comparer,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    IObjectWillChange,\n    IObjectDidChange,\n    isObservableObject,\n    IValueDidChange,\n    IValueWillChange,\n    IObservableValue,\n    isObservableValue as isBoxedObservable,\n    IObservableArray,\n    IArrayWillChange,\n    IArrayWillSplice,\n    IArraySplice,\n    IArrayUpdate,\n    IArrayDidChange,\n    isObservableArray,\n    IKeyValueMap,\n    ObservableMap,\n    IMapEntries,\n    IMapEntry,\n    IMapWillChange,\n    IMapDidChange,\n    isObservableMap,\n    IObservableMapInitialValues,\n    ObservableSet,\n    isObservableSet,\n    ISetDidChange,\n    ISetWillChange,\n    IObservableSetInitialValues,\n    transaction,\n    observable,\n    IObservableFactory,\n    CreateObservableOptions,\n    computed,\n    IComputedFactory,\n    isObservable,\n    isObservableProp,\n    isComputed,\n    isComputedProp,\n    extendObservable,\n    observe,\n    intercept,\n    autorun,\n    IAutorunOptions,\n    reaction,\n    IReactionOptions,\n    when,\n    IWhenOptions,\n    action,\n    isAction,\n    runInAction,\n    IActionFactory,\n    keys,\n    values,\n    entries,\n    set,\n    remove,\n    has,\n    get,\n    apiOwnKeys as ownKeys,\n    apiDefineProperty as defineProperty,\n    configure,\n    onBecomeObserved,\n    onBecomeUnobserved,\n    flow,\n    isFlow,\n    flowResult,\n    FlowCancellationError,\n    isFlowCancellationError,\n    toJS,\n    trace,\n    IObserverTree,\n    IDependencyTree,\n    getDependencyTree,\n    getObserverTree,\n    resetGlobalState as _resetGlobalState,\n    getGlobalState as _getGlobalState,\n    getDebugName,\n    getAtom,\n    getAdministration as _getAdministration,\n    allowStateChanges as _allowStateChanges,\n    runInAction as _allowStateChangesInsideComputed, // This has become the default behavior in Mobx 6\n    Lambda,\n    $mobx,\n    isComputingDerivation as _isComputingDerivation,\n    onReactionError,\n    interceptReads as _interceptReads,\n    IComputedValueOptions,\n    IActionRunInfo,\n    _startAction,\n    _endAction,\n    allowStateReadsStart as _allowStateReadsStart,\n    allowStateReadsEnd as _allowStateReadsEnd,\n    makeObservable,\n    makeAutoObservable,\n    autoAction as _autoAction,\n    AnnotationsMap,\n    AnnotationMapEntry,\n    override\n} from \"./internal\"\n\n// Devtools support\ndeclare const __MOBX_DEVTOOLS_GLOBAL_HOOK__: { injectMobx: (any) => void }\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"object\") {\n    // See: https://github.com/andykog/mobx-devtools/\n    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n        spy,\n        extras: {\n            getDebugName\n        },\n        $mobx\n    })\n}\n",null,null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n/**\n * Removes the `readonly` modifier from properties in the union K.\n *\n * This is a safer way to cast a value to a type with a mutable version of a\n * readonly field, than casting to an interface with the field re-declared\n * because it preserves the type of all the fields and warns on typos.\n */\ntype Mutable<T, K extends keyof T> = Omit<T, K> & {\n  -readonly [P in keyof Pick<T, K>]: P extends K ? T[P] : never;\n};\n\n// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022\nconst {\n  is,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf,\n} = Object;\n\nconst NODE_MODE = false;\n\n// Lets a minifier replace globalThis references with a minified name\nconst global = globalThis;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n\n  /**\n   * Whether this property is wrapping accessors. This is set by `@property`\n   * to control the initial value change and reflection logic.\n   *\n   * @internal\n   */\n  wrapped?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K] | undefined;\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean =>\n  !is(value, old);\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind =\n  | 'change-in-update'\n  | 'migration'\n  | 'async-perform-update';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n// Temporary, until google3 is on TypeScript 5.2\ndeclare global {\n  interface SymbolConstructor {\n    readonly metadata: unique symbol;\n  }\n}\n\n// Ensure metadata is enabled. TypeScript does not polyfill\n// Symbol.metadata, so we must ensure that it exists.\n(Symbol as {metadata: symbol}).metadata ??= Symbol('metadata');\n\ndeclare global {\n  // This is public global API, do not change!\n  // eslint-disable-next-line no-var\n  var litPropertyMetadata: WeakMap<\n    object,\n    Map<PropertyKey, PropertyDeclaration>\n  >;\n}\n\n// Map from a class's metadata object to property options\n// Note that we must use nullish-coalescing assignment so that we only use one\n// map even if we load multiple version of this module.\nglobal.litPropertyMetadata ??= new WeakMap<\n  object,\n  Map<PropertyKey, PropertyDeclaration>\n>();\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclasses to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.__prepare();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having been finalized, which includes creating properties\n   * from `static properties`, but does *not* include all properties created\n   * from decorators.\n   * @nocollapse\n   */\n  protected static finalized: true | undefined;\n\n  /**\n   * Memoized list of all element properties, including any superclass\n   * properties. Created lazily on user subclasses when finalizing the class.\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // Ensure we've created all properties\n    this.finalize();\n    // this.__attributeToPropertyMap is only undefined after finalize() in\n    // ReactiveElement itself. ReactiveElement.observedAttributes is only\n    // accessed with ReactiveElement as the receiver when a subclass or mixin\n    // calls super.observedAttributes\n    return (\n      this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]\n    );\n  }\n\n  private __instanceProperties?: PropertyValues = undefined;\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // If this is a state property, force the attribute to false.\n    if (options.state) {\n      (options as Mutable<PropertyDeclaration, 'attribute'>).attribute = false;\n    }\n    this.__prepare();\n    this.elementProperties.set(name, options);\n    if (!options.noAccessor) {\n      const key = DEV_MODE\n        ? // Use Symbol.for in dev mode to make it easier to maintain state\n          // when doing HMR.\n          Symbol.for(`${String(name)} (@property() cache)`)\n        : Symbol();\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    const {get, set} = getOwnPropertyDescriptor(this.prototype, name) ?? {\n      get(this: ReactiveElement) {\n        return this[key as keyof typeof this];\n      },\n      set(this: ReactiveElement, v: unknown) {\n        (this as unknown as Record<string | symbol, unknown>)[key] = v;\n      },\n    };\n    if (DEV_MODE && get == null) {\n      if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {\n        throw new Error(\n          `Field ${JSON.stringify(String(name))} on ` +\n            `${this.name} was declared as a reactive property ` +\n            `but it's actually declared as a value on the prototype. ` +\n            `Usually this is due to using @property or @state on a method.`\n        );\n      }\n      issueWarning(\n        'reactive-property-without-getter',\n        `Field ${JSON.stringify(String(name))} on ` +\n          `${this.name} was declared as a reactive property ` +\n          `but it does not have a getter. This will be an error in a ` +\n          `future version of Lit.`\n      );\n    }\n    return {\n      get(this: ReactiveElement) {\n        return get?.call(this);\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = get?.call(this);\n        set!.call(this, value);\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) ?? defaultPropertyDeclaration;\n  }\n\n  // Temporary, until google3 is on TypeScript 5.2\n  declare static [Symbol.metadata]: object & Record<PropertyKey, unknown>;\n\n  /**\n   * Initializes static own properties of the class used in bookkeeping\n   * for element properties, initializers, etc.\n   *\n   * Can be called multiple times by code that needs to ensure these\n   * properties exist before using them.\n   *\n   * This method ensures the superclass is finalized so that inherited\n   * property metadata can be copied down.\n   * @nocollapse\n   */\n  private static __prepare() {\n    if (\n      this.hasOwnProperty(JSCompiler_renameProperty('elementProperties', this))\n    ) {\n      // Already prepared\n      return;\n    }\n    // Finalize any superclasses\n    const superCtor = getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    // Initialize elementProperties from the superclass\n    this.elementProperties = new Map(superCtor.elementProperties);\n  }\n\n  /**\n   * Finishes setting up the class so that it's ready to be registered\n   * as a custom element and instantiated.\n   *\n   * This method is called by the ReactiveElement.observedAttributes getter.\n   * If you override the observedAttributes getter, you must either call\n   * super.observedAttributes to trigger finalization, or call finalize()\n   * yourself.\n   *\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this))) {\n      return;\n    }\n    this.finalized = true;\n    this.__prepare();\n\n    // Create properties from the static properties block:\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      const propKeys = [\n        ...getOwnPropertyNames(props),\n        ...getOwnPropertySymbols(props),\n      ] as Array<keyof typeof props>;\n      for (const p of propKeys) {\n        this.createProperty(p, props[p]);\n      }\n    }\n\n    // Create properties from standard decorator metadata:\n    const metadata = this[Symbol.metadata];\n    if (metadata !== null) {\n      const properties = litPropertyMetadata.get(metadata);\n      if (properties !== undefined) {\n        for (const [p, options] of properties) {\n          this.elementProperties.set(p, options);\n        }\n      }\n    }\n\n    // Create the attribute-to-property map\n    this.__attributeToPropertyMap = new Map();\n    for (const [p, options] of this.elementProperties) {\n      const attr = this.__attributeNameForProperty(p, options);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n      }\n    }\n\n    this.elementStyles = this.finalizeStyles(this.styles);\n\n    if (DEV_MODE) {\n      if (this.hasOwnProperty('createProperty')) {\n        issueWarning(\n          'no-override-create-property',\n          'Overriding ReactiveElement.createProperty() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n      if (this.hasOwnProperty('getPropertyDescriptor')) {\n        issueWarning(\n          'no-override-get-property-descriptor',\n          'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n    }\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | DocumentFragment;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Set<PropertyKey>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: Set<ReactiveController>;\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    // This enqueues a microtask that ust run before the first update, so it\n    // must be called before requestUpdate()\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= new Set()).add(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    this.__controllers?.delete(controller);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    const instanceProperties = new Map<PropertyKey, unknown>();\n    const elementProperties = (this.constructor as typeof ReactiveElement)\n      .elementProperties;\n    for (const p of elementProperties.keys() as IterableIterator<keyof this>) {\n      if (this.hasOwnProperty(p)) {\n        instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    }\n    if (instanceProperties.size > 0) {\n      this.__instanceProperties = instanceProperties;\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // Create renderRoot before controllers `hostConnected`\n    (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n      this.createRenderRoot();\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(name: PropertyKey, value: unknown) {\n    const elemProperties: PropertyDeclarationMap = (\n      this.constructor as typeof ReactiveElement\n    ).elementProperties;\n    const options = elemProperties.get(name)!;\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n          'migration'\n        ) &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      if (DEV_MODE && (name as unknown) instanceof Event) {\n        issueWarning(\n          ``,\n          `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`\n        );\n      }\n      options ??= (\n        this.constructor as typeof ReactiveElement\n      ).getPropertyOptions(name);\n      const hasChanged = options.hasChanged ?? notEqual;\n      const newValue = this[name as keyof this];\n      if (hasChanged(newValue, oldValue)) {\n        this._$changeProperty(name, oldValue, options);\n      } else {\n        // Abort the request if the property should not be considered changed.\n        return;\n      }\n    }\n    if (this.isUpdatePending === false) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _$changeProperty(\n    name: PropertyKey,\n    oldValue: unknown,\n    options: PropertyDeclaration\n  ) {\n    // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(\n    // vs just Map.set()\n    if (!this._$changedProperties.has(name)) {\n      this._$changedProperties.set(name, oldValue);\n    }\n    // Add to reflecting properties set.\n    // Note, it's important that every change has a chance to add the\n    // property to `__reflectingProperties`. This ensures setting\n    // attribute + property reflects correctly.\n    if (options.reflect === true && this.__reflectingProperty !== name) {\n      (this.__reflectingProperties ??= new Set<PropertyKey>()).add(name);\n    }\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    const result = this.performUpdate();\n    if (\n      DEV_MODE &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'async-perform-update'\n      ) &&\n      typeof (result as unknown as Promise<unknown> | undefined)?.then ===\n        'function'\n    ) {\n      issueWarning(\n        'async-perform-update',\n        `Element ${this.localName} returned a Promise from performUpdate(). ` +\n          `This behavior is deprecated and will be removed in a future ` +\n          `version of ReactiveElement.`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    if (!this.hasUpdated) {\n      // Create renderRoot before first update. This occurs in `connectedCallback`\n      // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.\n      (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n        this.createRenderRoot();\n      if (DEV_MODE) {\n        // Produce warning if any reactive properties on the prototype are\n        // shadowed by class fields. Instance fields set before upgrade are\n        // deleted by this point, so any own property is caused by class field\n        // initialization in the constructor.\n        const ctor = this.constructor as typeof ReactiveElement;\n        const shadowedProperties = [...ctor.elementProperties.keys()].filter(\n          (p) => this.hasOwnProperty(p) && p in getPrototypeOf(this)\n        );\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n      // Mixin instance properties once, if they exist.\n      if (this.__instanceProperties) {\n        // TODO (justinfagnani): should we use the stored value? Could a new value\n        // have been set since we stored the own property value?\n        for (const [p, value] of this.__instanceProperties) {\n          this[p as keyof this] = value as this[keyof this];\n        }\n        this.__instanceProperties = undefined;\n      }\n      // Trigger initial value reflection and populate the initial\n      // changedProperties map, but only for the case of experimental\n      // decorators on accessors, which will not have already populated the\n      // changedProperties map. We can't know if these accessors had\n      // initializers, so we just set them anyway - a difference from\n      // experimental decorators on fields and standard decorators on\n      // auto-accessors.\n      // For context why experimentalDecorators with auto accessors are handled\n      // specifically also see:\n      // https://github.com/lit/lit/pull/4183#issuecomment-1711959635\n      const elementProperties = (this.constructor as typeof ReactiveElement)\n        .elementProperties;\n      if (elementProperties.size > 0) {\n        for (const [p, options] of elementProperties) {\n          if (\n            options.wrapped === true &&\n            !this._$changedProperties.has(p) &&\n            this[p as keyof this] !== undefined\n          ) {\n            this._$changeProperty(p, this[p as keyof this], options);\n          }\n        }\n      }\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'change-in-update'\n      )\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    // The forEach() expression will only run when when __reflectingProperties is\n    // defined, and it returns undefined, setting __reflectingProperties to\n    // undefined\n    this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) =>\n      this.__propertyToAttribute(p, this[p as keyof this])\n    ) as undefined;\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n// Assigned here to work around a jscompiler bug with static fields\n// when compiling to ES5.\n// https://github.com/google/closure-compiler/issues/3177\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('elementProperties', ReactiveElement)\n] = new Map();\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', ReactiveElement)\n] = new Map();\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = [\n    'change-in-update',\n    'async-perform-update',\n  ];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (!this.enabledWarnings!.includes(warning)) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('2.0.4');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n",null,"/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets: boolean =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    for (const s of styles) {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    }\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\nimport type {TrustedHTML, TrustedTypesWindow} from 'trusted-types/lib';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        }),\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  global.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!global.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      global.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`,\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  global.ShadyDOM?.inUse &&\n  global.ShadyDOM?.noPatch === true\n    ? (global.ShadyDOM!.wrap as <T extends Node>(node: T) => T)\n    : <T extends Node>(node: T) => node;\n\nconst trustedTypes = (global as unknown as TrustedTypesWindow).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute',\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute',\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`,\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${Math.random().toFixed(9).slice(2)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d =\n  NODE_MODE && global.document === undefined\n    ? ({\n        createTreeWalker() {\n          return {};\n        },\n      } as unknown as Document)\n    : document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment('');\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g',\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\nconst MATHML_RESULT = 3;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT | typeof MATHML_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg} when it hasn't been compiled by @lit-labs/compiler.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type UncompiledTemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\n/**\n * This is a template result that may be either uncompiled or compiled.\n *\n * In the future, TemplateResult will be this type. If you want to explicitly\n * note that a template result is potentially compiled, you can reference this\n * type and it will continue to behave the same through the next major version\n * of Lit. This can be useful for code that wants to prepare for the next\n * major version of Lit.\n */\nexport type MaybeCompiledTemplateResult<T extends ResultType = ResultType> =\n  | UncompiledTemplateResult<T>\n  | CompiledTemplateResult;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n * In Lit 4, this type will be an alias of\n * MaybeCompiledTemplateResult, so that code will get type errors if it assumes\n * that Lit templates are not compiled. When deliberately working with only\n * one, use either {@linkcode CompiledTemplateResult} or\n * {@linkcode UncompiledTemplateResult} explicitly.\n */\nexport type TemplateResult<T extends ResultType = ResultType> =\n  UncompiledTemplateResult<T>;\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport type MathMLTemplateResult = TemplateResult<typeof MATHML_RESULT>;\n\n/**\n * A TemplateResult that has been compiled by @lit-labs/compiler, skipping the\n * prepare step.\n */\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  // The type is a TemplateStringsArray to guarantee that the value came from\n  // source code, preventing a JSON injection attack.\n  h: TemplateStringsArray;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.',\n      );\n    }\n    if (DEV_MODE) {\n      // Import static-html.js results in a circular dependency which g3 doesn't\n      // handle. Instead we know that static values must have the field\n      // `_$litStatic$`.\n      if (\n        values.some((val) => (val as {_$litStatic$: unknown})?.['_$litStatic$'])\n      ) {\n        issueWarning(\n          '',\n          `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\\n` +\n            `Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`,\n        );\n      }\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus not be properly contained within an `<svg>` HTML\n * element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const num = mathml`<mn>1</mn>`;\n *\n * const eq = html`\n *   <math>\n *     ${num}\n *   </math>`;\n * ```\n *\n * The `mathml` *tag function* should only be used for MathML fragments, or\n * elements that would be contained **inside** a `<math>` HTML element. A common\n * error is placing a `<math>` *element* in a template tagged with the `mathml`\n * tag function. The `<math>` element is an HTML element and should be used\n * within a template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an MathML fragment from the\n * `render()` method, as the MathML fragment will be contained within the\n * element's shadow root and thus not be properly contained within a `<math>`\n * HTML element.\n */\nexport const mathml = tag(MATHML_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - they must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */,\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\nfunction trustFromTemplateString(\n  tsa: TemplateStringsArray,\n  stringFromTSA: string,\n): TrustedHTML {\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  return policy !== undefined\n    ? policy.createHTML(stringFromTSA)\n    : (stringFromTSA as unknown as TrustedHTML);\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType,\n): [TrustedHTML, Array<string>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string> = [];\n  let html =\n    type === SVG_RESULT ? '<svg>' : type === MATHML_RESULT ? '<math>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions',\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n                ? doubleQuoteAttrEndRegex\n                : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B',\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n          ? (attrNames.push(attrName!),\n            s.slice(0, attrNameEndIndex) +\n              boundAttributeSuffix +\n              s.slice(attrNameEndIndex)) +\n            marker +\n            end\n          : s + marker + (attrNameEndIndex === -2 ? i : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html +\n    (strings[l] || '<?>') +\n    (type === SVG_RESULT ? '</svg>' : type === MATHML_RESULT ? '</math>' : '');\n\n  // Returned as an array for terseness\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: UncompiledTemplateResult,\n    options?: RenderOptions,\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Re-parent SVG or MathML nodes into template root\n    if (type === SVG_RESULT || type === MATHML_RESULT) {\n      const wrapper = this.el.content.firstChild!;\n      wrapper.replaceWith(...wrapper.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          for (const name of (node as Element).getAttributeNames()) {\n            if (name.endsWith(boundAttributeSuffix)) {\n              const realName = attrNames[attrNameIndex++];\n              const value = (node as Element).getAttribute(name)!;\n              const statics = value.split(marker);\n              const m = /([.?@])?(.*)/.exec(realName)!;\n              parts.push({\n                type: ATTRIBUTE_PART,\n                index: nodeIndex,\n                name: m[2],\n                strings: statics,\n                ctor:\n                  m[1] === '.'\n                    ? PropertyPart\n                    : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                        ? EventPart\n                        : AttributePart,\n              });\n              (node as Element).removeAttribute(name);\n            } else if (name.startsWith(marker)) {\n              parts.push({\n                type: ELEMENT_PART,\n                index: nodeIndex,\n              });\n              (node as Element).removeAttribute(name);\n            }\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n\n    if (DEV_MODE) {\n      // If there was a duplicate attribute on a tag, then when the tag is\n      // parsed into an element the attribute gets de-duplicated. We can detect\n      // this mismatch if we haven't precisely consumed every attribute name\n      // when preparing the template. This works because `attrNames` is built\n      // from the template string and `attrNameIndex` comes from processing the\n      // resulting DOM.\n      if (attrNames.length !== attrNameIndex) {\n        throw new Error(\n          `Detected duplicate attribute bindings. This occurs if your template ` +\n            `has duplicate attributes on an element tag. For example ` +\n            `\"<input ?disabled=\\${true} ?disabled=\\${false}>\" contains a ` +\n            `duplicate \"disabled\" attribute. The error was detected in ` +\n            `the following template: \\n` +\n            '`' +\n            strings.join('${...}') +\n            '`',\n        );\n      }\n    }\n\n    // We could set walker.currentNode to another node here to prevent a memory\n    // leak, but every time we prepare a template, we immediately render it\n    // and re-use the walker in new TemplateInstance._clone().\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'template prep',\n        template: this,\n        clonableTemplate: this.el,\n        parts: this.parts,\n        strings,\n      });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number,\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex,\n    );\n  }\n  return value;\n}\n\nexport type {TemplateInstance};\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  _$template: Template;\n  _$parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options,\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options,\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._$parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    // We need to set the currentNode away from the cloned tree so that we\n    // don't hold onto the tree even if the tree is detached and should be\n    // freed.\n    walker.currentNode = d;\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._$parts) {\n      if (part !== undefined) {\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'set part',\n            part,\n            value: values[i],\n            valueIndex: i,\n            values,\n            templateInstance: this,\n          });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  readonly ctor: typeof AttributePart;\n  readonly strings: ReadonlyArray<string>;\n};\ntype ChildTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | ChildTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unused otherwise. The\n   * intention would be clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number,\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined,\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`,\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent &&\n            debugLogEvent({\n              kind: 'commit nothing to child',\n              start: this._$startNode,\n              end: this._$endNode,\n              parent: this._$parent,\n              options: this.options,\n            });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      if (DEV_MODE && this.options?.host === value) {\n        this._commitText(\n          `[probable mistake: rendered a template's host in itself ` +\n            `(commonly caused by writing \\${this} in a template]`,\n        );\n        console.warn(\n          `Attempted to render the template host`,\n          value,\n          `inside itself. This is almost always a mistake, and in dev mode `,\n          `we render some warning text. In production however, we'll `,\n          `render it, which will usually result in an error, and sometimes `,\n          `in the element disappearing from the DOM.`,\n        );\n        return;\n      }\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(\n      node,\n      this._$endNode,\n    );\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit node',\n          start: this._$startNode,\n          parent: this._$parent,\n          value: value,\n          options: this.options,\n        });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit text',\n          node,\n          value,\n          options: this.options,\n        });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = d.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: textNode,\n            value,\n            options: this.options,\n          });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: wrap(this._$startNode).nextSibling as Text,\n            value,\n            options: this.options,\n          });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult,\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as UncompiledTemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(\n              trustFromTemplateString(type.h, type.h[0]),\n              this.options,\n            )),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template updating',\n          template,\n          instance: this._$committedValue as TemplateInstance,\n          parts: (this._$committedValue as TemplateInstance)._$parts,\n          options: this.options,\n          values,\n        });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      instance._update(values);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated and updated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: UncompiledTemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options,\n          )),\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex,\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number,\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this method\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().',\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was previously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type:\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART = ATTRIBUTE_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined,\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean,\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute',\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit attribute',\n          element: this.element,\n          name: this.name,\n          value,\n          options: this.options,\n        });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string,\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property',\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit property',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit boolean attribute',\n        element: this.element,\n        name: this.name,\n        value: !!(value && value !== nothing),\n        options: this.options,\n      });\n    (wrap(this.element) as Element).toggleAttribute(\n      this.name,\n      !!value && value !== nothing,\n    );\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined,\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.',\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this,\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit event listener',\n        element: this.element,\n        name: this.name,\n        value: newListener,\n        options: this.options,\n        removeListener: shouldRemoveListener,\n        addListener: shouldAddListener,\n        oldListener,\n      });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions,\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions,\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined,\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit to element binding',\n        element: this.element,\n        value,\n        options: this.options,\n      });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in tests and private-ssr-support\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? global.litHtmlPolyfillSupportDevMode\n  : global.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(global.litHtmlVersions ??= []).push('3.2.0');\nif (DEV_MODE && global.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`,\n  );\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions,\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'begin render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {},\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'end render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n * LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n * Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, RootPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\nimport {LitUnstable} from 'lit-html';\nimport {ReactiveUnstable} from '@lit/reactive-element';\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Unstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | LitUnstable.DebugLog.Entry\n      | ReactiveUnstable.DebugLog.Entry;\n  }\n}\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n  // This property needs to remain unminified.\n  static ['_$litElement$'] = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: RootPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected override createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected override update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n  override connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See @lit/reactive-element for more information.\n */\n(LitElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', LitElement)\n] = true;\n\n// Install hydration if available\nglobalThis.litElementHydrateSupport?.({LitElement});\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? globalThis.litElementPolyfillSupportDevMode\n  : globalThis.litElementPolyfillSupport;\npolyfillSupport?.({LitElement});\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n(globalThis.litElementVersions ??= []).push('4.1.0');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n",null,"/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * @fileoverview\n *\n * This file exports a boolean const whose value will depend on what environment\n * the module is being imported from.\n */\n\nconst NODE_MODE = false;\n\n/**\n * A boolean that will be `true` in server environments like Node, and `false`\n * in browser environments. Note that your server environment or toolchain must\n * support the `\"node\"` export condition for this to be `true`.\n *\n * This can be used when authoring components to change behavior based on\n * whether or not the component is executing in an SSR context.\n */\nexport const isServer = NODE_MODE;\n",null,null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {Constructor} from './base.js';\n\n/**\n * Allow for custom element classes with private constructors\n */\ntype CustomElementClass = Omit<typeof HTMLElement, 'new'>;\n\nexport type CustomElementDecorator = {\n  // legacy\n  (cls: CustomElementClass): void;\n\n  // standard\n  (\n    target: CustomElementClass,\n    context: ClassDecoratorContext<Constructor<HTMLElement>>\n  ): void;\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```js\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\nexport const customElement =\n  (tagName: string): CustomElementDecorator =>\n  (\n    classOrTarget: CustomElementClass | Constructor<HTMLElement>,\n    context?: ClassDecoratorContext<Constructor<HTMLElement>>\n  ) => {\n    if (context !== undefined) {\n      context.addInitializer(() => {\n        customElements.define(\n          tagName,\n          classOrTarget as CustomElementConstructor\n        );\n      });\n    } else {\n      customElements.define(tagName, classOrTarget as CustomElementConstructor);\n    }\n  };\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {\n  type PropertyDeclaration,\n  type ReactiveElement,\n  defaultConverter,\n  notEqual,\n} from '../reactive-element.js';\nimport type {Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n// Overloads for property decorator so that TypeScript can infer the correct\n// return type when a decorator is used as an accessor decorator or a setter\n// decorator.\nexport type PropertyDecorator = {\n  // accessor decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n\n  // setter decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: (value: V) => void,\n    context: ClassSetterDecoratorContext<C, V>\n  ): (this: C, value: V) => void;\n\n  // legacy decorator signature\n  (\n    protoOrDescriptor: Object,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any;\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration | undefined,\n  proto: Object,\n  name: PropertyKey\n) => {\n  const hasOwnProperty = proto.hasOwnProperty(name);\n  (proto.constructor as typeof ReactiveElement).createProperty(\n    name,\n    hasOwnProperty ? {...options, wrapped: true} : options\n  );\n  // For accessors (which have a descriptor on the prototype) we need to\n  // return a descriptor, otherwise TypeScript overwrites the descriptor we\n  // define in createProperty() with the original descriptor. We don't do this\n  // for fields, which don't have a descriptor, because this could overwrite\n  // descriptor defined by other decorators.\n  return hasOwnProperty\n    ? Object.getOwnPropertyDescriptor(proto, name)\n    : undefined;\n};\n\n// This is duplicated from a similar variable in reactive-element.ts, but\n// actually makes sense to have this default defined with the decorator, so\n// that different decorators could have different defaults.\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n// Temporary type, until google3 is on TypeScript 5.2\ntype StandardPropertyContext<C, V> = (\n  | ClassAccessorDecoratorContext<C, V>\n  | ClassSetterDecoratorContext<C, V>\n) & {metadata: object};\n\n/**\n * Wraps a class accessor or setter so that `requestUpdate()` is called with the\n * property name and old value when the accessor is set.\n */\nexport const standardProperty = <C extends Interface<ReactiveElement>, V>(\n  options: PropertyDeclaration = defaultPropertyDeclaration,\n  target: ClassAccessorDecoratorTarget<C, V> | ((value: V) => void),\n  context: StandardPropertyContext<C, V>\n): ClassAccessorDecoratorResult<C, V> | ((this: C, value: V) => void) => {\n  const {kind, metadata} = context;\n\n  if (DEV_MODE && metadata == null) {\n    issueWarning(\n      'missing-class-metadata',\n      `The class ${target} is missing decorator metadata. This ` +\n        `could mean that you're using a compiler that supports decorators ` +\n        `but doesn't support decorator metadata, such as TypeScript 5.1. ` +\n        `Please update your compiler.`\n    );\n  }\n\n  // Store the property options\n  let properties = globalThis.litPropertyMetadata.get(metadata);\n  if (properties === undefined) {\n    globalThis.litPropertyMetadata.set(metadata, (properties = new Map()));\n  }\n  properties.set(context.name, options);\n\n  if (kind === 'accessor') {\n    // Standard decorators cannot dynamically modify the class, so we can't\n    // replace a field with accessors. The user must use the new `accessor`\n    // keyword instead.\n    const {name} = context;\n    return {\n      set(this: ReactiveElement, v: V) {\n        const oldValue = (\n          target as ClassAccessorDecoratorTarget<C, V>\n        ).get.call(this as unknown as C);\n        (target as ClassAccessorDecoratorTarget<C, V>).set.call(\n          this as unknown as C,\n          v\n        );\n        this.requestUpdate(name, oldValue, options);\n      },\n      init(this: ReactiveElement, v: V): V {\n        if (v !== undefined) {\n          this._$changeProperty(name, undefined, options);\n        }\n        return v;\n      },\n    } as unknown as ClassAccessorDecoratorResult<C, V>;\n  } else if (kind === 'setter') {\n    const {name} = context;\n    return function (this: ReactiveElement, value: V) {\n      const oldValue = this[name as keyof ReactiveElement];\n      (target as (value: V) => void).call(this, value);\n      this.requestUpdate(name, oldValue, options);\n    } as unknown as (this: C, value: V) => void;\n  }\n  throw new Error(`Unsupported decorator location: ${kind}`);\n};\n\n/**\n * A class field or accessor decorator which creates a reactive property that\n * reflects a corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration): PropertyDecorator {\n  return <C extends Interface<ReactiveElement>, V>(\n    protoOrTarget:\n      | object\n      | ClassAccessorDecoratorTarget<C, V>\n      | ((value: V) => void),\n    nameOrContext:\n      | PropertyKey\n      | ClassAccessorDecoratorContext<C, V>\n      | ClassSetterDecoratorContext<C, V>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any => {\n    return (\n      typeof nameOrContext === 'object'\n        ? standardProperty<C, V>(\n            options,\n            protoOrTarget as\n              | ClassAccessorDecoratorTarget<C, V>\n              | ((value: V) => void),\n            nameOrContext as StandardPropertyContext<C, V>\n          )\n        : legacyProperty(\n            options,\n            protoOrTarget as Object,\n            nameOrContext as PropertyKey\n          )\n    ) as PropertyDecorator;\n  };\n}\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {property} from './property.js';\n\nexport interface StateDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * @deprecated use StateDeclaration\n */\nexport type InternalPropertyDeclaration<Type = unknown> =\n  StateDeclaration<Type>;\n\n/**\n * Declares a private or protected reactive property that still triggers\n * updates to the element when it changes. It does not reflect from the\n * corresponding attribute.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function state(options?: StateDeclaration) {\n  return property({\n    ...options,\n    // Add both `state` and `attribute` because we found a third party\n    // controller that is keying off of PropertyOptions.state to determine\n    // whether a field is a private internal property or not.\n    state: true,\n    attribute: false,\n  });\n}\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {Interface} from './base.js';\n\nexport type EventOptionsDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  <C, V extends (this: C, ...args: any) => any>(\n    value: V,\n    _context: ClassMethodDecoratorContext<C, V>\n  ): void;\n};\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(\n  options: AddEventListenerOptions\n): EventOptionsDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (<C, V extends (this: C, ...args: any) => any>(\n    protoOrValue: V,\n    nameOrContext: PropertyKey | ClassMethodDecoratorContext<C, V>\n  ) => {\n    const method =\n      typeof protoOrValue === 'function'\n        ? protoOrValue\n        : protoOrValue[nameOrContext as keyof ReactiveElement];\n    Object.assign(method, options);\n  }) as EventOptionsDecorator;\n}\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\nexport type QueryDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Element | null>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean): QueryDecorator {\n  return (<C extends Interface<ReactiveElement>, V extends Element | null>(\n    protoOrTarget: ClassAccessorDecoratorTarget<C, V>,\n    nameOrContext: PropertyKey | ClassAccessorDecoratorContext<C, V>,\n    descriptor?: PropertyDescriptor\n  ) => {\n    const doQuery = (el: Interface<ReactiveElement>): V => {\n      const result = (el.renderRoot?.querySelector(selector) ?? null) as V;\n      if (DEV_MODE && result === null && cache && !el.hasUpdated) {\n        const name =\n          typeof nameOrContext === 'object'\n            ? nameOrContext.name\n            : nameOrContext;\n        issueWarning(\n          '',\n          `@query'd field ${JSON.stringify(String(name))} with the 'cache' ` +\n            `flag set for selector '${selector}' has been accessed before ` +\n            `the first update and returned null. This is expected if the ` +\n            `renderRoot tree has not been provided beforehand (e.g. via ` +\n            `Declarative Shadow DOM). Therefore the value hasn't been cached.`\n        );\n      }\n      // TODO: if we want to allow users to assert that the query will never\n      // return null, we need a new option and to throw here if the result\n      // is null.\n      return result;\n    };\n    if (cache) {\n      // Accessors to wrap from either:\n      //   1. The decorator target, in the case of standard decorators\n      //   2. The property descriptor, in the case of experimental decorators\n      //      on auto-accessors.\n      //   3. Functions that access our own cache-key property on the instance,\n      //      in the case of experimental decorators on fields.\n      const {get, set} =\n        typeof nameOrContext === 'object'\n          ? protoOrTarget\n          : descriptor ??\n            (() => {\n              const key = DEV_MODE\n                ? Symbol(`${String(nameOrContext)} (@query() cache)`)\n                : Symbol();\n              type WithCache = ReactiveElement & {\n                [key: symbol]: Element | null;\n              };\n              return {\n                get() {\n                  return (this as WithCache)[key];\n                },\n                set(v) {\n                  (this as WithCache)[key] = v;\n                },\n              };\n            })();\n      return desc(protoOrTarget, nameOrContext, {\n        get(this: ReactiveElement): V {\n          let result: V = get!.call(this);\n          if (result === undefined) {\n            result = doQuery(this);\n            if (result !== null || this.hasUpdated) {\n              set!.call(this, result);\n            }\n          }\n          return result;\n        },\n      });\n    } else {\n      // This object works as the return type for both standard and\n      // experimental decorators.\n      return desc(protoOrTarget, nameOrContext, {\n        get(this: ReactiveElement) {\n          return doQuery(this);\n        },\n      });\n    }\n  }) as QueryDecorator;\n}\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Generates a public interface type that removes private and protected fields.\n * This allows accepting otherwise incompatible versions of the type (e.g. from\n * multiple copies of the same package in `node_modules`).\n */\nexport type Interface<T> = {\n  [K in keyof T]: T[K];\n};\n\nexport type Constructor<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T;\n};\n\n/**\n * Wraps up a few best practices when returning a property descriptor from a\n * decorator.\n *\n * Marks the defined property as configurable, and enumerable, and handles\n * the case where we have a busted Reflect.decorate zombiefill (e.g. in Angular\n * apps).\n *\n * @internal\n */\nexport const desc = (\n  obj: object,\n  name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>,\n  descriptor: PropertyDescriptor\n) => {\n  // For backwards compatibility, we keep them configurable and enumerable.\n  descriptor.configurable = true;\n  descriptor.enumerable = true;\n  if (\n    // We check for Reflect.decorate each time, in case the zombiefill\n    // is applied via lazy loading some Angular code.\n    (Reflect as typeof Reflect & {decorate?: unknown}).decorate &&\n    typeof name !== 'object'\n  ) {\n    // If we're called as a legacy decorator, and Reflect.decorate is present\n    // then we have no guarantees that the returned descriptor will be\n    // defined on the class, so we must apply it directly ourselves.\n\n    Object.defineProperty(obj, name, descriptor);\n  }\n  return descriptor;\n};\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAllDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends NodeList>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n// Shared fragment used to generate empty NodeLists when a render root is\n// undefined\nlet fragment: DocumentFragment;\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs: NodeListOf<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector: string): QueryAllDecorator {\n  return ((\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    return desc(obj, name, {\n      get(this: ReactiveElement) {\n        const container =\n          this.renderRoot ?? (fragment ??= document.createDocumentFragment());\n        return container.querySelectorAll(selector);\n      },\n    });\n  }) as QueryAllDecorator;\n}\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAsyncDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Promise<Element | null>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first: Promise<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector: string) {\n  return ((\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    return desc(obj, name, {\n      async get(this: ReactiveElement) {\n        await this.updateComplete;\n        return this.renderRoot?.querySelector(selector) ?? null;\n      },\n    });\n  }) as QueryAsyncDecorator;\n}\n",null,"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAssignedElementsDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Array<Element>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(\n  options?: QueryAssignedElementsOptions\n): QueryAssignedElementsDecorator {\n  return (<V extends Array<Element>>(\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    const {slot, selector} = options ?? {};\n    const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n    return desc(obj, name, {\n      get(this: ReactiveElement): V {\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements = slotEl?.assignedElements(options) ?? [];\n        return (\n          selector === undefined\n            ? elements\n            : elements.filter((node) => node.matches(selector))\n        ) as V;\n      },\n    });\n  }) as QueryAssignedElementsDecorator;\n}\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\n/**\n * Options for the {@linkcode queryAssignedNodes} decorator. Extends the options\n * that can be passed into [HTMLSlotElement.assignedNodes](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes).\n */\nexport interface QueryAssignedNodesOptions extends AssignedNodesOptions {\n  /**\n   * Name of the slot to query. Leave empty for the default slot.\n   */\n  slot?: string;\n}\n\nexport type QueryAssignedNodesDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Array<Node>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given `slot`.\n *\n * Can be passed an optional {@linkcode QueryAssignedNodesOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes({slot: 'list', flatten: true})\n *   listItems!: Array<Node>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note the type of this property should be annotated as `Array<Node>`. Use the\n * queryAssignedElements decorator to list only elements, and optionally filter\n * the element list using a CSS selector.\n *\n * @category Decorator\n */\nexport function queryAssignedNodes(\n  options?: QueryAssignedNodesOptions\n): QueryAssignedNodesDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (<V extends Array<Node>>(\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    const {slot} = options ?? {};\n    const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n    return desc(obj, name, {\n      get(this: ReactiveElement): V {\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        return (slotEl?.assignedNodes(options) ?? []) as unknown as V;\n      },\n    });\n  }) as QueryAssignedNodesDecorator;\n}\n",null,null,"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\ntype Falsy = null | undefined | false | 0 | -0 | 0n | '';\n\n/**\n * When `condition` is true, returns the result of calling `trueCase()`, else\n * returns the result of calling `falseCase()` if `falseCase` is defined.\n *\n * This is a convenience wrapper around a ternary expression that makes it a\n * little nicer to write an inline conditional without an else.\n *\n * @example\n *\n * ```ts\n * render() {\n *   return html`\n *     ${when(this.user, () => html`User: ${this.user.username}`, () => html`Sign In...`)}\n *   `;\n * }\n * ```\n */\nexport function when<C extends Falsy, T, F = undefined>(\n  condition: C,\n  trueCase: (c: C) => T,\n  falseCase?: (c: C) => F,\n): F;\nexport function when<C, T, F>(\n  condition: C extends Falsy ? never : C,\n  trueCase: (c: C) => T,\n  falseCase?: (c: C) => F,\n): T;\nexport function when<C, T, F = undefined>(\n  condition: C,\n  trueCase: (c: Exclude<C, Falsy>) => T,\n  falseCase?: (c: Extract<C, Falsy>) => F,\n): C extends Falsy ? F : T;\nexport function when(\n  condition: unknown,\n  trueCase: (c: unknown) => unknown,\n  falseCase?: (c: unknown) => unknown,\n): unknown {\n  return condition ? trueCase(condition) : falseCase?.(condition);\n}\n",null,"import { action, computed, makeObservable, observable, reaction } from \"mobx\"\n\n\nclass TipStore {\n\n    @observable\n    private _billAmount: number = 0;\n\n    @observable\n    private _rating: number = 0;\n\n    @observable\n    private _ratingByFirstPerson: number = 0;\n\n    @observable\n    private _ratingBySecondPerson: number = 0;\n\n    @action\n    setBillAmount(billAmount: number) {\n        this._billAmount = billAmount;\n    }\n\n    @action\n    updateRatingForService(choice: number) {\n        this._rating = choice;\n    }\n\n    @action\n    updateRatingByFirstPerson(choice: number) {\n        this._ratingByFirstPerson = choice;\n    }\n\n    @action\n    updateRatingBySecondPerson(choice: number) {\n        this._ratingBySecondPerson = choice;\n    }\n\n    @computed\n    get actualBillAmount() {\n        return this._billAmount;\n    }\n\n    @computed\n    get currentRating() {\n        console.log(`changed rating: ${this._rating}`)\n        return this._rating;\n    }\n\n    @computed\n    get currentFirstRating() {\n        console.log(`changed rating: ${this._ratingByFirstPerson}`)\n        return this._ratingByFirstPerson;\n    }\n\n    @computed\n    get currentSecondRating() {\n        console.log(`changed rating: ${this._ratingBySecondPerson}`)\n        return this._ratingBySecondPerson;\n    }\n\n\n    @computed\n    get finalBillAmount(){\n       return  this.actualBillAmount + (this.actualBillAmount) * ((this.currentFirstRating + this.currentSecondRating) / 2) / 100\n    }\n\n    // disposerRating1 = reaction(() => this._rating, () => {\n    //     console.log(`rating changed: ${this._rating}`)\n    // })\n\n    constructor() {\n        makeObservable(this);\n    }\n\n\n}\nexport const tipStore = new TipStore();\n",null,"import { BillAmountBox as Component } from \"../BillAmountBox\";\n\nconst TAG_NAME = \"bill-amount\";\n\nif (!customElements.get(TAG_NAME)) {\n    customElements.define(TAG_NAME, Component);\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        [TAG_NAME]: Component\n    }\n}",null,"import { MobxLitElement } from \"@adobe/lit-mobx\";\nimport { LitElement, html } from \"lit\"\nimport { property, state } from \"lit/decorators\";\nimport { guard } from \"lit/directives/guard\"\nimport { tipStore } from \"./index\"\nimport { action } from \"mobx\";\n// import { action, makeObservable, observable } from \"mobx\";\n\nexport class BillAmountBox extends MobxLitElement {\n\n    // @property({ type: Number})\n    // @state()\n\n\n    @property({ type: Number })\n    amountValue = 0;\n\n\n\n    @property({ type: Number })\n    increment = 0;\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return html`\n        <span>\n            <slot name=\"billAmount\"></slot>\n            <input type=\"text\" \n            placeholder=\"Enter amount...\" \n            .value=${this.amountValue}\n            @input=${this.onBillInitialAmountChange}\n            // ${guard([this.amountValue], () => this.onBillAmountChange)}\n            >\n              <button @click=${this.incrementCounter}>Increment: ${this.increment}</button>\n        </span>\n       \n        `\n    }\n    @action\n    incrementCounter() {\n        this.increment++;\n        this.requestUpdate()\n    }\n\n    /**Using mobx */\n    onBillInitialAmountChange = (e: Event) => {\n        const amount = e.target as HTMLInputElement;\n        tipStore.setBillAmount(Number(amount.value));\n        this.amountValue = tipStore.actualBillAmount;\n    }\n\n    // @action\n    onBillAmountChange = (e: Event) => {\n        const amount = e.target as HTMLInputElement;\n        this.amountValue = Number(amount.value);\n        // this.dispatchEvent(new CustomEvent('amount-changed', {\n        //     detail: { amount: this.amountValue },\n        //     bubbles: true,\n        //     composed: true\n        // }))\n    }\n}\n\n\n",null,null,"/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {noChange, Part} from '../lit-html.js';\nimport {directive, Directive, DirectiveParameters} from '../directive.js';\n\n// A sentinel that indicates guard() hasn't rendered anything yet\nconst initialValue = {};\n\nclass GuardDirective extends Directive {\n  private _previousValue: unknown = initialValue;\n\n  render(_value: unknown, f: () => unknown) {\n    return f();\n  }\n\n  override update(_part: Part, [value, f]: DirectiveParameters<this>) {\n    if (Array.isArray(value)) {\n      // Dirty-check arrays by item\n      if (\n        Array.isArray(this._previousValue) &&\n        this._previousValue.length === value.length &&\n        value.every((v, i) => v === (this._previousValue as Array<unknown>)[i])\n      ) {\n        return noChange;\n      }\n    } else if (this._previousValue === value) {\n      // Dirty-check non-arrays by identity\n      return noChange;\n    }\n\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    this._previousValue = Array.isArray(value) ? Array.from(value) : value;\n    const r = this.render(value, f);\n    return r;\n  }\n}\n\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Values are checked against previous values with strict equality (`===`), and\n * so the check won't detect nested property changes inside objects or arrays.\n * Arrays values have each item checked against the previous value at the same\n * index with strict equality. Nested arrays are also checked only by strict\n * equality.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * `\n * ```\n *\n * In this case, the template only rerenders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * `\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nexport const guard = directive(GuardDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {GuardDirective};\n",null,"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Disconnectable, Part} from './lit-html.js';\n\nexport {\n  AttributePart,\n  BooleanAttributePart,\n  ChildPart,\n  ElementPart,\n  EventPart,\n  Part,\n  PropertyPart,\n} from './lit-html.js';\n\nexport interface DirectiveClass {\n  new (part: PartInfo): Directive;\n}\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n */\nexport interface DirectiveResult<C extends DirectiveClass = DirectiveClass> {\n  /**\n   * This property needs to remain unminified.\n   * @internal\n   */\n  ['_$litDirective$']: C;\n  /** @internal */\n  values: DirectiveParameters<InstanceType<C>>;\n}\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = (typeof PartType)[keyof typeof PartType];\n\nexport interface ChildPartInfo {\n  readonly type: typeof PartType.CHILD;\n}\n\nexport interface AttributePartInfo {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n}\n\nexport interface ElementPartInfo {\n  readonly type: typeof PartType.ELEMENT;\n}\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n  <C extends DirectiveClass>(c: C) =>\n  (...values: DirectiveParameters<InstanceType<C>>): DirectiveResult<C> => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n  });\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive implements Disconnectable {\n  //@internal\n  __part!: Part;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent!: Disconnectable;\n\n  // These will only exist on the AsyncDirective subclass\n  //@internal\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // This property needs to remain unminified.\n  //@internal\n  ['_$notifyDirectiveConnectionChanged']?(isConnected: boolean): void;\n\n  constructor(_partInfo: PartInfo) {}\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  /** @internal */\n  _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined,\n  ) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part: Part, props: Array<unknown>): unknown {\n    return this.update(part, props);\n  }\n\n  abstract render(...props: Array<unknown>): unknown;\n\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n",null,"import { FinalAmountDisplay as Component } from \"../FinalAmountDisplay\";\n\n\n\nconst TAG_NAME = \"final-amount\";\n\nif (!customElements.get(TAG_NAME)) {\n    customElements.define(TAG_NAME, Component)\n}\ndeclare global {\n    interface HTMLELementTagNameMap {\n        [TAG_NAME]: Component\n    }\n\n}",null,"import { LitElement, PropertyValues, html } from \"lit\"\nimport { property } from \"lit/decorators\";\n\nexport class FinalAmountDisplay extends LitElement {\n\n    render() {\n        return html`\n            <div>\n                <slot name=\"final\"></slot>\n            </div>\n        `\n    }\n}",null,"\nimport { SelectOptionForRating as Component } from \"../SelectOptionForRating\"\n\nconst TAG_NAME = \"select-rating\";\n\nif (!customElements.get(TAG_NAME)) {\n    customElements.define(TAG_NAME, Component)\n}\ndeclare global {\n    interface HTMLElementTagNameMap {\n        [TAG_NAME]: Component\n    }\n}",null,"import { LitElement, html } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { tipStore } from \"./store/TipStore\";\n\n\nexport class SelectOptionForRating extends LitElement {\n\n    // @property({ type: Number, state: true })\n    @state()\n    percentage: Number = 0;\n\n    @property({ type: Boolean, attribute: \"is-first\" })\n    isFirstOption = false\n\n    @property({ type: Boolean, attribute: \"is-second\" })\n    isSeconOption = false\n\n    render() {\n        return html`\n               <span>\n                    <slot name=\"question\"></slot>\n                    <select \n                        ?is-first=${this.isFirstOption}\n                        ?is-second=${this.isSeconOption}\n                        .value=${this.percentage}\n                        @change=${this.handleSelectOption}\n                    \">\n                            <option value=${0}>Dissatified(0)%</option>\n                            <option value=${5}>Ok Service (5)%</option>\n                            <option value=${10}>Goog Service (10)%</option>\n                            <option value=${20}>Amazing loved it! (20)%</option>\n                    </select>\n               </span>\n        `\n    }\n    handleSelectOption(e: Event) {\n        const optionValue = e.target as HTMLSelectElement\n        if (optionValue.getAttribute('is-first') !== null) {\n            tipStore.updateRatingByFirstPerson(Number(optionValue.value))\n        } else {\n            tipStore.updateRatingBySecondPerson(Number(optionValue.value))\n        }\n        this.percentage = Number(optionValue.value);\n\n\n    }\n\n}"],"names":["niceErrors","_","annotationType","key","toString","index","length","other","constructor","name","dataStructure","thing","property","derivation","method","errors","process","env","NODE_ENV","die","error","args","Array","_len","_key","arguments","e","apply","Error","map","String","join","mockGlobal","getGlobal","globalThis","window","global","self","assign","Object","getDescriptor","getOwnPropertyDescriptor","defineProperty","objectPrototype","prototype","EMPTY_ARRAY","freeze","EMPTY_OBJECT","hasProxy","Proxy","plainObjectString","assertProxies","warnAboutProxyRequirement","msg","globalState","verifyProxies","getNextId","mobxGuid","once","func","invoked","noop","isFunction","fn","isStringish","value","t","isObject","isPlainObject","proto","getPrototypeOf","protoConstructor","hasOwnProperty","call","isGenerator","obj","displayName","addHiddenProp","object","propName","enumerable","writable","configurable","addHiddenFinalProp","createInstanceofPredicate","theClass","x","isES6Map","isPlainES6Map","mapProto","objectProto","nullProto","isES6Set","hasGetOwnPropertySymbols","getOwnPropertySymbols","getPlainObjectKeys","keys","symbols","concat","filter","s","propertyIsEnumerable","ownKeys","Reflect","getOwnPropertyNames","stringifyKey","toPrimitive","hasProp","target","prop","getOwnPropertyDescriptors","res","forEach","getFlag","flags","mask","setFlag","newValue","storedAnnotationsSymbol","Symbol","createDecoratorAnnotation","annotation","decorator","is20223Decorator","decorate_20223_","storeAnnotation","_extends","isOverride","fieldName","assertNotDecorated","currentAnnotationType","annotationType_","requestedAnnotationType","collectStoredAnnotations","context","assert20223DecoratorType","types","includes","kind","$mobx","Atom","name_","flags_","observers_","Set","lastAccessedBy_","lowestObserverState_","IDerivationState_","NOT_TRACKING_","onBOL","onBUOL","_proto","onBO","listener","onBUO","reportObserved","reportChanged","startBatch","propagateChanged","endBatch","_createClass","get","isBeingObservedMask_","set","isPendingUnobservationMask_","diffValueMask_","isAtom","createAtom","onBecomeObservedHandler","onBecomeUnobservedHandler","atom","onBecomeObserved","onBecomeUnobserved","identityComparer","a","b","structuralComparer","deepEqual","shallowComparer","defaultComparer","is","comparer","identity","structural","shallow","deepEnhancer","v","isObservable","isArray","observable","array","undefined","isAction","isFlow","flow","autoAction","shallowEnhancer","isObservableObject","isObservableArray","isObservableMap","isObservableSet","deep","referenceEnhancer","refStructEnhancer","oldValue","OVERRIDE","override","make_","extend_","adm","isPlainObject_","appliedAnnotations_","descriptor","proxyTrap","desc","console","warn","createActionAnnotation","options","options_","source","_this$options_","bound","target_","actionDescriptor","createActionDescriptor","defineProperty_","mthd","addInitializer","ann","_createAction","m","_ann$options_$name","_ann$options_","_ann$options_$autoAct","_ann$options_2","createAction","initMthd","_ann$options_3","bind","isMobxAction","_this$options_2","assertActionDescriptor","_ref","_ref2","safeDescriptors","_annotation$options_","_adm$proxy_","proxy_","_annotation$options_$","_annotation$options_2","_annotation$options_$2","_annotation$options_3","_annotation$options_4","_adm$proxy_2","createFlowAnnotation","flowDescriptor","createFlowDescriptor","_this$options_3","isMobXFlow","assertFlowDescriptor","createComputedAnnotation","assertComputedDescriptor","defineComputedProperty_","asObservableObject","values_","ComputedValue","getObservablePropValue_","createObservableAnnotation","assertObservableDescriptor","defineObservableProperty_","_this$options_$enhanc","enhancer","initializedObjects","WeakSet","initializeObservable","ObservableValue","_ann$options_$enhance","add","has","setObservablePropValue_","init","AUTO","autoAnnotation","createAutoAnnotation","computed","flowAnnotation","autoBind","actionAnnotation","observableAnnotation","ref","_this$options_4","_this$options_5","_this$options_6","OBSERVABLE","OBSERVABLE_REF","OBSERVABLE_SHALLOW","OBSERVABLE_STRUCT","defaultCreateObservableOptions","defaultDecorator","proxy","asCreateObservableOptions","observableRefAnnotation","observableShallowAnnotation","observableStructAnnotation","observableDecoratorAnnotation","getEnhancerFromOptions","getEnhancerFromAnnotation","getAnnotationFromOptions","_options$defaultDecor","createObservable","arg2","arg3","box","observableFactories","o","equals","initialValues","useProxies","createLegacyArray","createObservableArray","ObservableMap","ObservableSet","props","decorators","initObservable","extendObservable","asDynamicObservableObject","struct","COMPUTED","COMPUTED_STRUCT","computedAnnotation","computedStructAnnotation","arg1","opts","currentActionId","nextActionId","isFunctionNameConfigurable","_getDescriptor$config","_getDescriptor","tmpNameDescriptor","actionName","executeAction","canRunAsDerivation","scope","runInfo","_startAction","err","error_","_endAction","notifySpy_","isSpyEnabled","startTime_","Date","now","flattenedArgs","from","spyReportStart","type","ACTION","prevDerivation_","trackingDerivation","runAsAction","prevAllowStateChanges_","allowStateChanges","untrackedStart","allowStateChangesStart","prevAllowStateReads_","allowStateReadsStart","runAsAction_","actionId_","parentActionId_","suppressReactionErrors","allowStateChangesEnd","allowStateReadsEnd","untrackedEnd","spyReportEnd","time","prev","CREATE","_Atom","notifySpy","_this","hasUnreportedChange_","interceptors_","changeListeners_","value_","dehancer","spyReport","observableKind","debugObjectName","_inheritsLoose","dehanceValue","prepareNewValue_","UNCHANGED","UPDATE","setNewValue_","checkIfStateModificationsAreAllowed","hasInterceptors","change","interceptChange","hasListeners","notifyListeners","intercept_","handler","registerInterceptor","observe_","fireImmediately","registerListener","raw","toJSON","valueOf","isObservableValue","dependenciesState_","observing_","newObserving_","runId_","UP_TO_DATE_","unboundDepsCount_","CaughtException","triggeredBy_","setter_","isTracing_","TraceMode","NONE","scope_","equals_","requiresReaction_","keepAlive_","compareStructural","requiresReaction","keepAlive","onBecomeStale_","propagateMaybeChanged","isComputing","inBatch","size","shouldCompute","warnAboutUntrackedRead_","computeValue_","prevTrackingContext","trackingContext","trackAndCompute","propagateChangeConfirmed","result","isCaughtException","cause","isRunningSetter","wasSuspended","changed","track","trackDerivedFunction","disableErrorBoundaries","suspend_","clearObserving","log","firstTime","prevValue","autorun","prevU","computedRequiresReaction","isComputingMask_","isRunningSetterMask_","isComputedValue","STALE_","POSSIBLY_STALE_","prevAllowStateReads","prevUntracked","obs","l","i","changeDependenciesStateTo0","isComputingDerivation","hasObservers","enforceActions","checkIfStateReadsAreAllowed","allowStateReads","observableRequiresReaction","f","runId","prevTracking","bindDependencies","warnAboutDerivationWithoutDependencies","requiresObservable_","reactionRequiresObservable","prevObserving","observing","lowestNewObservingDerivationState","i0","dep","diffValue","removeObserver","addObserver","untracked","action","persistentKeys","MobXGlobals","version","pendingUnobservations","pendingReactions","isRunningReactions","spyListeners","globalReactionErrorHandlers","canMergeGlobalState","isolateCalled","__mobxInstanceCount","__mobxGlobals","setTimeout","isolateGlobalState","getGlobalState","resetGlobalState","defaultGlobals","indexOf","getObservers","node","queueForUnobservation","isPendingUnobservation","push","runReactions","list","isBeingObserved","d","logTraceInfo","BREAK","lines","printDepTree","getDependencyTree","Function","replace","tree","depth","repeat","dependencies","child","Reaction","onInvalidate_","errorHandler_","schedule_","isScheduled","runReaction_","isDisposed","isTrackPending","reportExceptionInDerivation_","notify","startTime","isRunning","prevReaction","message","dispose","getDisposer_","abortSignal","_this2","removeEventListener","addEventListener","trace","enterBreakPoint","isDisposedMask_","isScheduledMask_","isTrackPendingMask_","isRunningMask_","onReactionError","idx","splice","MAX_REACTION_ITERATIONS","reactionScheduler","runReactionsHelper","allReactions","iterations","remainingReactions","isReaction","setReactionScheduler","baseScheduler","event","listeners","END_EVENT","spy","ACTION_BOUND","AUTOACTION","AUTOACTION_BOUND","DEFAULT_ACTION_NAME","actionBoundAnnotation","autoActionAnnotation","autoActionBoundAnnotation","createActionFactory","runInAction","view","_opts$name","_opts","runSync","scheduler","delay","reaction","reactionRunner","onError","requiresObservable","createSchedulerFromOptions","_opts2","signal","aborted","_opts3","run","expression","effect","_opts$name2","effectAction","wrapErrorHandler","r","nextValue","_opts4","_opts5","errorHandler","baseFn","ON_BECOME_OBSERVED","ON_BECOME_UNOBSERVED","interceptHook","hook","getAtom","cb","listenersKey","hookListeners","NEVER","ALWAYS","OBSERVED","configure","ea","properties","annotations","descriptors","nodeToDependencyTree","unique","getObserverTree","nodeToObserverTree","observers","generatorId","FlowCancellationError","create","isFlowCancellationError","flowBoundAnnotation","generator","ctx","gen","rejector","pendingPromise","promise","Promise","resolve","reject","stepId","onFulfilled","ret","next","onRejected","then","done","cancel","cancelPromise","yieldedPromise","flowResult","interceptReads","propOrHandler","getAdministration","intercept","interceptProperty","interceptInterceptable","_isComputed","isComputed","isComputedProp","_isObservable","isObservableProp","keys_","values","slice","entries","set_","parseInt","remove","delete_","has_","get_","apiDefineProperty","apiOwnKeys","ownKeys_","observe","propOrCb","cbOrFire","observeObservableProperty","observeObservable","cache","toJSHelper","__alreadySeen","Map","toJS","pop","getAtomFromArgs","LOG","transaction","thisArg","when","predicate","whenPromise","_when","timeoutHandle","timeout","disposer","cond","clearTimeout","_opts$signal","abort","_opts$signal2","_opts$signal3","getAdm","objectProxyTraps","_getAdm$set_","deleteProperty","_getAdm$delete_","_getAdm$definePropert","preventExtensions","_target$$mobx$proxy_","_target$$mobx","interceptable","interceptors","listenable","makeObservable","_annotations","keysSymbol","makeAutoObservable","overrides","SPLICE","MAX_SPLICE_SIZE","arrayTraps","getArrayLength_","isNaN","arrayExtensions","setArrayLength_","ObservableArrayAdministration","owned_","legacyMode_","atom_","enhancer_","lastKnownLength_","newV","oldV","dehanceValue_","dehanceValues_","added","addedCount","removed","removedCount","newLength","currentLength","newItems","spliceWithArray_","updateArrayLength_","oldLength","delta","reserveArrayBuffer","deleteCount","Math","max","min","lengthDelta","spliceItemsIntoValues_","notifyArraySplice_","_this$values_","oldItems","notifyArrayChildUpdate_","owned","clear","spliceWithArray","_len2","items","_key2","shift","unshift","_len3","_key3","reverse","sort","copy","addArrayExtension","simpleFunc","mapLikeFunc","reduceLikeFunc","funcName","funcFactory","dehancedValues","callback","element","accumulator","currentValue","_this3","isObservableArrayAdministration","ObservableMapMarker","ADD","DELETE","initialData","data_","hasMap_","keysAtom_","merge","entry","newEntry","hasKey","updateValue_","addValue_","_delete","_this3$hasMap_$get","_this4","_this4$hasMap_$get","makeIterable","_keys$next","_keys$next2","iterator","_iterator","_createForOfIteratorHelperLoose","_step","_step$value","_this5","_iterator2","_this6","_step2","replacementMap","convertToMap","orderedData","keysReportChangedCalled","_iterator3","_this7","_step3","deleted","_iterator4","_step4","_step4$value","keyExisted","iter1","iter2","next1","next2","toStringTag","ObservableSetMarker","callbackFn","nextIndex","observableValues","intersection","otherSet","dehancedSet","union","difference","symmetricDifference","isSubsetOf","isSupersetOf","isDisjointFrom","descriptorCache","REMOVE","ObservableObjectAdministration","defaultAnnotation_","pendingKeys_","isAnnotation","assertAnnotable","_this$target_$storedA","outcome","recordAnnotationApplied","deleteOutcome","notifyPropertyAddition_","cachedDescriptor","getCachedObservablePropDescriptor","_this$pendingKeys_","_this$pendingKeys_2","getDebugName","isExtensible","_options$name","isObservableObjectAdministration","_adm$target_$storedAn","ENTRY_0","createArrayEntryDescriptor","safariPrototypeSetterInheritanceBug","p","OBSERVABLE_ARRAY_BUFFER_SIZE","StubArray","inherit","ctor","setPrototypeOf","__proto__","LegacyObservableArray","_StubArray","arrays","createArrayBufferItem","named","eq","aStack","bStack","className","unwrap","areArrays","aCtor","bCtor","getSelf","g","__MOBX_DEVTOOLS_GLOBAL_HOOK__","injectMobx","extras","trustedTypes","emptyStringForBooleanAttribute","emptyScript","polyfillSupport","reactiveElementPolyfillSupport","JSCompiler_renameProperty","_obj","defaultConverter","toAttribute","Boolean","JSON","stringify","fromAttribute","fromValue","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","metadata","litPropertyMetadata","WeakMap","ReactiveElement","HTMLElement","initializer","this","__prepare","_initializers","observedAttributes","finalize","__attributeToPropertyMap","createProperty","state","elementProperties","noAccessor","getPropertyDescriptor","requestUpdate","getPropertyOptions","superCtor","finalized","propKeys","attr","__attributeNameForProperty","elementStyles","finalizeStyles","styles","flat","Infinity","getCompatibleStyle","toLowerCase","super","__instanceProperties","isUpdatePending","hasUpdated","__reflectingProperty","__initialize","__updatePromise","enableUpdating","_$changedProperties","__saveInstanceProperties","addController","controller","__controllers","renderRoot","isConnected","hostConnected","removeController","delete","instanceProperties","createRenderRoot","shadowRoot","attachShadow","shadowRootOptions","adoptStyles","connectedCallback","c","_requestedUpdate","disconnectedCallback","hostDisconnected","attributeChangedCallback","_old","_$attributeToProperty","__propertyToAttribute","attrValue","removeAttribute","setAttribute","_$changeProperty","__enqueueUpdate","__reflectingProperties","scheduleUpdate","performUpdate","wrapped","shouldUpdate","changedProperties","willUpdate","hostUpdate","update","__markUpdated","_$didUpdate","_changedProperties","hostUpdated","firstUpdated","updated","updateComplete","getUpdateComplete","mode","reactiveElementVersions","supportsAdoptingStyleSheets","ShadowRoot","ShadyCSS","nativeShadow","Document","CSSStyleSheet","constructionToken","cssTagCache","CSSResult","cssText","strings","safeToken","_strings","styleSheet","_styleSheet","cacheable","replaceSync","unsafeCSS","css","reduce","acc","textFromCSSResult","adoptedStyleSheets","style","document","createElement","nonce","textContent","appendChild","sheet","rule","cssRules","cssResultFromStyleSheet","policy","createPolicy","createHTML","boundAttributeSuffix","marker","random","toFixed","markerMatch","nodeMarker","createMarker","createComment","isPrimitive","isIterable","SPACE_CHAR","textEndRegex","commentEndRegex","comment2EndRegex","tagEndRegex","RegExp","singleQuoteAttrEndRegex","doubleQuoteAttrEndRegex","rawTextElement","tag","_$litType$","html","svg","mathml","noChange","for","nothing","templateCache","walker","createTreeWalker","trustFromTemplateString","tsa","stringFromTSA","getTemplateHtml","attrNames","rawTextEndRegex","regex","attrName","match","attrNameEndIndex","lastIndex","exec","test","end","startsWith","Template","parts","nodeIndex","attrNameIndex","partCount","el","currentNode","content","wrapper","firstChild","replaceWith","childNodes","nextNode","nodeType","hasAttributes","getAttributeNames","endsWith","realName","statics","getAttribute","split","PropertyPart","BooleanAttributePart","EventPart","AttributePart","tagName","append","data","_options","innerHTML","resolveDirective","part","parent","attributeIndex","currentDirective","__directives","__directive","nextDirectiveConstructor","_$initialize","_$resolve","TemplateInstance","template","_$parts","_$disconnectableChildren","_$template","_$parent","parentNode","_$isConnected","_clone","fragment","creationScope","importNode","partIndex","templatePart","ChildPart","nextSibling","ElementPart","_update","_$setValue","__isConnected","startNode","endNode","_$committedValue","_$startNode","_$endNode","directiveParent","_$clear","_commitText","_commitTemplateResult","_commitNode","_commitIterable","_insert","insertBefore","createTextNode","_$getTemplate","h","instance","itemParts","itemPart","item","start","_$notifyConnectionChanged","n","setConnected","fill","valueIndex","noCommit","_commitValue","toggleAttribute","newListener","oldListener","shouldRemoveListener","capture","passive","shouldAddListener","handleEvent","host","_$LH","_boundAttributeSuffix","_marker","_markerMatch","_HTML_RESULT","_getTemplateHtml","_TemplateInstance","_isIterable","_resolveDirective","_ChildPart","_AttributePart","_BooleanAttributePart","_EventPart","_PropertyPart","_ElementPart","litHtmlPolyfillSupport","litHtmlVersions","render","container","partOwnerNode","renderBefore","LitElement","renderOptions","__childPart","litElementHydrateSupport","litElementPolyfillSupport","_$LE","litElementVersions","isServer","customElement","classOrTarget","customElements","define","standardProperty","protoOrTarget","nameOrContext","legacyProperty","eventOptions","protoOrValue","query","selector","doQuery","querySelector","decorate","queryAll","createDocumentFragment","querySelectorAll","queryAsync","queryAssignedElements","slot","slotSelector","slotEl","elements","assignedElements","matches","queryAssignedNodes","assignedNodes","condition","trueCase","falseCase","initialValue","guard","directive","Directive","_previousValue","_value","_part","every","PartType","ATTRIBUTE","CHILD","PROPERTY","BOOLEAN_ATTRIBUTE","EVENT","ELEMENT","_$litDirective$","_partInfo","__part","__attributeIndex"],"version":3,"file":"far-away.f7fdcf18.js.map","sourceRoot":"/__parcel_source_root/"}