{"version":3,"file":"PersonStore.js","sourceRoot":"","sources":["../../../src/tip-calculator/store/PersonStore.ts"],"names":[],"mappings":"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","sourcesContent":["import { action, autorun, computed, makeObservable, observable, reaction, runInAction, when } from \"mobx\"\nimport { resolve } from \"path\";\n\nconst waitTimeOut = () => new Promise((resolve) => setTimeout(resolve, 1000))\n\nclass PersonStore {\n\n  @observable\n  firstName: string = '';\n\n  @observable\n  lastName: string = \"\";\n\n  @observable\n  age: number = 0;\n\n  @observable\n  canApplyForLicense: boolean = false;\n\n  @observable\n  dollars: number = 10;\n\n\n  constructor(fName: string, lName: string) {\n    this.firstName = fName;\n    this.lastName = lName;\n    makeObservable(this)\n    when(() => this.age > 18,\n      () => this.checkLicenseAgeLimit()\n    )\n  }\n\n  @action\n  setFirstName(firstName: string) {\n    this.firstName = firstName;\n  }\n  @action\n  setLastName(lastName: string) {\n    this.lastName = lastName;\n  }\n\n  @action\n  setAge(age: number) {\n    this.age = age;\n  }\n\n\n  @action\n  setFullName(fName: string, lName: string) {\n    this.setFirstName(fName);\n    this.lastName = lName;\n  }\n\n  @action\n  checkLicenseAgeLimit() {\n    this.canApplyForLicense = true\n  }\n\n  @computed\n  get euros() {\n    console.log('calculating euros')\n    return this.dollars * 2;\n  }\n\n\n\n}\n\nconst person = new PersonStore(\"Vinod\", \"Lohana\")\nconsole.log('new person : ', person);\n\nautorun(() => {\n  // console.log(`Person name updated: ${person.firstName}  ${person.lastName} ${person.age}, ${person.canApplyForLicense},\" euros:\", ${person.euros}`);\n  console.log(`Autorun: Euros: ${person.euros}`);\n})\nconsole.log(person.euros);//if is accessed from reaction then the computation is cached and not recalled.\nconsole.log(person.euros);//if is accessed from reaction then the computation is cached and not recalled.\nconsole.log(person.euros);//if is accessed from reaction then the computation is cached and not recalled.\nconsole.log(person.euros);//if is accessed from reaction then the computation is cached and not recalled.\n\n// person.setFirstName(\"Mobx\");// method 1\n// person.setLastName('New')\nperson.setFullName(\"Vikki\", \"Lohana\"); //batched updates both first and lastname.\n\nperson.setAge(15); // here the observable is already tru and there is no change due to when is executed once.\n// when second time a age > 18 condition satisfied the reaction will be called and there is a state change\n// of canApply then only reaction is called.\n\nconst disposer = reaction(() => person.canApplyForLicense == true,\n  () => console.log(\"Hurray ! you can apply for license\")\n)\nperson.setAge(25);\n\nif (person.canApplyForLicense) {\n  disposer();\n}\n\n\n\n\n/** Async mode batching do not take place. */\n// runInAction(async () => {\n//   person.firstName = \"Mobx F\";\n//   await waitTimeOut();\n//   person.lastName = \"New lastName\"\n\n// })\n\n\n\n// action: method -2 \n// runInAction(()=>{\n//   person.firstName= \"Mobx New\"\n// })\n\n// // action : method -3\n// const updaterFn = action(()=>{\n//   person.firstName = \"Mobx New\";\n// })\n// updaterFn();\n\n// person.setFullName(\"Vikki\",\"\")\nexport { }"]}