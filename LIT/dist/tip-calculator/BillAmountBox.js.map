{"version":3,"file":"BillAmountBox.js","sourceRoot":"","sources":["../../src/tip-calculator/BillAmountBox.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAc,IAAI,EAAE,MAAM,KAAK,CAAA;AACtC,OAAO,EAAE,QAAQ,EAAS,MAAM,gBAAgB,CAAC;AACjD,OAAO,EAAE,KAAK,EAAE,MAAM,sBAAsB,CAAA;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAA;AAClC,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,6DAA6D;AAE7D,MAAM,OAAO,aAAc,SAAQ,cAAc;IAc7C;QACI,KAAK,EAAE,CAAC;QAbZ,6BAA6B;QAC7B,WAAW;QAIX;;;;mBAAc,CAAC;WAAC;QAKhB;;;;mBAAY,CAAC;WAAC;QA2Bd,gBAAgB;QAChB;;;;mBAA4B,CAAC,CAAQ,EAAE,EAAE;gBACrC,MAAM,MAAM,GAAG,CAAC,CAAC,MAA0B,CAAC;gBAC5C,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,gBAAgB,CAAC;YACjD,CAAC;WAAA;QAED,UAAU;QACV;;;;mBAAqB,CAAC,CAAQ,EAAE,EAAE;gBAC9B,MAAM,MAAM,GAAG,CAAC,CAAC,MAA0B,CAAC;gBAC5C,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACxC,yDAAyD;gBACzD,4CAA4C;gBAC5C,qBAAqB;gBACrB,qBAAqB;gBACrB,MAAM;YACV,CAAC;WAAA;IAvCD,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAA;;;;;qBAKE,IAAI,CAAC,WAAW;qBAChB,IAAI,CAAC,yBAAyB;iBAClC,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC;;+BAE1C,IAAI,CAAC,gBAAgB,eAAe,IAAI,CAAC,SAAS;;;SAGxE,CAAA;IACL,CAAC;IAED,gBAAgB;QACZ,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,aAAa,EAAE,CAAA;IACxB,CAAC;CAmBJ;AAjDG;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;kDACX;AAKhB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;gDACb;AAsBd;IADC,MAAM;;;;qDAIN","sourcesContent":["import { MobxLitElement } from \"@adobe/lit-mobx\";\nimport { LitElement, html } from \"lit\"\nimport { property, state } from \"lit/decorators\";\nimport { guard } from \"lit/directives/guard\"\nimport { tipStore } from \"./index\"\nimport { action } from \"mobx\";\n// import { action, makeObservable, observable } from \"mobx\";\n\nexport class BillAmountBox extends MobxLitElement {\n\n    // @property({ type: Number})\n    // @state()\n\n\n    @property({ type: Number })\n    amountValue = 0;\n\n\n\n    @property({ type: Number })\n    increment = 0;\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return html`\n        <span>\n            <slot name=\"billAmount\"></slot>\n            <input type=\"text\" \n            placeholder=\"Enter amount...\" \n            .value=${this.amountValue}\n            @input=${this.onBillInitialAmountChange}\n            // ${guard([this.amountValue], () => this.onBillAmountChange)}\n            >\n              <button @click=${this.incrementCounter}>Increment: ${this.increment}</button>\n        </span>\n       \n        `\n    }\n    @action\n    incrementCounter() {\n        this.increment++;\n        this.requestUpdate()\n    }\n\n    /**Using mobx */\n    onBillInitialAmountChange = (e: Event) => {\n        const amount = e.target as HTMLInputElement;\n        tipStore.setBillAmount(Number(amount.value));\n        this.amountValue = tipStore.actualBillAmount;\n    }\n\n    // @action\n    onBillAmountChange = (e: Event) => {\n        const amount = e.target as HTMLInputElement;\n        this.amountValue = Number(amount.value);\n        // this.dispatchEvent(new CustomEvent('amount-changed', {\n        //     detail: { amount: this.amountValue },\n        //     bubbles: true,\n        //     composed: true\n        // }))\n    }\n}\n\n\n"]}